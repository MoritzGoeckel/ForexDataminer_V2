<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 12.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="12.0">
 <Targets>
  <Target Name="E:\Programmieren\Libs\accord-framework\Release\net45\Accord.Statistics.dll">
   <Modules>
    <Module Name="accord.statistics.dll">
     <Namespaces>
      <Namespace Name="Accord.Math.Distances">
       <Types>
        <Type Name="Bhattacharyya" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Distance(Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution,Accord.Statistics.Distributions.Multivariate.MultivariateNormalDistribution)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Distances" File="Bhattacharyya.cs" Line="255">In member 'Bhattacharyya.Distance(MultivariateNormalDistribution, MultivariateNormalDistribution)', change parameter name 'a' to 'x' in order to match the identifier as it has been declared in 'IDistance&lt;MultivariateNormalDistribution, MultivariateNormalDistribution&gt;.Distance(MultivariateNormalDistribution, MultivariateNormalDistribution)'.</Issue>
            </Message>
            <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Distances" File="Bhattacharyya.cs" Line="255">In member 'Bhattacharyya.Distance(MultivariateNormalDistribution, MultivariateNormalDistribution)', change parameter name 'b' to 'y' in order to match the identifier as it has been declared in 'IDistance&lt;MultivariateNormalDistribution, MultivariateNormalDistribution&gt;.Distance(MultivariateNormalDistribution, MultivariateNormalDistribution)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Distance(Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution,Accord.Statistics.Distributions.Univariate.UnivariateDiscreteDistribution)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Distances" File="Bhattacharyya.cs" Line="112">The 'this' parameter (or 'Me' in Visual Basic) of 'Bhattacharyya.Distance(UnivariateDiscreteDistribution, UnivariateDiscreteDistribution)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Distance(System.Double[],System.Double[,],System.Double,System.Double[],System.Double[,],System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Distances" File="Bhattacharyya.cs" Line="215">The 'this' parameter (or 'Me' in Visual Basic) of 'Bhattacharyya.Distance(double[], double[,], double, double[], double[,], double)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Accord.Statistics">
       <Types>
        <Type Name="Groups" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#Expand(System.Int32[],System.Int32[],System.Int32[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="NonBreaking">
             <Issue Name="NoArguments" Certainty="95" Level="CriticalError" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics" File="Group.cs" Line="183">Call the 'DimensionMismatchException' constructor that contains a message and/or paramName parameter.</Issue>
             <Issue Name="NoArguments" Certainty="95" Level="CriticalError" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics" File="Group.cs" Line="186">Call the 'DimensionMismatchException' constructor that contains a message and/or paramName parameter.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Tools" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Distance(Accord.Statistics.Kernels.IKernel,System.Double[],System.Double[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Measures" File="Tools.cs" Line="603">Consider changing the type of parameter 'kernel' in 'Tools.Distance(IKernel, double[], double[])' from 'IKernel' to its base type 'IKernel&lt;double[]&gt;'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Accord.Statistics.Analysis">
       <Types>
        <Type Name="ProcrustedDataset" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Dataset" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeCompoundWord" Certainty="80" Level="Error">The discrete term 'Dataset' in type name 'ProcrustedDataset' should be expressed as a compound word, 'DataSet'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Dataset" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Dataset" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeCompoundWord" Certainty="80" Level="Error">The discrete term 'Dataset' in member name 'ProcrustedDataset.Dataset' should be expressed as a compound word, 'DataSet'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Transform(Accord.Statistics.Analysis.ProcrustedDataset)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="preference" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Analysis" File="ProcustesAnalysis.cs" Line="448">In member 'ProcrustedDataset.Transform(ProcrustedDataset)', the compound word 'preference' in parameter name 'p_reference' exists as a discrete term. If your usage is intended to be single word, case it as 'preference' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="reference" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Analysis" File="ProcustesAnalysis.cs" Line="448">In member 'ProcrustedDataset.Transform(ProcrustedDataset)', correct the casing of 'reference' in parameter name 'p_reference' by changing it to 'Reference'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Analysis" File="ProcustesAnalysis.cs" Line="448">In member 'ProcrustedDataset.Transform(ProcrustedDataset)', remove the underscores from parameter name 'p_reference'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ProcrustesAnalysis" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CheckSampleDataArgument(System.Double[,][])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Analysis" File="ProcustesAnalysis.cs" Line="111">The 'this' parameter (or 'Me' in Visual Basic) of 'ProcrustesAnalysis.CheckSampleDataArgument(params double[][,])' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Compute(System.Int32,System.Double[,][])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="index" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Analysis" File="ProcustesAnalysis.cs" Line="348">In member 'ProcrustesAnalysis.Compute(int, params double[][,])', correct the casing of 'index' in parameter name 'reference_sample_index' by changing it to 'Index'.</Issue>
            </Message>
            <Message Id="sample" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Analysis" File="ProcustesAnalysis.cs" Line="348">In member 'ProcrustesAnalysis.Compute(int, params double[][,])', correct the casing of 'sample' in parameter name 'reference_sample_index' by changing it to 'Sample'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Analysis" File="ProcustesAnalysis.cs" Line="348">In member 'ProcrustesAnalysis.Compute(int, params double[][,])', remove the underscores from parameter name 'reference_sample_index'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDatasetScale(System.Double[,])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Analysis" File="ProcustesAnalysis.cs" Line="184">The 'this' parameter (or 'Me' in Visual Basic) of 'ProcrustesAnalysis.GetDatasetScale(double[,])' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcrustedDatasets" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Datasets" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeCompoundWord" Certainty="80" Level="Error">The discrete term 'Datasets' in member name 'ProcrustesAnalysis.ProcrustedDatasets' should be expressed as a compound word, 'DataSets'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcrustesDistance(System.Double[,],System.Double[,])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Analysis" File="ProcustesAnalysis.cs" Line="269">The 'this' parameter (or 'Me' in Visual Basic) of 'ProcrustesAnalysis.ProcrustesDistance(double[,], double[,])' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Rotate(Accord.Statistics.Analysis.ProcrustedDataset,Accord.Statistics.Analysis.ProcrustedDataset)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Analysis" File="ProcustesAnalysis.cs" Line="222">The 'this' parameter (or 'Me' in Visual Basic) of 'ProcrustesAnalysis.Rotate(ProcrustedDataset, ProcrustedDataset)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Translate(System.Double[,],System.Double[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Analysis" File="ProcustesAnalysis.cs" Line="153">The 'this' parameter (or 'Me' in Visual Basic) of 'ProcrustesAnalysis.Translate(double[,], double[])' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Accord.Statistics.Distances">
       <Types>
        <Type Name="IDivergence`2" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Warning">Define a custom attribute to replace 'IDivergence&lt;T, U&gt;'.</Issue>
          </Message>
          <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="NonBreaking">
           <Issue Name="TypeTypeParameter" Certainty="95" Level="Error">On type 'IDivergence&lt;T, U&gt;', prefix generic type parameter name 'U' with 'T'.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Accord.Statistics.Distributions.Multivariate">
       <Types>
        <Type Name="MixtureComponent`1" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'MixtureComponent&lt;T&gt;' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'MixtureComponent&lt;T&gt;' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Accord.Statistics.Distributions.Univariate">
       <Types>
        <Type Name="EmpiricalHazardDistribution" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Double[],System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalEstimator)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Distributions\Univariate\Continuous" File="EmpiricalHazardDistribution.cs" Line="252">Method 'EmpiricalHazardDistribution.EmpiricalHazardDistribution(double[], double[], SurvivalEstimator)' passes 'time' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Distributions\Univariate\Continuous" File="EmpiricalHazardDistribution.cs" Line="259">Method 'EmpiricalHazardDistribution.EmpiricalHazardDistribution(double[], double[], SurvivalEstimator)' passes 'time' as the 'paramName' argument to a 'DimensionMismatchException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Distributions\Univariate\Continuous" File="EmpiricalHazardDistribution.cs" Line="255">Method 'EmpiricalHazardDistribution.EmpiricalHazardDistribution(double[], double[], SurvivalEstimator)' passes 'values' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fit(System.Double[],System.Double[],Accord.Statistics.Distributions.Fitting.SurvivalOptions)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="NonBreaking">
             <Issue Name="NoArguments" Certainty="95" Level="CriticalError" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Distributions\Univariate\Continuous" File="EmpiricalHazardDistribution.cs" Line="751">Call the 'ArgumentException' constructor that contains a message and/or paramName parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#init(System.Double[],System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalEstimator)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Distributions\Univariate\Continuous" File="EmpiricalHazardDistribution.cs" Line="294">'EmpiricalHazardDistribution.init(double[], double[], SurvivalEstimator)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Sort(System.Double[]&amp;,Accord.Statistics.Distributions.Univariate.SurvivalOutcome[]&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Distributions\Univariate\Continuous" File="EmpiricalHazardDistribution.cs" Line="767">Consider a design that does not require that 'time' be a reference parameter.</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Distributions\Univariate\Continuous" File="EmpiricalHazardDistribution.cs" Line="767">Consider a design that does not require that 'output' be a reference parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Sort(System.Double[]&amp;,Accord.Statistics.Distributions.Univariate.SurvivalOutcome[]&amp;,System.Double[]&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Distributions\Univariate\Continuous" File="EmpiricalHazardDistribution.cs" Line="813">Consider a design that does not require that 'time' be a reference parameter.</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Distributions\Univariate\Continuous" File="EmpiricalHazardDistribution.cs" Line="813">Consider a design that does not require that 'output' be a reference parameter.</Issue>
            </Message>
            <Message Id="2#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Distributions\Univariate\Continuous" File="EmpiricalHazardDistribution.cs" Line="813">Consider a design that does not require that 'weights' be a reference parameter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Sort(System.Double[]&amp;,Accord.Statistics.Distributions.Univariate.SurvivalOutcome[]&amp;,System.Double[][]&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Distributions\Univariate\Continuous" File="EmpiricalHazardDistribution.cs" Line="794">Consider a design that does not require that 'time' be a reference parameter.</Issue>
            </Message>
            <Message Id="1#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Distributions\Univariate\Continuous" File="EmpiricalHazardDistribution.cs" Line="794">Consider a design that does not require that 'output' be a reference parameter.</Issue>
            </Message>
            <Message Id="2#" TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Distributions\Univariate\Continuous" File="EmpiricalHazardDistribution.cs" Line="794">Consider a design that does not require that 'inputs' be a reference parameter.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Accord.Statistics.Kernels">
       <Types>
        <Type Name="IKernel" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Warning">Define a custom attribute to replace 'IKernel'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IKernel`1" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Function(!0,!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Function" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'IKernel&lt;T&gt;.Function(T, T)' so that it no longer conflicts with the reserved language keyword 'Function'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Accord.Statistics.Models.Regression">
       <Types>
        <Type Name="ProportionalHazards" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetPartialLogLikelihood(System.Double[],Accord.Statistics.Distributions.Univariate.SurvivalOutcome[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2016-01-15 13:11:49Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Statistics\Models\Survival" File="ProportionalHazards.cs" Line="334">The 'this' parameter (or 'Me' in Visual Basic) of 'ProportionalHazards.GetPartialLogLikelihood(double[], SurvivalOutcome[])' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040">
   <Name>Avoid empty interfaces</Name>
   <Description>Interfaces are meant to contain members that specify a set of behaviors. To mark or label a class, use an attribute instead of an empty interface.</Description>
   <Resolution Name="Default">Define a custom attribute to replace {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182128.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="MemberParameterShouldBeDiscreteTerm">In member {0}, the compound word '{1}' in parameter name {2} exists as a discrete term. If your usage is intended to be single word, case it as '{3}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberShouldBeCompoundWord">The discrete term '{0}' in member name {1} should be expressed as a compound word, '{2}'.</Resolution>
   <Resolution Name="TypeShouldBeCompoundWord">The discrete term '{0}' in type name {1} should be expressed as a compound word, '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264474.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
   <Name>Consider passing base types as parameters</Name>
   <Description>Using base types as parameters to methods improves re-use of these methods if you only use methods &amp; properties from the parameter's base class. E.g. use Stream instead of FileStream as a parameter when only calling Stream.Read(), this makes the method work on all kind of streams instead of just File streams.</Description>
   <Resolution Name="Default">Consider changing the type of parameter {0} in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/3hk32yyz.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotPassTypesByReference" Category="Microsoft.Design" CheckId="CA1045">
   <Name>Do not pass types by reference</Name>
   <Description>Although there are legitimate times to use reference parameters, such use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
   <Resolution Name="Default">Consider a design that does not require that {0} be a reference parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182146.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201">
   <Name>Do not raise reserved exception types</Name>
   <Description>User code should not create and raise exceptions of certain types that are reserved by the runtime or which are of a too general exception type. Exception types that are too general include Exception, SystemException, and ApplicationException. Exception types that are reserved by the runtime include ThreadAbortException, OutOfMemoryException, ExecutionEngineException, and IndexOutOfRangeException.</Description>
   <Resolution Name="TooGeneric">{0} creates an exception of type {1}, an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182338.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="MemberParameter">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715">
   <Name>Identifiers should have correct prefix</Name>
   <Description>Prefix interface names with the letter 'I' to indicate that the type is an interface, as in IFormattable. Prefix generic type parameter names with the letter 'T' and provide them with descriptive names, as in Dictionary&lt;TKey, TValue&gt;, unless a single 'T' is completely self-explanatory, as in Collection&lt;T&gt;. Use Pascal casing for both interface and type parameter names. Use abbreviations sparingly. Do not use the underscore character. Do use similar names when defining a class/interface pair where the class is a standard implementation of the interface. The names should differ only by the letter I prefixed on the interface name, as with Component and IComponent.</Description>
   <Resolution Name="TypeTypeParameter">On type {0}, prefix generic type parameter name {1} with 'T'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182243.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707">
   <Name>Identifiers should not contain underscores</Name>
   <Description>Do not use underscores when specifying identifiers. Some generated Visual Studio identifiers for applications contain underscore characters. Underscore characters should generally be avoided in public identifiers.</Description>
   <Resolution Name="MemberParameter">In member {0}, remove the underscores from parameter name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182245.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716">
   <Name>Identifiers should not match keywords</Name>
   <Description>Identifiers which conflict with reserved language keywords should be avoided. Using a reserved keyword as an identifier makes it harder for consumers in other languages to use your API.</Description>
   <Resolution Name="Member">Rename virtual/interface member {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182248.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208">
   <Name>Instantiate argument exceptions correctly</Name>
   <Description>String arguments passed to constructors of ArgumentException and its derived types should be correct. Types derived from ArgumentException have inconsistent constructor overloads with respect to the message and paramName parameters as compared to ArgumentException.</Description>
   <Resolution Name="IncorrectParameterName">Method {0} passes '{1}' as the {2} argument to a {3} constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Resolution>
   <Resolution Name="NoArguments">Call the {0} constructor that contains a message and/or paramName parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182347.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815">
   <Name>Override equals and operator equals on value types</Name>
   <Description>The default System.ValueType implementation might not perform as well as a custom implementation.</Description>
   <Resolution Name="Equals">{0} should override Equals.</Resolution>
   <Resolution Name="op_Equality">{0} should override the equality (==) and inequality (!=) operators.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182276.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725">
   <Name>Parameter names should match base declaration</Name>
   <Description>For usability reasons, parameter names in overridden methods should match those of the base declaration.</Description>
   <Resolution Name="Default">In member {0}, change parameter name {1} to {2} in order to match the identifier as it has been declared in {3}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182251.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
