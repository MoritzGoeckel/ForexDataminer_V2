<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 12.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="12.0">
 <Targets>
  <Target Name="E:\Programmieren\Libs\accord-framework\Release\net45\Accord.dll">
   <Modules>
    <Module Name="accord.dll">
     <Namespaces>
      <Namespace Name="Accord">
       <Types>
        <Type Name="ByteRange" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2016-01-15 13:11:14Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'ByteRange' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="CommunicationBufferEventArgs" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetMessageString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2016-01-15 13:11:14Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Core\AForge" File="EventArgs.cs" Line="79">Change 'CommunicationBufferEventArgs.GetMessageString()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ConnectionFailedException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2016-01-15 13:11:14Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ConnectionFailedException': protected ConnectionFailedException(SerializationInfo, StreamingContext).</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ConnectionLostException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2016-01-15 13:11:14Z" FixCategory="NonBreaking">
             <Issue Name="Accessibility" Certainty="95" Level="Error" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Core\AForge" File="Exceptions.cs" Line="96">Change the accessibility of 'ConnectionLostException.ConnectionLostException(SerializationInfo, StreamingContext)' to protected.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DeviceBusyException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2016-01-15 13:11:14Z" FixCategory="NonBreaking">
             <Issue Name="Accessibility" Certainty="95" Level="Error" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Core\AForge" File="Exceptions.cs" Line="193">Change the accessibility of 'DeviceBusyException.DeviceBusyException(SerializationInfo, StreamingContext)' to protected.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DeviceErrorException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2016-01-15 13:11:14Z" FixCategory="NonBreaking">
             <Issue Name="Accessibility" Certainty="95" Level="Error" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Core\AForge" File="Exceptions.cs" Line="240">Change the accessibility of 'DeviceErrorException.DeviceErrorException(SerializationInfo, StreamingContext)' to protected.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DoublePoint" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#X" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-01-15 13:11:14Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'DoublePoint.X' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Y" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-01-15 13:11:14Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'DoublePoint.Y' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExtensionMethods" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#DeserializeAnyVersion`1(System.Runtime.Serialization.Formatters.Binary.BinaryFormatter,System.IO.Stream)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="formatter" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2016-01-15 13:11:14Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Core" File="ExtensionMethods.cs" Line="182">Parameter 'formatter' of 'ExtensionMethods.DeserializeAnyVersion&lt;T&gt;(this BinaryFormatter, Stream)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IntPoint" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#X" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-01-15 13:11:14Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'IntPoint.X' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Y" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-01-15 13:11:14Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'IntPoint.Y' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IntRange" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2016-01-15 13:11:14Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'IntRange' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="MessageTransferHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003" Status="Active" Created="2016-01-15 13:11:14Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Remove 'MessageTransferHandler' and replace its usage with EventHandler&lt;T&gt;</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="NotConnectedException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2016-01-15 13:11:14Z" FixCategory="NonBreaking">
             <Issue Name="Accessibility" Certainty="95" Level="Error" Path="e:\Programmieren\Libs\accord-framework\Sources\Accord.Core\AForge" File="Exceptions.cs" Line="144">Change the accessibility of 'NotConnectedException.NotConnectedException(SerializationInfo, StreamingContext)' to protected.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Point" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#X" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-01-15 13:11:14Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Point.X' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Y" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2016-01-15 13:11:14Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Point.Y' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SerializationBinderAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="DefineAccessorsForAttributeArguments" Category="Microsoft.Design" CheckId="CA1019" Status="Active" Created="2016-01-15 13:11:14Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add a public read-only property accessor for positional argument 'binderType' of Attribute 'SerializationBinderAttribute'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="SourceTypeAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="DefineAccessorsForAttributeArguments" Category="Microsoft.Design" CheckId="CA1019" Status="Active" Created="2016-01-15 13:11:14Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add a public read-only property accessor for positional argument 'type' of Attribute 'SourceTypeAttribute'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="SystemTools" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#memcpy(System.Byte*,System.Byte*,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2016-01-15 13:11:14Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'SystemTools.memcpy(byte*, byte*, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#memset(System.Byte*,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2016-01-15 13:11:14Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'SystemTools.memset(byte*, int, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="DefineAccessorsForAttributeArguments" Category="Microsoft.Design" CheckId="CA1019">
   <Name>Define accessors for attribute arguments</Name>
   <Description>Provide accessors for both named and positional arguments. Each positional argument on an attribute should declare a read-only property with the same name (but different casing). Each named argument should provide a read/write property with the same name (but different casing).</Description>
   <Resolution Name="Default">Add a public read-only property accessor for positional argument {0} of Attribute {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182136.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182141.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710">
   <Name>Identifiers should have correct suffix</Name>
   <Description>Types that extend certain base types have specified name suffixes. Types that extend Attribute, for example, should be suffixed in 'Attribute', as in ObsoleteAttribute. This rules checks types that extend several base types, including Attribute, Exception, EventArgs, IMembershipPermission, Stream, and others.</Description>
   <Resolution Name="Default">Rename {0} to end in '{1}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182244.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032">
   <Name>Implement standard exception constructors</Name>
   <Description>Multiple constructors are required to correctly implement a custom exception. Missing constructors can make your exception unusable in certain scenarios. For example, the serialization constructor is required for handling exceptions in XML Web services.</Description>
   <Resolution Name="Accessibility">Change the accessibility of {0} to {1}.</Resolution>
   <Resolution Name="MissingConstructor">Add the following constructor to {0}: {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182151.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060">
   <Name>Move P/Invokes to NativeMethods class</Name>
   <Description>This type contains members with the DllImport attribute. Members with the DllImport attribute should be contained in classes named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Description>
   <Resolution Name="Default">Because it is a P/Invoke method, {0} should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182161.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182268.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="UseGenericEventHandlerInstances" Category="Microsoft.Design" CheckId="CA1003">
   <Name>Use generic event handler instances</Name>
   <Description>Do not declare new delegates to be used as event handlers when targeting a version of the .NET Framework that supports generics. Use an instance EventHandler&lt;T&gt; instead.</Description>
   <Resolution Name="Default">Remove {0} and replace its usage with EventHandler&lt;T&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182178.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
   <Name>Use properties where appropriate</Name>
   <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
   <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182181.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
