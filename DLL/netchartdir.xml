<?xml version="1.0"?>
<doc>
<assembly>
<name>netchartdir</name>
</assembly>
<members>
<member name="T:ChartDirector.BaseChart">
<summary>
The BaseChart class is an abstract class containing methods that are common to all chart types.
</summary>
</member>
<member name="T:ChartDirector.SplineLayer">
<summary>
The SplineLayer class represents spline layers. SplineLayer is a subclass of "LineLayer".
</summary>
</member>
<member name="T:ChartDirector.AngularMeter">
<summary>
The AngularMeter class represents angular meters. AngularMeter is a subclass of "BaseMeter".
</summary>
</member>
<member name="T:ChartDirector.XYChart">
<summary>
The XYChart class represents XY charts. It is a subclass of "BaseChart".
</summary>
</member>
<member name="T:ChartDirector.Mark">
<summary>
The Mark class represents mark lines. Mark is a subclass of "TextBox".
</summary>
</member>
<member name="T:ChartDirector.RadialAxis">
<summary>
The RadialAxis class represents radial axes in polar charts. RadialAxis is a subclass of "Axis".
</summary>
</member>
<member name="T:ChartDirector.BaseMeter">
<summary>
The BaseMeter class is the base class of all meters in ChartDirector. BaseMeter is a subclass of "BaseChart".
</summary>
</member>
<member name="T:ChartDirector.CDMLTable">
<summary>
The CDMLTable class represents tables for "CDML" contents.
</summary>
</member>
<member name="T:ChartDirector.WinHotSpotEventArgs">
<summary>
WinHotSpotEventArgs is used in various hot spot events of the WinChartViewer control to represent attributes associated with the hot spot. These attributes come from query parameters in the image map that defines the hot spot.
</summary>
</member>
<member name="T:ChartDirector.PolarSplineLineLayer">
<summary>
The PolarSplineLineLayer class represents polar spline line layers. PolarSplineLineLayer is a subclass of "PolarLineLayer".
</summary>
</member>
<member name="T:ChartDirector.ContourLayer">
<summary>
The ContourLayer class represents contour layers. ContourLayer is a subclass of "Layer".
</summary>
</member>
<member name="T:ChartDirector.PyramidLayer">
<summary>
The PyramidLayer class represents a layer in a pyramid
</summary>
</member>
<member name="T:ChartDirector.DataSet">
<summary>
The DataSet class represents data sets.
</summary>
</member>
<member name="T:ChartDirector.PyramidChart">
<summary>
The PyramidChart class represents pyramid charts (including cone charts and funnel charts). PyramidChart is a subclass of "BaseChart".
</summary>
</member>
<member name="T:ChartDirector.BoxWhiskerLayer">
<summary>
The BoxWhiskerLayer class represents box-whisker layers. BoxWhiskerLayer is a subclass of "BaseBoxLayer".
</summary>
</member>
<member name="T:ChartDirector.TTFText">
<summary>
The TTFText class represents text blocks.
</summary>
</member>
<member name="T:ChartDirector.FinanceChart">
<summary>
FinanceChart is a powerful financial charting library built on top of the main ChartDirector library. It extends "MultiChart" by implementing many financial indicators, and allowing complex financial charts to be composed easily.
</summary>
</member>
<member name="T:ChartDirector.CandleStickLayer">
<summary>
The CandleStickLayer class represents candlestick layers. CandleStickLayer is a subclass of "BaseBoxLayer".
</summary>
</member>
<member name="T:ChartDirector.MultiChart">
<summary>
The MultiChart class represents multi-charts. A multi-chart is a container to contain multiple charts. MultiChart is a subclass of "BaseChart".
</summary>
</member>
<member name="T:ChartDirector.ThreeDScatterGroup">
<summary>
The ThreeDSCatterGroup class represents a group of scatter symbols in a ThreeDScatterChart object.
</summary>
</member>
<member name="T:ChartDirector.PolarChart">
<summary>
The PolarChart class represents polar charts (including radar charts). PolarChart is a subclass of "BaseChart".
</summary>
</member>
<member name="T:ChartDirector.HLOCLayer">
<summary>
The HLOCLayer class represents high-low-open-close layers. HLOCLayer is a subclass of "BaseBoxLayer".
</summary>
</member>
<member name="T:ChartDirector.Chart">
<summary>
ChartDirector.Chart is a class used to contain static ChartDirector functions and constants. In effect, this class is used as a namespace for these functions and constants. (A real namespace is not used because in .NET, a namespace cannot contain functions.)
</summary>
</member>
<member name="T:ChartDirector.Line">
<summary>
The Line class represents straight lines.
</summary>
</member>
<member name="T:ChartDirector.PolarLineLayer">
<summary>
The PolarLineLayer class represents polar area layers. PolarLineLayer is a subclass of "PolarLayer".
</summary>
</member>
<member name="T:ChartDirector.ScatterLayer">
<summary>
The ScatterLayer class represents scatter layers. ScatterLayer is a subclass of "Layer".
</summary>
</member>
<member name="T:ChartDirector.ThreeDChart">
<summary>
The ThreeDChart class is an abstract class containing methods that are common to all true 3D chart types. ThreeDChart is a subclass of "BaseChart".
</summary>
</member>
<member name="T:ChartDirector.Box">
<summary>
The Box class represents boxes. It is used as the base class for more complex classes (such as the "TextBox" class).
</summary>
</member>
<member name="T:ChartDirector.FinanceSimulator">
<summary>
FinanceSimulator is a utility class to produce random data that looks like financial data series.
</summary>
</member>
<member name="T:ChartDirector.MeterPointer">
<summary>
The MeterPointer class represent meter pointers in both angular and linear meters.
</summary>
</member>
<member name="T:ChartDirector.WinChartViewer">
<summary>
The WinChartViewer control is a Windows Forms  control for viewing ChartDirector charts. It is a subclass of the .NET PictureBox control. Apart from displaying the charts, its main functions are to support advanced user interactions with the charts, including:
</summary>
</member>
<member name="T:ChartDirector.SurfaceChart">
<summary>
The SurfaceChart class represents surface charts. SurfaceChart is a subclass of "ThreeDChart".
</summary>
</member>
<member name="T:ChartDirector.RanSeries">
<summary>
RanSeries is a utility class to produce random series.
</summary>
</member>
<member name="T:ChartDirector.AreaLayer">
<summary>
The AreaLayer class represents area layers. AreaLayer is a subclass of "Layer".
</summary>
</member>
<member name="T:ChartDirector.InterLineLayer">
<summary>
The InterLineLayer class represents interline layers. InterLineLayer is a subclass of "Layer".
</summary>
</member>
<member name="T:ChartDirector.TrendLayer">
<summary>
The TrendLayer class represents trend layers. TrendLayer is a subclass "Layer".
</summary>
</member>
<member name="T:ChartDirector.LegendBox">
<summary>
The class LegendBox represents legend boxes. LegendBox is a subclass of "TextBox".
</summary>
</member>
<member name="T:ChartDirector.ArrayMath">
<summary>
The ArrayMath class is a utility class used to perform array computations.
</summary>
</member>
<member name="T:ChartDirector.PolarLayer">
<summary>
The PolarLayer class is the base class for all "PolarChart" layer classes.
</summary>
</member>
<member name="T:ChartDirector.AngularAxis">
<summary>
The AngularAxis class represents angular axes in polar charts.
</summary>
</member>
<member name="T:ChartDirector.WinViewPortEventArgs">
<summary>
WinViewPortEventArgs is a subclass of System.EventArgs. It provides information about viewport changed events.
</summary>
</member>
<member name="T:ChartDirector.StepLineLayer">
<summary>
The StepLineLayer class represents step line layers. StepLineLayer is a subclass of "LineLayer".
</summary>
</member>
<member name="T:ChartDirector.WebChartViewer">
<summary>
The WebChartViewer control is a Web Forms control for viewing charts and for handling advanced chart user interactions. It is a subclass of the ASP.NET Image control.
</summary>
</member>
<member name="T:ChartDirector.TextBox">
<summary>
The TextBox class represents text boxes. TextBox is a subclass of "Box".
</summary>
</member>
<member name="T:ChartDirector.Sector">
<summary>
The Sector class represents sectors.
</summary>
</member>
<member name="T:ChartDirector.RanTable">
<summary>
RanTable is a utility class to produce tables with random numbers.
</summary>
</member>
<member name="T:ChartDirector.Layer">
<summary>
The Layer class is the base class for all "XYChart" layer classes.
</summary>
</member>
<member name="T:ChartDirector.VectorLayer">
<summary>
The VectorLayer class represents vector layers. VectorLayer is a subclass of "Layer".
</summary>
</member>
<member name="T:ChartDirector.LineLayer">
<summary>
The LineLayer class represents line layers. LineLayer is a subclass of "Layer".
</summary>
</member>
<member name="T:ChartDirector.LinearMeter">
<summary>
The LinearMeter class represents linear meters
</summary>
</member>
<member name="T:ChartDirector.WebHotSpotEventArgs">
<summary>
WebHotSpotEventArgs is used in "WebChartViewer.ClickHotSpot" events to represent attributes associated with the hot spot. These attributes come from query parameters in the image map that defines the hot spot.
</summary>
</member>
<member name="T:ChartDirector.PolarVectorLayer">
<summary>
The PolarVectorLayer class represents polar vector layers. PolarVectorLayer is a subclass of "PolarLayer".
</summary>
</member>
<member name="T:ChartDirector.BarLayer">
<summary>
The BarLayer class represents bar layers. BarLayer is a subclass of "Layer".
</summary>
</member>
<member name="T:ChartDirector.WinViewPortControl">
<summary>
The WinViewPortControl is a Windows Forms control to let the user visualize and manipulate the viewport managed by the "WinChartViewer". It is a subclass of the .NET PictureBox control.
</summary>
</member>
<member name="T:ChartDirector.PlotArea">
<summary>
The PlotArea class represents plot areas in XY charts.
</summary>
</member>
<member name="T:ChartDirector.PolarSplineAreaLayer">
<summary>
The PolarSplineAreaLayer class represents polar spline area layers. PolarSplineAreaLayer is a subclass of "PolarAreaLayer".
</summary>
</member>
<member name="T:ChartDirector.ThreeDScatterChart">
<summary>
The ThreeDScatterChart class represents 3D scatter charts. ThreeDScatterChart is a subclass of "ThreeDChart".
</summary>
</member>
<member name="T:ChartDirector.PieChart">
<summary>
The PieChart class represents pie charts. PieChart is a subclass of "BaseChart".
</summary>
</member>
<member name="T:ChartDirector.PolarAreaLayer">
<summary>
The PolarAreaLayer class represents polar area layers. PolarAreaLayer is a subclass of "PolarLayer".
</summary>
</member>
<member name="T:ChartDirector.WebViewPortControl">
<summary>
The WebViewPortControl is a Web Forms control derived from the ASP.NET Image control. It is the server counterpart of the browser side "JsViewPortControl", which provides a user interface for visualization of the viewport in relation to the "full range", and support interactive moving and resizing of the viewport.
</summary>
</member>
<member name="T:ChartDirector.DrawArea">
<summary>
The DrawArea class represents drawing surfaces, with methods for performing graphics primitives (such as drawing lines, shapes and texts) and the surfaces.
</summary>
</member>
<member name="T:ChartDirector.WinSelectionEventArgs">
<summary>
WinSelectionEventArgs is a subclass of System.Windows.Forms.MouseEventArgs. It provides information about the current selection rectangle on the chart during a drag to select operation.
</summary>
</member>
<member name="T:ChartDirector.Axis">
<summary>
The Axis class represents x and y axes in XY charts
</summary>
</member>
<member name="T:ChartDirector.BaseBoxLayer">
<summary>
The BaseBoxLayer class is the base class for layers that uses isolated symbols to represent multiple data sets. These include "BoxWhiskerLayer", "HLOCLayer" and "CandleStickLayer". The BaseBoxLayer class is a subclass of "Layer".
</summary>
</member>
<member name="T:ChartDirector.DBTable">
<summary>
The DBTable class represents data tables read from ADO.NET System.Data.DataTable, System.Data.IDataReader or System.Data.DataView objects. It allows the columns of a table to be retrieved as arrays, so the data can be used in ChartDirector easily.
</summary>
</member>
<member name="T:ChartDirector.ColorAxis">
<summary>
The ColorAxis class represents the color axis in contour layers and surface charts. ColorAxis is a subclass of "Axis".
</summary>
</member>
<member name="M:ChartDirector.WinChartViewer.setPlotAreaMouseMargin(System.Int32)">
<summary>
Sets all margins (left, right, top, and bottom) of the plot area mouse event region to the same value.
</summary>
<param name="m">
The left, right, top and bottom margins in pixels.
</param>
</member>
<member name="M:ChartDirector.WinChartViewer.setPlotAreaMouseMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the margins of the plot area mouse event region.
</summary>
<param name="leftMargin">
The left margin in pixels.
</param>
<param name="rightMargin">
The right margin in pixels.
</param>
<param name="topMargin">
The top margin in pixels.
</param>
<param name="bottomMargin">
The bottom margin in pixels.
</param>
</member>
<member name="M:ChartDirector.WinChartViewer.setPlotAreaMouseMargin2(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the margins of the plot area mouse event region.
</summary>
<param name="leftMargin">
The left margin in pixels.
</param>
<param name="rightMargin">
The right margin in pixels.
</param>
<param name="topMargin">
The top margin in pixels.
</param>
<param name="bottomMargin">
The bottom margin in pixels.
</param>
</member>
<member name="M:ChartDirector.WinChartViewer.removeDynamicLayer(System.String)">
<summary>
Calls "BaseChart.removeDynamicLayer" when the specified event occurs.
</summary>
<param name="eventId">
The event that causes BaseChart.removeDynamicLayer to be called.
</param>
</member>
<member name="M:ChartDirector.WinChartViewer.updateDisplay">
<summary>
Updates the display.
</summary>
</member>
<member name="M:ChartDirector.WinChartViewer.updateDisplay(System.Boolean)">
<summary>
Updates the display.
</summary>
<param name="repaintNow">
A true value means the display is updated immediately or as soon as possible. A false value means that the GUI framework is notified that the display needs to be updated. The GUI framework may delay the update for a short time, which is usually unnoticeable, but may become noticeable if the system is very busy.
</param>
</member>
<member name="M:ChartDirector.WinChartViewer.validateViewPort">
<summary>
Ensures the viewport left, top, width and height are within valid ranges and adjusts them if necessary.
</summary>
</member>
<member name="M:ChartDirector.WinChartViewer.updateViewPort(System.Boolean,System.Boolean)">
<summary>
Triggers the ViewPortChanged event.
</summary>
<param name="needUpdateChart">
A boolean value to indicate if the chart needs to be updated.
</param>
<param name="needUpdateImageMap">
A boolean value to indicate if the image map needs to be updated.
</param>
</member>
<member name="M:ChartDirector.WinChartViewer.setFullRange(System.String,System.Double,System.Double)">
<summary>
Defines the full range of a viewport data scale.
</summary>
<param name="id">
The name of the data scale.
</param>
<param name="minValue">
The minimum value of the data scale.
</param>
<param name="maxValue">
The maximum value of the data scale.
</param>
</member>
<member name="M:ChartDirector.WinChartViewer.setFullRange(System.String,System.DateTime,System.DateTime)">
<summary>
Defines the full range of a viewport data scale.
</summary>
<param name="id">
The name of the data scale.
</param>
<param name="minValue">
The minimum value of the data scale.
</param>
<param name="maxValue">
The maximum value of the data scale.
</param>
</member>
<member name="M:ChartDirector.WinChartViewer.updateFullRangeH(System.String,System.Double,System.Double,System.Int32)">
<summary>
Updates the full range of a horizontal viewport data scale.
</summary>
<param name="id">
The name of the horizontal data scale.
</param>
<param name="minValue">
The new minimum value of the data scale.
</param>
<param name="maxValue">
The new maximum value of the data scale.
</param>
<param name="updateType">
The method to update the viewport. Must be one of "ViewPortNoUpdate", "KeepVisibleRange", "ScrollWithMax" or "ScrollWithMin".
</param>
</member>
<member name="M:ChartDirector.WinChartViewer.updateFullRangeH(System.String,System.DateTime,System.DateTime,System.Int32)">
<summary>
Updates the full range of a horizontal viewport data scale.
</summary>
<param name="id">
The name of the horizontal data scale.
</param>
<param name="minValue">
The new minimum value of the data scale.
</param>
<param name="maxValue">
The new maximum value of the data scale.
</param>
<param name="updateType">
The method to update the viewport. Must be one of "ViewPortNoUpdate", "KeepVisibleRange", "ScrollWithMax" or "ScrollWithMin".
</param>
</member>
<member name="M:ChartDirector.WinChartViewer.updateFullRangeV(System.String,System.Double,System.Double,System.Int32)">
<summary>
Updates the full range of a vertical viewport data scale.
</summary>
<param name="id">
The name of the vertical data scale.
</param>
<param name="minValue">
The new minimum value of the data scale.
</param>
<param name="maxValue">
The new maximum value of the data scale.
</param>
<param name="updateType">
The method to update the viewport. Must be one of "ViewPortNoUpdate", "KeepVisibleRange", "ScrollWithMax" or "ScrollWithMin".
</param>
</member>
<member name="M:ChartDirector.WinChartViewer.updateFullRangeV(System.String,System.DateTime,System.DateTime,System.Int32)">
<summary>
Updates the full range of a vertical viewport data scale.
</summary>
<param name="id">
The name of the vertical data scale.
</param>
<param name="minValue">
The new minimum value of the data scale.
</param>
<param name="maxValue">
The new maximum value of the data scale.
</param>
<param name="updateType">
The method to update the viewport. Must be one of "ViewPortNoUpdate", "KeepVisibleRange", "ScrollWithMax" or "ScrollWithMin".
</param>
</member>
<member name="M:ChartDirector.WinChartViewer.getValueAtViewPort(System.String,System.Double)">
<summary>
Converts a viewport coordinate to a value of the specified data scale.
</summary>
<param name="id">
The name of the data scale.
</param>
<param name="vpCoor">
The viewport coordinate.
</param>
</member>
<member name="M:ChartDirector.WinChartViewer.getValueAtViewPort(System.String,System.Double,System.Boolean)">
<summary>
Converts a viewport coordinate to a value of the specified data scale.
</summary>
<param name="id">
The name of the data scale.
</param>
<param name="vpCoor">
The viewport coordinate.
</param>
<param name="isLogScale">
true if the conversion is based on a logarithmic scale. false if the conversion is based on a non-logarithmic scale.
</param>
</member>
<member name="M:ChartDirector.WinChartViewer.getViewPortAtValue(System.String,System.Double)">
<summary>
Converts a value of the specified data scale to a viewport coordinate.
</summary>
<param name="id">
The name of the data scale.
</param>
<param name="value">
The value to be converted.
</param>
</member>
<member name="M:ChartDirector.WinChartViewer.getViewPortAtValue(System.String,System.Double,System.Boolean)">
<summary>
Converts a value of the specified data scale to a viewport coordinate.
</summary>
<param name="id">
The name of the data scale.
</param>
<param name="value">
The value to be converted.
</param>
<param name="isLogScale">
true if the conversion is based on a logarithmic scale. false if the conversion is based on a non-logarithmic scale.
</param>
</member>
<member name="M:ChartDirector.WinChartViewer.syncLinearAxisWithViewPort(System.String,ChartDirector.Axis)">
<summary>
Synchronizes a linear "Axis" with the part of the data scale in viewport.
</summary>
<param name="id">
The name of the data scale.
</param>
<param name="axis">
The "Axis" object to synchronize with.
</param>
</member>
<member name="M:ChartDirector.WinChartViewer.syncLogAxisWithViewPort(System.String,ChartDirector.Axis)">
<summary>
Synchronizes a logarithmic "Axis" with the part of the data scale in viewport.
</summary>
<param name="id">
The name of the data scale.
</param>
<param name="axis">
The "Axis" object to synchronize with.
</param>
</member>
<member name="M:ChartDirector.WinChartViewer.syncDateAxisWithViewPort(System.String,ChartDirector.Axis)">
<summary>
Synchronizes a date/time "Axis" with the part of the data scale in viewport.
</summary>
<param name="id">
The name of the data scale.
</param>
<param name="axis">
The "Axis" object to synchronize with.
</param>
</member>
<member name="M:ChartDirector.WinViewPortControl.setMouseMargin(System.Int32,System.Int32)">
<summary>
Sets the margin around the viewport border for mouse drag.
</summary>
<param name="mouseMargin">
The margin around the viewport border within which dragging of the border can start. The margin is in pixel unit. The default is 4 pixels.
</param>
<param name="cornerMargin">
The margin around the viewport corner within which dragging of the corner can start. The margin is in pixel unit. The default is 8 pixels.
</param>
</member>
<member name="M:ChartDirector.WinViewPortControl.setCursor(System.Int32,System.Windows.Forms.Cursor)">
<summary>
Sets the mouse cursors to be used at various parts of the control.
</summary>
<param name="position">
The mouse cursor position to be set, which must be one of "Left", "Right", "Top" and "Bottom" for the 4 borders, and "TopLeft", "TopRight", "BottomLeft", "BottomRight" for the 4 corners, "Center" for inside the viewport and 0 for outside the viewport.
</param>
<param name="cursor">
The mouse cursor to use at the specified position.
</param>
</member>
<member name="M:ChartDirector.WinViewPortControl.updateDisplay">
<summary>
Updates the display.
</summary>
</member>
<member name="M:ChartDirector.Box.setPos(System.Int32,System.Int32)">
<summary>
Sets the coordinates of the reference point of the box, which by default is the top-left corner of the box.
</summary>
<param name="x">
The x coordinate of the reference point of the box.
</param>
<param name="y">
The y coordinate of the reference point of the box.
</param>
</member>
<member name="M:ChartDirector.Box.setSize(System.Int32,System.Int32)">
<summary>
Sets the width and height of the box.
</summary>
<param name="w">
The width of the box in pixels.
</param>
<param name="h">
The height of the box in pixels.
</param>
</member>
<member name="M:ChartDirector.Box.setBackground(System.Int32)">
<summary>
Sets the background color, border color and 3D border effect of the box.
</summary>
<param name="color">
The background color of the box.
</param>
</member>
<member name="M:ChartDirector.Box.setBackground(System.Int32,System.Int32)">
<summary>
Sets the background color, border color and 3D border effect of the box.
</summary>
<param name="color">
The background color of the box.
</param>
<param name="edgeColor">
The border color of the box.
</param>
</member>
<member name="M:ChartDirector.Box.setBackground(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the background color, border color and 3D border effect of the box.
</summary>
<param name="color">
The background color of the box.
</param>
<param name="edgeColor">
The border color of the box.
</param>
<param name="raisedEffect">
The 3D border width. For positive values, the border will appear raised. For negative values, the border will appear depressed. A zero value means the border will appear flat. This argument can also be used to specify "Chart.glassEffect", "Chart.softLighting", "Chart.cylinderEffect" or "Chart.flatBorder" effects.
</param>
</member>
<member name="M:ChartDirector.Box.setRoundedCorners">
<summary>
Sets the border style to use rounded corners.
</summary>
</member>
<member name="M:ChartDirector.Box.setRoundedCorners(System.Int32)">
<summary>
Sets the border style to use rounded corners.
</summary>
<param name="r1">
The radius of the top-left rounded corner in pixels.
</param>
</member>
<member name="M:ChartDirector.Box.setRoundedCorners(System.Int32,System.Int32)">
<summary>
Sets the border style to use rounded corners.
</summary>
<param name="r1">
The radius of the top-left rounded corner in pixels.
</param>
<param name="r2">
The radius of the top-right rounded corner in pixels. -1 means it is the same as the radius of the top-left corner.
</param>
</member>
<member name="M:ChartDirector.Box.setRoundedCorners(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the border style to use rounded corners.
</summary>
<param name="r1">
The radius of the top-left rounded corner in pixels.
</param>
<param name="r2">
The radius of the top-right rounded corner in pixels. -1 means it is the same as the radius of the top-left corner.
</param>
<param name="r3">
The radius of the bottom-right rounded corner in pixels. -1 means it is the same as the radius of the top-left corner.
</param>
</member>
<member name="M:ChartDirector.Box.setRoundedCorners(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the border style to use rounded corners.
</summary>
<param name="r1">
The radius of the top-left rounded corner in pixels.
</param>
<param name="r2">
The radius of the top-right rounded corner in pixels. -1 means it is the same as the radius of the top-left corner.
</param>
<param name="r3">
The radius of the bottom-right rounded corner in pixels. -1 means it is the same as the radius of the top-left corner.
</param>
<param name="r4">
The radius of the bottom-left rounded corner in pixels. -1 means it is the same as the radius of the top-left corner.
</param>
</member>
<member name="M:ChartDirector.Box.getLeftX">
<summary>
Gets the left x pixel coordinate of the box.
</summary>
</member>
<member name="M:ChartDirector.Box.getTopY">
<summary>
Gets the top y pixel coordinate of the box.
</summary>
</member>
<member name="M:ChartDirector.Box.getWidth">
<summary>
Gets the width of the box.
</summary>
</member>
<member name="M:ChartDirector.Box.getHeight">
<summary>
Gets the height of the box.
</summary>
</member>
<member name="M:ChartDirector.Box.getImageCoor">
<summary>
Gets the image map coordinates of the box as HTML image map attributes.
</summary>
</member>
<member name="M:ChartDirector.Box.getImageCoor(System.Int32,System.Int32)">
<summary>
Gets the image map coordinates of the box as HTML image map attributes.
</summary>
<param name="offsetX">
An offset to be added to all x coordinates in the image map. This is useful if the current image will be shifted and inserted into another image. In this case, the image map will need to be shifted by the same offset.
</param>
<param name="offsetY">
An offset to be added to all y coordinates in the image map. See offsetX above for description.
</param>
</member>
<member name="M:ChartDirector.Box.setZOrder(System.Int32)">
<summary>
Sets the z-order (drawing order) for custom box objects.
</summary>
<param name="z">
The z-order of the object.
</param>
</member>
<member name="M:ChartDirector.TextBox.setText(System.String)">
<summary>
Sets the text to be shown in the text box.
</summary>
<param name="text">
The text to be displayed in the text box.
</param>
</member>
<member name="M:ChartDirector.TextBox.setFontStyle(System.String)">
<summary>
Sets the font of the text by specifying the file that contains the font.
</summary>
<param name="font">
The font name.
</param>
</member>
<member name="M:ChartDirector.TextBox.setFontStyle(System.String,System.Int32)">
<summary>
Sets the font of the text by specifying the file that contains the font.
</summary>
<param name="font">
The font name.
</param>
<param name="fontIndex">
The font index in case the font name refers to a font collection. An index of 0 means the first font.
</param>
</member>
<member name="M:ChartDirector.TextBox.setFontSize(System.Double)">
<summary>
Sets the font height and width in points.
</summary>
<param name="fontHeight">
The font height in points.
</param>
</member>
<member name="M:ChartDirector.TextBox.setFontSize(System.Double,System.Double)">
<summary>
Sets the font height and width in points.
</summary>
<param name="fontHeight">
The font height in points.
</param>
<param name="fontWidth">
The font width in points. If the font width is zero, it is assumed to be the same as the font height.
</param>
</member>
<member name="M:ChartDirector.TextBox.setFontAngle(System.Double)">
<summary>
Sets the rotation angle and layout direction of the text.
</summary>
<param name="angle">
The text rotation angle. Rotation is measured in counter-clockwise direction in degrees.
</param>
</member>
<member name="M:ChartDirector.TextBox.setFontAngle(System.Double,System.Boolean)">
<summary>
Sets the rotation angle and layout direction of the text.
</summary>
<param name="angle">
The text rotation angle. Rotation is measured in counter-clockwise direction in degrees.
</param>
<param name="vertical">
Determine if the font is layout horizontally (from left to right) or vertically (from top to down). Vertical layout is common for Oriental languages such as Chinese, Japanese and Korean. A true value means vertical layout. A false value means horizontal layout.
</param>
</member>
<member name="M:ChartDirector.TextBox.setFontColor(System.Int32)">
<summary>
Sets the color of the text.
</summary>
<param name="color">
The font color.
</param>
</member>
<member name="M:ChartDirector.TextBox.setAlignment(System.Int32)">
<summary>
Sets the alignment of the text relative to the container box.
</summary>
<param name="a">
The alignment specification. See "Alignment Specification" for supported alignment types.
</param>
</member>
<member name="M:ChartDirector.TextBox.setWidth(System.Int32)">
<summary>
Sets the width of the text box and wraps text if necessary.
</summary>
<param name="width">
The width of the text box in pixels.
</param>
</member>
<member name="M:ChartDirector.TextBox.setHeight(System.Int32)">
<summary>
Sets the height of the text box.
</summary>
<param name="height">
The height of the text box in pixels.
</param>
</member>
<member name="M:ChartDirector.TextBox.setMaxWidth(System.Int32)">
<summary>
Sets the maximum width of the text box and wraps text if necessary.
</summary>
<param name="maxWidth">
The maximum width of the text box in pixels.
</param>
</member>
<member name="M:ChartDirector.TextBox.setTruncate(System.Int32)">
<summary>
Sets the maximum number of lines in the text box, and truncate the text if it exceeds the line count.
</summary>
<param name="maxWidth">
The maximum width of the text box in pixels.
</param>
</member>
<member name="M:ChartDirector.TextBox.setTruncate(System.Int32,System.Int32)">
<summary>
Sets the maximum number of lines in the text box, and truncate the text if it exceeds the line count.
</summary>
<param name="maxWidth">
The maximum width of the text box in pixels.
</param>
<param name="maxLines">
The maximum number of lines that the text box can have. The text will be truncated if it exceeds the maximum number of lines.
</param>
</member>
<member name="M:ChartDirector.TextBox.setMargin(System.Int32)">
<summary>
Sets all margins (left, right, top, and bottom) of the text box to the same value.
</summary>
<param name="m">
The left, right, top and bottom margins in pixels.
</param>
</member>
<member name="M:ChartDirector.TextBox.setMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the margins of the text box.
</summary>
<param name="leftMargin">
The left margin in pixels.
</param>
<param name="rightMargin">
The right margin in pixels.
</param>
<param name="topMargin">
The top margin in pixels.
</param>
<param name="bottomMargin">
The bottom margin in pixels.
</param>
</member>
<member name="M:ChartDirector.TextBox.setMargin2(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the margins of the text box.
</summary>
<param name="leftMargin">
The left margin in pixels.
</param>
<param name="rightMargin">
The right margin in pixels.
</param>
<param name="topMargin">
The top margin in pixels.
</param>
<param name="bottomMargin">
The bottom margin in pixels.
</param>
</member>
<member name="M:ChartDirector.CDMLTable.setPos(System.Int32,System.Int32)">
<summary>
Sets the position of the table.
</summary>
<param name="x">
The x-coordinate of the reference point used to position the table.
</param>
<param name="y">
The y-coordinate of the reference point used to position the table.
</param>
</member>
<member name="M:ChartDirector.CDMLTable.setPos(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the position of the table.
</summary>
<param name="x">
The x-coordinate of the reference point used to position the table.
</param>
<param name="y">
The y-coordinate of the reference point used to position the table.
</param>
<param name="alignment">
The alignment of the table with respect to the reference point. For example, a value of "TopLeft" means the reference point is the top- left corner of the table. See "Alignment Specification" for supported alignment types..
</param>
</member>
<member name="M:ChartDirector.CDMLTable.setText(System.Int32,System.Int32,System.String)">
<summary>
Puts text into a cell in the table.
</summary>
<param name="col">
The column number of the cell. The column is numbered from left to right, with the leftmost column being 0.
</param>
<param name="row">
The row number of the cell. The row is numbered from top to bottom, with the top row being 0.
</param>
<param name="text">
The text to be put into the cell.
</param>
</member>
<member name="M:ChartDirector.CDMLTable.setCell(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
<summary>
Sets the number of rows and columns that a cell spans, and puts text in the cell.
</summary>
<param name="col">
The column number of the cell. The column is numbered from left to right, with the leftmost column being 0.
</param>
<param name="row">
The row number of the cell. The row is numbered from top to bottom, with the top row being 0.
</param>
<param name="width">
The number of columns spanned by the cell. The cell will occupy the columns from (col) to (col + width - 1).
</param>
<param name="height">
The number of rows spanned by the cell. The cell will occupy the rows from (row) to (row + height - 1).
</param>
<param name="text">
The text to be put into the cell.
</param>
</member>
<member name="M:ChartDirector.CDMLTable.insertCol(System.Int32)">
<summary>
Inserts a column to the table.
</summary>
<param name="col">
The column number of the inserted column. The column is numbered from left to right, with the leftmost column being 0.
</param>
</member>
<member name="M:ChartDirector.CDMLTable.appendCol">
<summary>
Appends a column to the right of the table.
</summary>
</member>
<member name="M:ChartDirector.CDMLTable.getColCount">
<summary>
Gets the number of columns in the table.
</summary>
</member>
<member name="M:ChartDirector.CDMLTable.insertRow(System.Int32)">
<summary>
Inserts a row to the table.
</summary>
<param name="row">
The row number of the inserted row. The row is numbered from top to bottom, with the top row being 0.
</param>
</member>
<member name="M:ChartDirector.CDMLTable.appendRow">
<summary>
Appends a row to the bottom of the table.
</summary>
</member>
<member name="M:ChartDirector.CDMLTable.getRowCount">
<summary>
Gets the number of rows in the table.
</summary>
</member>
<member name="M:ChartDirector.CDMLTable.getCell(System.Int32,System.Int32)">
<summary>
Gets the "TextBox" object that represents a cell.
</summary>
<param name="col">
The column number of the cell. The column is numbered from left to right, with the leftmost column being 0.
</param>
<param name="row">
The row number of the cell. The row is numbered from top to bottom, with the top row being 0.
</param>
</member>
<member name="M:ChartDirector.CDMLTable.getColStyle(System.Int32)">
<summary>
Gets the "TextBox" object that represents the prototype of the cells in a column.
</summary>
<param name="col">
The column number of the column. The column is numbered from left to right, with the leftmost column being 0.
</param>
</member>
<member name="M:ChartDirector.CDMLTable.getRowStyle(System.Int32)">
<summary>
Gets the "TextBox" object that represents the prototype of the cells in a row.
</summary>
<param name="row">
The row number of the row. The row is numbered from top to bottom, with the top row being 0.
</param>
</member>
<member name="M:ChartDirector.CDMLTable.getStyle">
<summary>
Gets the "TextBox" object that represents the prototype of the cells in the table.
</summary>
</member>
<member name="M:ChartDirector.CDMLTable.layout">
<summary>
Lays out the table.
</summary>
</member>
<member name="M:ChartDirector.CDMLTable.getColWidth(System.Int32)">
<summary>
Gets the width of a column.
</summary>
<param name="col">
The column number of the column. The column is numbered from left to right, with the leftmost column being 0.
</param>
</member>
<member name="M:ChartDirector.CDMLTable.getRowHeight(System.Int32)">
<summary>
Gets the height of a row.
</summary>
<param name="row">
The row number of the row. The row is numbered from top to bottom, with the top row being 0.
</param>
</member>
<member name="M:ChartDirector.CDMLTable.getWidth">
<summary>
Gets the width of the table.
</summary>
</member>
<member name="M:ChartDirector.CDMLTable.getHeight">
<summary>
Gets the height of the table.
</summary>
</member>
<member name="M:ChartDirector.CDMLTable.setZOrder(System.Int32)">
<summary>
Sets the z-order (drawing order) of the table.
</summary>
<param name="z">
The z-order of the table.
</param>
</member>
<member name="M:ChartDirector.Line.setPos(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the end-points of the line.
</summary>
<param name="x1">
The x coordinate of the first end-point of the line.
</param>
<param name="y1">
The y coordinate of the first end-point of the line.
</param>
<param name="x2">
The x coordinate of the second end-point of the line.
</param>
<param name="y2">
The y coordinate of the second end-point of the line.
</param>
</member>
<member name="M:ChartDirector.Line.setColor(System.Int32)">
<summary>
Sets the color of the line.
</summary>
<param name="c">
The color of the line.
</param>
</member>
<member name="M:ChartDirector.Line.setWidth(System.Int32)">
<summary>
Sets the width of the line in pixels.
</summary>
<param name="w">
The width (thickness) of the line in pixels.
</param>
</member>
<member name="M:ChartDirector.Line.setZOrder(System.Int32)">
<summary>
Sets the z-order (drawing order) of the line.
</summary>
<param name="z">
The z-order of the line.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setSize(System.Int32,System.Int32)">
<summary>
Sets the size of the chart, exclusive of the drop shadow (if any).
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
</member>
<member name="M:ChartDirector.BaseChart.getWidth">
<summary>
Gets the width of the chart.
</summary>
</member>
<member name="M:ChartDirector.BaseChart.getHeight">
<summary>
Gets the height of the chart.
</summary>
</member>
<member name="M:ChartDirector.BaseChart.getAbsOffsetX">
<summary>
Gets the x offset of the chart relative to the outermost "MultiChart" container.
</summary>
</member>
<member name="M:ChartDirector.BaseChart.getAbsOffsetY">
<summary>
Gets the y offset of the chart relative to the outermost "MultiChart" container.
</summary>
</member>
<member name="M:ChartDirector.BaseChart.setBackground(System.Int32)">
<summary>
Sets the background color, border color and 3D border effect of the chart.
</summary>
<param name="color">
The background color of the chart.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setBackground(System.Int32,System.Int32)">
<summary>
Sets the background color, border color and 3D border effect of the chart.
</summary>
<param name="color">
The background color of the chart.
</param>
<param name="edgeColor">
The border color of the chart.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setBackground(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the background color, border color and 3D border effect of the chart.
</summary>
<param name="color">
The background color of the chart.
</param>
<param name="edgeColor">
The border color of the chart.
</param>
<param name="raisedEffect">
The 3D border width. For positive values, the border will appear raised. For negative values, the border will appear depressed. A zero value means the border will appear flat.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setRoundedFrame">
<summary>
Sets the border style of the chart to rounded corners.
</summary>
</member>
<member name="M:ChartDirector.BaseChart.setRoundedFrame(System.Int32)">
<summary>
Sets the border style of the chart to rounded corners.
</summary>
<param name="extColor">
The exterior background color.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setRoundedFrame(System.Int32,System.Int32)">
<summary>
Sets the border style of the chart to rounded corners.
</summary>
<param name="extColor">
The exterior background color.
</param>
<param name="r1">
The radius of the top-left rounded corner in pixels.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setRoundedFrame(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the border style of the chart to rounded corners.
</summary>
<param name="extColor">
The exterior background color.
</param>
<param name="r1">
The radius of the top-left rounded corner in pixels.
</param>
<param name="r2">
The radius of the top-right rounded corner in pixels. -1 means it is the same as the radius of the top-left corner.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setRoundedFrame(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the border style of the chart to rounded corners.
</summary>
<param name="extColor">
The exterior background color.
</param>
<param name="r1">
The radius of the top-left rounded corner in pixels.
</param>
<param name="r2">
The radius of the top-right rounded corner in pixels. -1 means it is the same as the radius of the top-left corner.
</param>
<param name="r3">
The radius of the bottom-right rounded corner in pixels. -1 means it is the same as the radius of the top-left corner.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setRoundedFrame(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the border style of the chart to rounded corners.
</summary>
<param name="extColor">
The exterior background color.
</param>
<param name="r1">
The radius of the top-left rounded corner in pixels.
</param>
<param name="r2">
The radius of the top-right rounded corner in pixels. -1 means it is the same as the radius of the top-left corner.
</param>
<param name="r3">
The radius of the bottom-right rounded corner in pixels. -1 means it is the same as the radius of the top-left corner.
</param>
<param name="r4">
The radius of the bottom-left rounded corner in pixels. -1 means it is the same as the radius of the top-left corner.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setThickFrame(System.Int32)">
<summary>
Sets a thick frame around the chart.
</summary>
<param name="thickness">
The frame thickness.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setThickFrame(System.Int32,System.Int32)">
<summary>
Sets a thick frame around the chart.
</summary>
<param name="thickness">
The frame thickness.
</param>
<param name="frameColor">
The frame color. The default value of -1 means the frame color is the same as the outer edge color.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setThickFrame(System.Int32,System.Int32,System.Int32)">
<summary>
Sets a thick frame around the chart.
</summary>
<param name="thickness">
The frame thickness.
</param>
<param name="frameColor">
The frame color. The default value of -1 means the frame color is the same as the outer edge color.
</param>
<param name="outerEdgeColor">
The outer edge color. The default value of -1 means the outer edge color is the same as the current edge color, which can be set in the chart constructor or in "BaseChart.setBackground".
</param>
</member>
<member name="M:ChartDirector.BaseChart.setThickFrame(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets a thick frame around the chart.
</summary>
<param name="thickness">
The frame thickness.
</param>
<param name="frameColor">
The frame color. The default value of -1 means the frame color is the same as the outer edge color.
</param>
<param name="outerEdgeColor">
The outer edge color. The default value of -1 means the outer edge color is the same as the current edge color, which can be set in the chart constructor or in "BaseChart.setBackground".
</param>
<param name="innerEdgeColor">
The inner edge color. The default value of -1 means the inner edge color is the same as the frame color.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setDropShadow">
<summary>
Adds a drop shadow to the chart.
</summary>
</member>
<member name="M:ChartDirector.BaseChart.setDropShadow(System.Int32)">
<summary>
Adds a drop shadow to the chart.
</summary>
<param name="color">
The color of the drop shadow.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setDropShadow(System.Int32,System.Int32)">
<summary>
Adds a drop shadow to the chart.
</summary>
<param name="color">
The color of the drop shadow.
</param>
<param name="offsetX">
The x offset of the drop shadow.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setDropShadow(System.Int32,System.Int32,System.Int32)">
<summary>
Adds a drop shadow to the chart.
</summary>
<param name="color">
The color of the drop shadow.
</param>
<param name="offsetX">
The x offset of the drop shadow.
</param>
<param name="offsetY">
The y offset of the drop shadow. 7fffffff means it is the same as the x offset.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setDropShadow(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a drop shadow to the chart.
</summary>
<param name="color">
The color of the drop shadow.
</param>
<param name="offsetX">
The x offset of the drop shadow.
</param>
<param name="offsetY">
The y offset of the drop shadow. 7fffffff means it is the same as the x offset.
</param>
<param name="blurRadius">
The blur radius of the drop shadow.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setBorder(System.Int32)">
<summary>
Sets the border color of the chart.
</summary>
<param name="color">
The border color of the chart.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setWallpaper(System.String)">
<summary>
Uses the image from the specified file as the wallpaper to repetitively fill the background of the chart.
</summary>
<param name="img">
The image file that is used as the background wallpaper of the chart.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setBgImage(System.String)">
<summary>
Uses the image from the specified file as the background image of the chart.
</summary>
<param name="img">
The image file that is used as the background image of the chart.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setBgImage(System.String,System.Int32)">
<summary>
Uses the image from the specified file as the background image of the chart.
</summary>
<param name="img">
The image file that is used as the background image of the chart.
</param>
<param name="align">
The alignment of the background image relative to the chart. See "Alignment Specification" for supported alignment types.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setSearchPath(System.String)">
<summary>
Sets the file system search path for loading image files.
</summary>
<param name="path">
A list of directories, separated with semi- colons
</param>
</member>
<member name="M:ChartDirector.BaseChart.setTransparentColor(System.Int32)">
<summary>
Specifies a certain color to mean transparent when creating a raster image output.
</summary>
<param name="c">
The color that is designated as the transparent color. If -1 is used, the alpha channel will be included in the final output if the output image format supports it.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setAntiAlias">
<summary>
Controls whether anti-alias is used when drawing lines, shapes and text.
</summary>
</member>
<member name="M:ChartDirector.BaseChart.setAntiAlias(System.Boolean)">
<summary>
Controls whether anti-alias is used when drawing lines, shapes and text.
</summary>
<param name="shapeAntiAlias">
A true value enables anti-alias when drawing lines and shapes. A false value disables anti-alias when drawing lines and shapes
</param>
</member>
<member name="M:ChartDirector.BaseChart.setAntiAlias(System.Boolean,System.Int32)">
<summary>
Controls whether anti-alias is used when drawing lines, shapes and text.
</summary>
<param name="shapeAntiAlias">
A true value enables anti-alias when drawing lines and shapes. A false value disables anti-alias when drawing lines and shapes
</param>
<param name="textAntiAlias">
The text anti-alias mode, which must be one of "NoAntiAlias", "AntiAlias", "AutoAntiAlias", "ClearTypeColor" or "ClearTypeMono".
</param>
</member>
<member name="M:ChartDirector.BaseChart.addTitle(System.String)">
<summary>
Adds a title at the top center of the chart.
</summary>
<param name="text">
The text for the title. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addTitle(System.String,System.String)">
<summary>
Adds a title at the top center of the chart.
</summary>
<param name="text">
The text for the title. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font used to draw the title text. The default is "bold". See "Font Specification" for details on various font attributes.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addTitle(System.String,System.String,System.Double)">
<summary>
Adds a title at the top center of the chart.
</summary>
<param name="text">
The text for the title. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font used to draw the title text. The default is "bold". See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size in points for the title text.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addTitle(System.String,System.String,System.Double,System.Int32)">
<summary>
Adds a title at the top center of the chart.
</summary>
<param name="text">
The text for the title. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font used to draw the title text. The default is "bold". See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size in points for the title text.
</param>
<param name="fontColor">
The color of the title text.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addTitle(System.String,System.String,System.Double,System.Int32,System.Int32)">
<summary>
Adds a title at the top center of the chart.
</summary>
<param name="text">
The text for the title. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font used to draw the title text. The default is "bold". See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size in points for the title text.
</param>
<param name="fontColor">
The color of the title text.
</param>
<param name="bgColor">
The background color of the title box.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addTitle(System.String,System.String,System.Double,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a title at the top center of the chart.
</summary>
<param name="text">
The text for the title. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font used to draw the title text. The default is "bold". See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size in points for the title text.
</param>
<param name="fontColor">
The color of the title text.
</param>
<param name="bgColor">
The background color of the title box.
</param>
<param name="edgeColor">
The border color of the title box.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addTitle(System.Int32,System.String)">
<summary>
Adds a title to the chart.
</summary>
<param name="alignment">
The position on the title on the chart. See "Alignment Specification" for supported alignment types.
</param>
<param name="text">
The text for the title. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addTitle(System.Int32,System.String,System.String)">
<summary>
Adds a title to the chart.
</summary>
<param name="alignment">
The position on the title on the chart. See "Alignment Specification" for supported alignment types.
</param>
<param name="text">
The text for the title. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font used to draw the title text. The default is "bold". See "Font Specification" for details on various font attributes.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addTitle(System.Int32,System.String,System.String,System.Double)">
<summary>
Adds a title to the chart.
</summary>
<param name="alignment">
The position on the title on the chart. See "Alignment Specification" for supported alignment types.
</param>
<param name="text">
The text for the title. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font used to draw the title text. The default is "bold". See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size in points for the title text.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addTitle(System.Int32,System.String,System.String,System.Double,System.Int32)">
<summary>
Adds a title to the chart.
</summary>
<param name="alignment">
The position on the title on the chart. See "Alignment Specification" for supported alignment types.
</param>
<param name="text">
The text for the title. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font used to draw the title text. The default is "bold". See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size in points for the title text.
</param>
<param name="fontColor">
The color of the title text.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addTitle(System.Int32,System.String,System.String,System.Double,System.Int32,System.Int32)">
<summary>
Adds a title to the chart.
</summary>
<param name="alignment">
The position on the title on the chart. See "Alignment Specification" for supported alignment types.
</param>
<param name="text">
The text for the title. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font used to draw the title text. The default is "bold". See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size in points for the title text.
</param>
<param name="fontColor">
The color of the title text.
</param>
<param name="bgColor">
The background color of the title box.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addTitle(System.Int32,System.String,System.String,System.Double,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a title to the chart.
</summary>
<param name="alignment">
The position on the title on the chart. See "Alignment Specification" for supported alignment types.
</param>
<param name="text">
The text for the title. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font used to draw the title text. The default is "bold". See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size in points for the title text.
</param>
<param name="fontColor">
The color of the title text.
</param>
<param name="bgColor">
The background color of the title box.
</param>
<param name="edgeColor">
The border color of the title box.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addTitle2(System.Int32,System.String)">
<summary>
Adds a title to the chart.
</summary>
<param name="alignment">
The position on the title on the chart. See "Alignment Specification" for supported alignment types.
</param>
<param name="text">
The text for the title. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addTitle2(System.Int32,System.String,System.String)">
<summary>
Adds a title to the chart.
</summary>
<param name="alignment">
The position on the title on the chart. See "Alignment Specification" for supported alignment types.
</param>
<param name="text">
The text for the title. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font used to draw the title text. The default is "bold". See "Font Specification" for details on various font attributes.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addTitle2(System.Int32,System.String,System.String,System.Double)">
<summary>
Adds a title to the chart.
</summary>
<param name="alignment">
The position on the title on the chart. See "Alignment Specification" for supported alignment types.
</param>
<param name="text">
The text for the title. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font used to draw the title text. The default is "bold". See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size in points for the title text.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addTitle2(System.Int32,System.String,System.String,System.Double,System.Int32)">
<summary>
Adds a title to the chart.
</summary>
<param name="alignment">
The position on the title on the chart. See "Alignment Specification" for supported alignment types.
</param>
<param name="text">
The text for the title. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font used to draw the title text. The default is "bold". See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size in points for the title text.
</param>
<param name="fontColor">
The color of the title text.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addTitle2(System.Int32,System.String,System.String,System.Double,System.Int32,System.Int32)">
<summary>
Adds a title to the chart.
</summary>
<param name="alignment">
The position on the title on the chart. See "Alignment Specification" for supported alignment types.
</param>
<param name="text">
The text for the title. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font used to draw the title text. The default is "bold". See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size in points for the title text.
</param>
<param name="fontColor">
The color of the title text.
</param>
<param name="bgColor">
The background color of the title box.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addTitle2(System.Int32,System.String,System.String,System.Double,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a title to the chart.
</summary>
<param name="alignment">
The position on the title on the chart. See "Alignment Specification" for supported alignment types.
</param>
<param name="text">
The text for the title. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font used to draw the title text. The default is "bold". See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size in points for the title text.
</param>
<param name="fontColor">
The color of the title text.
</param>
<param name="bgColor">
The background color of the title box.
</param>
<param name="edgeColor">
The border color of the title box.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addLegend(System.Int32,System.Int32)">
<summary>
Adds a legend box to the chart.
</summary>
<param name="x">
The x coordinate of the reference point of the legend box. By default, the reference point is the top-left corner of the box, but can be configured by using "TextBox.setAlignment".
</param>
<param name="y">
The y coordinate of the reference point of the legend box. By default, the reference point is the top-left corner of the box, but can be configured by using "TextBox.setAlignment".
</param>
</member>
<member name="M:ChartDirector.BaseChart.addLegend(System.Int32,System.Int32,System.Boolean)">
<summary>
Adds a legend box to the chart.
</summary>
<param name="x">
The x coordinate of the reference point of the legend box. By default, the reference point is the top-left corner of the box, but can be configured by using "TextBox.setAlignment".
</param>
<param name="y">
The y coordinate of the reference point of the legend box. By default, the reference point is the top-left corner of the box, but can be configured by using "TextBox.setAlignment".
</param>
<param name="vertical">
A true value means the legend keys are laid out vertically (one line per entry). A false value means the legend keys are laid out horizontal and flow like text (from left to right, top to bottom).
</param>
</member>
<member name="M:ChartDirector.BaseChart.addLegend(System.Int32,System.Int32,System.Boolean,System.String)">
<summary>
Adds a legend box to the chart.
</summary>
<param name="x">
The x coordinate of the reference point of the legend box. By default, the reference point is the top-left corner of the box, but can be configured by using "TextBox.setAlignment".
</param>
<param name="y">
The y coordinate of the reference point of the legend box. By default, the reference point is the top-left corner of the box, but can be configured by using "TextBox.setAlignment".
</param>
<param name="vertical">
A true value means the legend keys are laid out vertically (one line per entry). A false value means the legend keys are laid out horizontal and flow like text (from left to right, top to bottom).
</param>
<param name="font">
The font name of the font for drawing the legend text. The default is "normal". See "Font Specification" for details on various font attributes.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addLegend(System.Int32,System.Int32,System.Boolean,System.String,System.Double)">
<summary>
Adds a legend box to the chart.
</summary>
<param name="x">
The x coordinate of the reference point of the legend box. By default, the reference point is the top-left corner of the box, but can be configured by using "TextBox.setAlignment".
</param>
<param name="y">
The y coordinate of the reference point of the legend box. By default, the reference point is the top-left corner of the box, but can be configured by using "TextBox.setAlignment".
</param>
<param name="vertical">
A true value means the legend keys are laid out vertically (one line per entry). A false value means the legend keys are laid out horizontal and flow like text (from left to right, top to bottom).
</param>
<param name="font">
The font name of the font for drawing the legend text. The default is "normal". See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size of the legend text.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addLegend(System.Int32,System.Int32,System.Int32)">
<summary>
Adds a legend box to the chart with grid layout.
</summary>
<param name="x">
The x coordinate of the reference point of the legend box. By default, the reference point is the top-left corner of the box, but can be configured by using "TextBox.setAlignment".
</param>
<param name="y">
The y coordinate of the reference point of the legend box. By default, the reference point is the top-left corner of the box, but can be configured by using "TextBox.setAlignment".
</param>
<param name="noOfCols">
The number of columns in the legend box. The special value "AutoGrid" (= -2) means the number of columns is automatically determined. If this argument is 0, the legend box will use a flow layout (from left to right and then top to bottom, in which the entries may not be vertically aligned).
</param>
</member>
<member name="M:ChartDirector.BaseChart.addLegend(System.Int32,System.Int32,System.Int32,System.String)">
<summary>
Adds a legend box to the chart with grid layout.
</summary>
<param name="x">
The x coordinate of the reference point of the legend box. By default, the reference point is the top-left corner of the box, but can be configured by using "TextBox.setAlignment".
</param>
<param name="y">
The y coordinate of the reference point of the legend box. By default, the reference point is the top-left corner of the box, but can be configured by using "TextBox.setAlignment".
</param>
<param name="noOfCols">
The number of columns in the legend box. The special value "AutoGrid" (= -2) means the number of columns is automatically determined. If this argument is 0, the legend box will use a flow layout (from left to right and then top to bottom, in which the entries may not be vertically aligned).
</param>
<param name="font">
The font name of the font for drawing the legend text. The default is "normal". See "Font Specification" for details on various font attributes.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addLegend(System.Int32,System.Int32,System.Int32,System.String,System.Double)">
<summary>
Adds a legend box to the chart with grid layout.
</summary>
<param name="x">
The x coordinate of the reference point of the legend box. By default, the reference point is the top-left corner of the box, but can be configured by using "TextBox.setAlignment".
</param>
<param name="y">
The y coordinate of the reference point of the legend box. By default, the reference point is the top-left corner of the box, but can be configured by using "TextBox.setAlignment".
</param>
<param name="noOfCols">
The number of columns in the legend box. The special value "AutoGrid" (= -2) means the number of columns is automatically determined. If this argument is 0, the legend box will use a flow layout (from left to right and then top to bottom, in which the entries may not be vertically aligned).
</param>
<param name="font">
The font name of the font for drawing the legend text. The default is "normal". See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size of the legend text.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addLegend2(System.Int32,System.Int32,System.Int32)">
<summary>
Adds a legend box to the chart with grid layout.
</summary>
<param name="x">
The x coordinate of the reference point of the legend box. By default, the reference point is the top-left corner of the box, but can be configured by using "TextBox.setAlignment".
</param>
<param name="y">
The y coordinate of the reference point of the legend box. By default, the reference point is the top-left corner of the box, but can be configured by using "TextBox.setAlignment".
</param>
<param name="noOfCols">
The number of columns in the legend box. The special value "AutoGrid" (= -2) means the number of columns is automatically determined. If this argument is 0, the legend box will use a flow layout (from left to right and then top to bottom, in which the entries may not be vertically aligned).
</param>
</member>
<member name="M:ChartDirector.BaseChart.addLegend2(System.Int32,System.Int32,System.Int32,System.String)">
<summary>
Adds a legend box to the chart with grid layout.
</summary>
<param name="x">
The x coordinate of the reference point of the legend box. By default, the reference point is the top-left corner of the box, but can be configured by using "TextBox.setAlignment".
</param>
<param name="y">
The y coordinate of the reference point of the legend box. By default, the reference point is the top-left corner of the box, but can be configured by using "TextBox.setAlignment".
</param>
<param name="noOfCols">
The number of columns in the legend box. The special value "AutoGrid" (= -2) means the number of columns is automatically determined. If this argument is 0, the legend box will use a flow layout (from left to right and then top to bottom, in which the entries may not be vertically aligned).
</param>
<param name="font">
The font name of the font for drawing the legend text. The default is "normal". See "Font Specification" for details on various font attributes.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addLegend2(System.Int32,System.Int32,System.Int32,System.String,System.Double)">
<summary>
Adds a legend box to the chart with grid layout.
</summary>
<param name="x">
The x coordinate of the reference point of the legend box. By default, the reference point is the top-left corner of the box, but can be configured by using "TextBox.setAlignment".
</param>
<param name="y">
The y coordinate of the reference point of the legend box. By default, the reference point is the top-left corner of the box, but can be configured by using "TextBox.setAlignment".
</param>
<param name="noOfCols">
The number of columns in the legend box. The special value "AutoGrid" (= -2) means the number of columns is automatically determined. If this argument is 0, the legend box will use a flow layout (from left to right and then top to bottom, in which the entries may not be vertically aligned).
</param>
<param name="font">
The font name of the font for drawing the legend text. The default is "normal". See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size of the legend text.
</param>
</member>
<member name="M:ChartDirector.BaseChart.getLegend">
<summary>
Gets the "LegendBox" object representing the legend box in the chart.
</summary>
</member>
<member name="M:ChartDirector.BaseChart.layoutLegend">
<summary>
Lays out and gets the "LegendBox" object representing the legend box in the chart.
</summary>
</member>
<member name="M:ChartDirector.BaseChart.getDrawArea">
<summary>
Retrieves the internal "DrawArea" object that is used to draw the chart.
</summary>
</member>
<member name="M:ChartDirector.BaseChart.addText(System.Int32,System.Int32,System.String)">
<summary>
Adds a text box to the chart.
</summary>
<param name="x">
The x pixel coordinate of the left of the text box.
</param>
<param name="y">
The y pixel coordinate of the top of the text box.
</param>
<param name="text">
The text to shown in the text box. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addText(System.Int32,System.Int32,System.String,System.String)">
<summary>
Adds a text box to the chart.
</summary>
<param name="x">
The x pixel coordinate of the left of the text box.
</param>
<param name="y">
The y pixel coordinate of the top of the text box.
</param>
<param name="text">
The text to shown in the text box. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font used to draw the text. See "Font Specification" for details on various font attributes.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addText(System.Int32,System.Int32,System.String,System.String,System.Double)">
<summary>
Adds a text box to the chart.
</summary>
<param name="x">
The x pixel coordinate of the left of the text box.
</param>
<param name="y">
The y pixel coordinate of the top of the text box.
</param>
<param name="text">
The text to shown in the text box. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font used to draw the text. See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size used to draw the text.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addText(System.Int32,System.Int32,System.String,System.String,System.Double,System.Int32)">
<summary>
Adds a text box to the chart.
</summary>
<param name="x">
The x pixel coordinate of the left of the text box.
</param>
<param name="y">
The y pixel coordinate of the top of the text box.
</param>
<param name="text">
The text to shown in the text box. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font used to draw the text. See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size used to draw the text.
</param>
<param name="fontColor">
The color used to draw the text.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addText(System.Int32,System.Int32,System.String,System.String,System.Double,System.Int32,System.Int32)">
<summary>
Adds a text box to the chart.
</summary>
<param name="x">
The x pixel coordinate of the left of the text box.
</param>
<param name="y">
The y pixel coordinate of the top of the text box.
</param>
<param name="text">
The text to shown in the text box. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font used to draw the text. See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size used to draw the text.
</param>
<param name="fontColor">
The color used to draw the text.
</param>
<param name="alignment">
The alignment of the text within the text box. See "Alignment Specification" for supported alignment types.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addText(System.Int32,System.Int32,System.String,System.String,System.Double,System.Int32,System.Int32,System.Double)">
<summary>
Adds a text box to the chart.
</summary>
<param name="x">
The x pixel coordinate of the left of the text box.
</param>
<param name="y">
The y pixel coordinate of the top of the text box.
</param>
<param name="text">
The text to shown in the text box. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font used to draw the text. See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size used to draw the text.
</param>
<param name="fontColor">
The color used to draw the text.
</param>
<param name="alignment">
The alignment of the text within the text box. See "Alignment Specification" for supported alignment types.
</param>
<param name="angle">
The rotation angle of the text within the text box.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addText(System.Int32,System.Int32,System.String,System.String,System.Double,System.Int32,System.Int32,System.Double,System.Boolean)">
<summary>
Adds a text box to the chart.
</summary>
<param name="x">
The x pixel coordinate of the left of the text box.
</param>
<param name="y">
The y pixel coordinate of the top of the text box.
</param>
<param name="text">
The text to shown in the text box. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font used to draw the text. See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size used to draw the text.
</param>
<param name="fontColor">
The color used to draw the text.
</param>
<param name="alignment">
The alignment of the text within the text box. See "Alignment Specification" for supported alignment types.
</param>
<param name="angle">
The rotation angle of the text within the text box.
</param>
<param name="vertical">
Indicate whether the text should be laid out vertically (from top to bottom) or horizontally (from left to right).
</param>
</member>
<member name="M:ChartDirector.BaseChart.addTable(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a CDML table to the chart.
</summary>
<param name="x">
The x-coordinate of the reference point used to position the table.
</param>
<param name="y">
The y-coordinate of the reference point used to position the table.
</param>
<param name="alignment">
The alignment of the table with respect to the reference point. For example, a value of "TopLeft" means the reference point is the top- left corner of the table. See "Alignment Specification" for supported alignment types..
</param>
<param name="col">
The number of columns in the table.
</param>
<param name="row">
The number of rows in the table.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addLine(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a line to the chart.
</summary>
<param name="x1">
The x pixel coordinate of the first endpoint of the line.
</param>
<param name="y1">
The y pixel coordinate of the first endpoint of the line.
</param>
<param name="x2">
The x pixel coordinate of the second endpoint of the line.
</param>
<param name="y2">
The y pixel coordinate of the second endpoint of the line.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a line to the chart.
</summary>
<param name="x1">
The x pixel coordinate of the first endpoint of the line.
</param>
<param name="y1">
The y pixel coordinate of the first endpoint of the line.
</param>
<param name="x2">
The x pixel coordinate of the second endpoint of the line.
</param>
<param name="y2">
The y pixel coordinate of the second endpoint of the line.
</param>
<param name="color">
The color of the line.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a line to the chart.
</summary>
<param name="x1">
The x pixel coordinate of the first endpoint of the line.
</param>
<param name="y1">
The y pixel coordinate of the first endpoint of the line.
</param>
<param name="x2">
The x pixel coordinate of the second endpoint of the line.
</param>
<param name="y2">
The y pixel coordinate of the second endpoint of the line.
</param>
<param name="color">
The color of the line.
</param>
<param name="lineWidth">
The width of the line.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addExtraField(System.String[])">
<summary>
Adds an array of text to be used as an extra field in various places.
</summary>
<param name="texts">
An array of text to be stored inside the chart object.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addExtraField(System.Double[])">
<summary>
Adds an array of numbers/dates to be used as an extra field in various places.
</summary>
<param name="numbers">
An array of numbers/dates to be stored inside the chart object.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addExtraField2(System.Double[])">
<summary>
Adds an array of numbers/dates to be used as an extra field in various places.
</summary>
<param name="numbers">
An array of numbers/dates to be stored inside the chart object.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addExtraField(System.DateTime[])">
<summary>
Adds an array of numbers/dates to be used as an extra field in various places.
</summary>
<param name="numbers">
An array of numbers/dates to be stored inside the chart object.
</param>
</member>
<member name="M:ChartDirector.BaseChart.addExtraField2(System.DateTime[])">
<summary>
Adds an array of numbers/dates to be used as an extra field in various places.
</summary>
<param name="numbers">
An array of numbers/dates to be stored inside the chart object.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setColor(System.Int32,System.Int32)">
<summary>
Change the color at the specified position in the palette.
</summary>
<param name="paletteEntry">
An index to the palette.
</param>
<param name="color">
The color to change to.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setColors(System.Int32[])">
<summary>
Change the colors in the palette.
</summary>
<param name="colors">
An array of colors to change to.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setColors(System.Int32,System.Int32[])">
<summary>
Change the colors in the palette, starting from the specified position in the palette.
</summary>
<param name="paletteEntry">
An index to the palette to start changing the colors.
</param>
<param name="colors">
An array of colors to change to.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setColors2(System.Int32,System.Int32[])">
<summary>
Change the colors in the palette, starting from the specified position in the palette.
</summary>
<param name="paletteEntry">
An index to the palette to start changing the colors.
</param>
<param name="colors">
An array of colors to change to.
</param>
</member>
<member name="M:ChartDirector.BaseChart.getColor(System.Int32)">
<summary>
Gets the color at the specified position of the palette.
</summary>
<param name="paletteEntry">
An index to the palette.
</param>
</member>
<member name="M:ChartDirector.BaseChart.adjustBrightness(System.Int32,System.Double)">
<summary>
Creates a color that is a darkened or brightened version of the given color.
</summary>
<param name="c">
The given color.
</param>
<param name="brightness">
A non-negative number represent the factor to darken or brighten the color.
</param>
</member>
<member name="M:ChartDirector.BaseChart.halfColor(System.Int32)">
<summary>
Creates a color that is half the intensity of the given color.
</summary>
<param name="c">
The given color.
</param>
</member>
<member name="M:ChartDirector.BaseChart.dashLineColor(System.Int32)">
<summary>
Creates a dash line color.
</summary>
<param name="color">
The color to draw the dash line.
</param>
</member>
<member name="M:ChartDirector.BaseChart.dashLineColor(System.Int32,System.Int32)">
<summary>
Creates a dash line color.
</summary>
<param name="color">
The color to draw the dash line.
</param>
<param name="patternCode">
A 4-byte integer representing the style of the dash line.
</param>
</member>
<member name="M:ChartDirector.BaseChart.patternColor(System.Int32[],System.Int32)">
<summary>
Creates a pattern color using an array of colors as the bitmap pattern.
</summary>
<param name="colorArray">
An array of colors representing the colors of the bitmap pixels. The color of the pixel at (x, y) should correspond to index (x + y * width - 1) of the array.
</param>
<param name="height">
The height of the bitmap in pixels. (The width is automatically computed as the size of the color array divided by the height.)
</param>
</member>
<member name="M:ChartDirector.BaseChart.patternColor(System.Int32[],System.Int32,System.Int32,System.Int32)">
<summary>
Creates a pattern color using an array of colors as the bitmap pattern.
</summary>
<param name="colorArray">
An array of colors representing the colors of the bitmap pixels. The color of the pixel at (x, y) should correspond to index (x + y * width - 1) of the array.
</param>
<param name="height">
The height of the bitmap in pixels. (The width is automatically computed as the size of the color array divided by the height.)
</param>
<param name="startX">
The x coordinate of a reference point to align with the top-left corner the pattern.
</param>
<param name="startY">
The y coordinate of a reference point to align with the top-left corner the pattern.
</param>
</member>
<member name="M:ChartDirector.BaseChart.patternColor(System.String)">
<summary>
Creates a pattern color by loading the pattern from an image file.
</summary>
<param name="filename">
An image file providing the pattern.
</param>
</member>
<member name="M:ChartDirector.BaseChart.patternColor(System.String,System.Int32,System.Int32)">
<summary>
Creates a pattern color by loading the pattern from an image file.
</summary>
<param name="filename">
An image file providing the pattern.
</param>
<param name="startX">
The x coordinate of a reference point to align with the top-left corner the pattern.
</param>
<param name="startY">
The y coordinate of a reference point to align with the top-left corner the pattern.
</param>
</member>
<member name="M:ChartDirector.BaseChart.patternColor2(System.String)">
<summary>
Creates a pattern color by loading the pattern from an image file.
</summary>
<param name="filename">
An image file providing the pattern.
</param>
</member>
<member name="M:ChartDirector.BaseChart.patternColor2(System.String,System.Int32,System.Int32)">
<summary>
Creates a pattern color by loading the pattern from an image file.
</summary>
<param name="filename">
An image file providing the pattern.
</param>
<param name="startX">
The x coordinate of a reference point to align with the top-left corner the pattern.
</param>
<param name="startY">
The y coordinate of a reference point to align with the top-left corner the pattern.
</param>
</member>
<member name="M:ChartDirector.BaseChart.linearGradientColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a two-point linear gradient color.
</summary>
<param name="startX">
The x coordinate of the starting point of the reference gradient line segment.
</param>
<param name="startY">
The y coordinate of the starting point of the reference gradient line segment.
</param>
<param name="endX">
The x coordinate of the ending point of the reference gradient line segment.
</param>
<param name="endY">
The y coordinate of the ending point of the reference gradient line segment.
</param>
<param name="startColor">
The color at the starting point of the reference gradient line segment.
</param>
<param name="endColor">
The color at the ending point of the reference gradient line segment.
</param>
</member>
<member name="M:ChartDirector.BaseChart.linearGradientColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
<summary>
Creates a two-point linear gradient color.
</summary>
<param name="startX">
The x coordinate of the starting point of the reference gradient line segment.
</param>
<param name="startY">
The y coordinate of the starting point of the reference gradient line segment.
</param>
<param name="endX">
The x coordinate of the ending point of the reference gradient line segment.
</param>
<param name="endY">
The y coordinate of the ending point of the reference gradient line segment.
</param>
<param name="startColor">
The color at the starting point of the reference gradient line segment.
</param>
<param name="endColor">
The color at the ending point of the reference gradient line segment.
</param>
<param name="periodic">
Specifies whether the gradient will repeat itself periodically. If the gradient does not repeat itself, the points that lie beyond the end points of the gradient line segment will assume the colors of the end points.
</param>
</member>
<member name="M:ChartDirector.BaseChart.linearGradientColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="startX">
The x coordinate of the starting point of the reference gradient line segment.
</param>
<param name="startY">
The y coordinate of the starting point of the reference gradient line segment.
</param>
<param name="endX">
The x coordinate of the ending point of the reference gradient line segment.
</param>
<param name="endY">
The y coordinate of the ending point of the reference gradient line segment.
</param>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
</member>
<member name="M:ChartDirector.BaseChart.linearGradientColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Boolean)">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="startX">
The x coordinate of the starting point of the reference gradient line segment.
</param>
<param name="startY">
The y coordinate of the starting point of the reference gradient line segment.
</param>
<param name="endX">
The x coordinate of the ending point of the reference gradient line segment.
</param>
<param name="endY">
The y coordinate of the ending point of the reference gradient line segment.
</param>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
<param name="periodic">
Specifies whether the gradient will repeat itself periodically. If the gradient does not repeat itself, the points that lie beyond the end points of the gradient line segment will assume the colors of the end points.
</param>
</member>
<member name="M:ChartDirector.BaseChart.linearGradientColor2(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="startX">
The x coordinate of the starting point of the reference gradient line segment.
</param>
<param name="startY">
The y coordinate of the starting point of the reference gradient line segment.
</param>
<param name="endX">
The x coordinate of the ending point of the reference gradient line segment.
</param>
<param name="endY">
The y coordinate of the ending point of the reference gradient line segment.
</param>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
</member>
<member name="M:ChartDirector.BaseChart.linearGradientColor2(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Boolean)">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="startX">
The x coordinate of the starting point of the reference gradient line segment.
</param>
<param name="startY">
The y coordinate of the starting point of the reference gradient line segment.
</param>
<param name="endX">
The x coordinate of the ending point of the reference gradient line segment.
</param>
<param name="endY">
The y coordinate of the ending point of the reference gradient line segment.
</param>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
<param name="periodic">
Specifies whether the gradient will repeat itself periodically. If the gradient does not repeat itself, the points that lie beyond the end points of the gradient line segment will assume the colors of the end points.
</param>
</member>
<member name="M:ChartDirector.BaseChart.radialGradientColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a two-point radial gradient color.
</summary>
<param name="cx">
The x coordinate of the center of the radial gradient.
</param>
<param name="cy">
The y coordinate of the center of the radial gradient.
</param>
<param name="rx">
The horizontal radius of the radial gradient defining ellipse.
</param>
<param name="ry">
The vertical radius of the radial gradient defining ellipse.
</param>
<param name="startColor">
The color at the center of the gradient defining ellipse.
</param>
<param name="endColor">
The color at the perimeter of the gradient defining ellipse.
</param>
</member>
<member name="M:ChartDirector.BaseChart.radialGradientColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
<summary>
Creates a two-point radial gradient color.
</summary>
<param name="cx">
The x coordinate of the center of the radial gradient.
</param>
<param name="cy">
The y coordinate of the center of the radial gradient.
</param>
<param name="rx">
The horizontal radius of the radial gradient defining ellipse.
</param>
<param name="ry">
The vertical radius of the radial gradient defining ellipse.
</param>
<param name="startColor">
The color at the center of the gradient defining ellipse.
</param>
<param name="endColor">
The color at the perimeter of the gradient defining ellipse.
</param>
<param name="periodic">
Specifies whether the gradient will repeat itself periodically. If the gradient does not repeat itself, the points that lie outside the gradient defining ellipse will assume the color at the perimeter of the gradient defining ellipse.
</param>
</member>
<member name="M:ChartDirector.BaseChart.radialGradientColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
<summary>
Creates a multi-point radial gradient color.
</summary>
<param name="cx">
The x coordinate of the center of the radial gradient.
</param>
<param name="cy">
The y coordinate of the center of the radial gradient.
</param>
<param name="rx">
The horizontal radius of the radial gradient defining ellipse.
</param>
<param name="ry">
The vertical radius of the radial gradient defining ellipse.
</param>
<param name="colorArray">
An array defining the radial distances and colors.
</param>
</member>
<member name="M:ChartDirector.BaseChart.radialGradientColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Boolean)">
<summary>
Creates a multi-point radial gradient color.
</summary>
<param name="cx">
The x coordinate of the center of the radial gradient.
</param>
<param name="cy">
The y coordinate of the center of the radial gradient.
</param>
<param name="rx">
The horizontal radius of the radial gradient defining ellipse.
</param>
<param name="ry">
The vertical radius of the radial gradient defining ellipse.
</param>
<param name="colorArray">
An array defining the radial distances and colors.
</param>
<param name="periodic">
Specifies whether the gradient will repeat itself periodically. If the gradient does not repeat itself, the points that lie outside the gradient defining ellipse will assume the color at the perimeter of the gradient defining ellipse.
</param>
</member>
<member name="M:ChartDirector.BaseChart.radialGradientColor2(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
<summary>
Creates a multi-point radial gradient color.
</summary>
<param name="cx">
The x coordinate of the center of the radial gradient.
</param>
<param name="cy">
The y coordinate of the center of the radial gradient.
</param>
<param name="rx">
The horizontal radius of the radial gradient defining ellipse.
</param>
<param name="ry">
The vertical radius of the radial gradient defining ellipse.
</param>
<param name="colorArray">
An array defining the radial distances and colors.
</param>
</member>
<member name="M:ChartDirector.BaseChart.radialGradientColor2(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Boolean)">
<summary>
Creates a multi-point radial gradient color.
</summary>
<param name="cx">
The x coordinate of the center of the radial gradient.
</param>
<param name="cy">
The y coordinate of the center of the radial gradient.
</param>
<param name="rx">
The horizontal radius of the radial gradient defining ellipse.
</param>
<param name="ry">
The vertical radius of the radial gradient defining ellipse.
</param>
<param name="colorArray">
An array defining the radial distances and colors.
</param>
<param name="periodic">
Specifies whether the gradient will repeat itself periodically. If the gradient does not repeat itself, the points that lie outside the gradient defining ellipse will assume the color at the perimeter of the gradient defining ellipse.
</param>
</member>
<member name="M:ChartDirector.BaseChart.gradientColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a two-point linear gradient color.
</summary>
<param name="startX">
The x coordinate of the starting point of the reference gradient line segment.
</param>
<param name="startY">
The y coordinate of the starting point of the reference gradient line segment.
</param>
<param name="endX">
The x coordinate of the ending point of the reference gradient line segment.
</param>
<param name="endY">
The y coordinate of the ending point of the reference gradient line segment.
</param>
<param name="startColor">
The color at the starting point of the reference gradient line segment.
</param>
<param name="endColor">
The color at the ending point of the reference gradient line segment.
</param>
</member>
<member name="M:ChartDirector.BaseChart.gradientColor(System.Int32[])">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
</member>
<member name="M:ChartDirector.BaseChart.gradientColor(System.Int32[],System.Double)">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
<param name="angle">
The direction of the reference gradient line segment in degrees, measured clockwise, with 0 degree as the upward pointing direction. The default direction is horizontal from left to right (90 degrees).
</param>
</member>
<member name="M:ChartDirector.BaseChart.gradientColor(System.Int32[],System.Double,System.Double)">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
<param name="angle">
The direction of the reference gradient line segment in degrees, measured clockwise, with 0 degree as the upward pointing direction. The default direction is horizontal from left to right (90 degrees).
</param>
<param name="scale">
The scaling factor for the reference gradient line segment. By default, the reference gradient line segment is 256 pixels in length. The scaling factor can be use to stretch or compress the gradient line segment.
</param>
</member>
<member name="M:ChartDirector.BaseChart.gradientColor(System.Int32[],System.Double,System.Double,System.Int32,System.Int32)">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
<param name="angle">
The direction of the reference gradient line segment in degrees, measured clockwise, with 0 degree as the upward pointing direction. The default direction is horizontal from left to right (90 degrees).
</param>
<param name="scale">
The scaling factor for the reference gradient line segment. By default, the reference gradient line segment is 256 pixels in length. The scaling factor can be use to stretch or compress the gradient line segment.
</param>
<param name="startX">
The x coordinate of the starting point of the reference gradient line segment.
</param>
<param name="startY">
The y coordinate of the starting point of the reference gradient line segment.
</param>
</member>
<member name="M:ChartDirector.BaseChart.gradientColor2(System.Int32[])">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
</member>
<member name="M:ChartDirector.BaseChart.gradientColor2(System.Int32[],System.Double)">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
<param name="angle">
The direction of the reference gradient line segment in degrees, measured clockwise, with 0 degree as the upward pointing direction. The default direction is horizontal from left to right (90 degrees).
</param>
</member>
<member name="M:ChartDirector.BaseChart.gradientColor2(System.Int32[],System.Double,System.Double)">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
<param name="angle">
The direction of the reference gradient line segment in degrees, measured clockwise, with 0 degree as the upward pointing direction. The default direction is horizontal from left to right (90 degrees).
</param>
<param name="scale">
The scaling factor for the reference gradient line segment. By default, the reference gradient line segment is 256 pixels in length. The scaling factor can be use to stretch or compress the gradient line segment.
</param>
</member>
<member name="M:ChartDirector.BaseChart.gradientColor2(System.Int32[],System.Double,System.Double,System.Int32,System.Int32)">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
<param name="angle">
The direction of the reference gradient line segment in degrees, measured clockwise, with 0 degree as the upward pointing direction. The default direction is horizontal from left to right (90 degrees).
</param>
<param name="scale">
The scaling factor for the reference gradient line segment. By default, the reference gradient line segment is 256 pixels in length. The scaling factor can be use to stretch or compress the gradient line segment.
</param>
<param name="startX">
The x coordinate of the starting point of the reference gradient line segment.
</param>
<param name="startY">
The y coordinate of the starting point of the reference gradient line segment.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setDefaultFonts(System.String)">
<summary>
Sets the defaults for normal, bold, italic and bold-italic fonts.
</summary>
<param name="normal">
The default normal font. This is the same as the first font in the font table.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setDefaultFonts(System.String,System.String)">
<summary>
Sets the defaults for normal, bold, italic and bold-italic fonts.
</summary>
<param name="normal">
The default normal font. This is the same as the first font in the font table.
</param>
<param name="bold">
The default bold font. This is the same as the second font in the font table. An empty string means the default is unchanged.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setDefaultFonts(System.String,System.String,System.String)">
<summary>
Sets the defaults for normal, bold, italic and bold-italic fonts.
</summary>
<param name="normal">
The default normal font. This is the same as the first font in the font table.
</param>
<param name="bold">
The default bold font. This is the same as the second font in the font table. An empty string means the default is unchanged.
</param>
<param name="italic">
The default italic font. This is the same as the third font in the font table. An empty string means the default is unchanged.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setDefaultFonts(System.String,System.String,System.String,System.String)">
<summary>
Sets the defaults for normal, bold, italic and bold-italic fonts.
</summary>
<param name="normal">
The default normal font. This is the same as the first font in the font table.
</param>
<param name="bold">
The default bold font. This is the same as the second font in the font table. An empty string means the default is unchanged.
</param>
<param name="italic">
The default italic font. This is the same as the third font in the font table. An empty string means the default is unchanged.
</param>
<param name="boldItalic">
The default bold-italic font. This is the same as the fourth font in the font table. An empty string means the default is unchanged.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setFontTable(System.Int32,System.String)">
<summary>
Sets an entry in the font table to the specified font name.
</summary>
<param name="index">
An index to the font table, starting from 0.
</param>
<param name="font">
The font name to be put into the font table.
</param>
</member>
<member name="M:ChartDirector.BaseChart.formatValue(System.Double,System.String)">
<summary>
Formats a number/date using the ChartDirector formatting syntax as is in "Parameter Substitution and Formatting".
</summary>
<param name="value">
The value to be formatted.
</param>
<param name="formatString">
The format string, using {value} to denote the value. For example, ${value|2,} can be used to format the value to 2 decimal points, using "," as the thousand separator, and with a '$' sign in front.
</param>
</member>
<member name="M:ChartDirector.BaseChart.formatValue(System.DateTime,System.String)">
<summary>
Formats a number/date using the ChartDirector formatting syntax as is in "Parameter Substitution and Formatting".
</summary>
<param name="value">
The value to be formatted.
</param>
<param name="formatString">
The format string, using {value} to denote the value. For example, ${value|2,} can be used to format the value to 2 decimal points, using "," as the thousand separator, and with a '$' sign in front.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setNumberFormat">
<summary>
Sets the characters used for thousand separator, decimal point, and negative sign.
</summary>
</member>
<member name="M:ChartDirector.BaseChart.setNumberFormat(System.Char)">
<summary>
Sets the characters used for thousand separator, decimal point, and negative sign.
</summary>
<param name="thousandSeparator">
The thousand separator. Use '~' to mean no thousand separator.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setNumberFormat(System.Char,System.Char)">
<summary>
Sets the characters used for thousand separator, decimal point, and negative sign.
</summary>
<param name="thousandSeparator">
The thousand separator. Use '~' to mean no thousand separator.
</param>
<param name="decimalPointChar">
The decimal point character.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setNumberFormat(System.Char,System.Char,System.Char)">
<summary>
Sets the characters used for thousand separator, decimal point, and negative sign.
</summary>
<param name="thousandSeparator">
The thousand separator. Use '~' to mean no thousand separator.
</param>
<param name="decimalPointChar">
The decimal point character.
</param>
<param name="signChar">
The negative sign character.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setMonthNames(System.String[])">
<summary>
Sets the names of the months for date/time formatting purposes.
</summary>
<param name="names">
An array of 12 text strings to be used as the month names.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setWeekDayNames(System.String[])">
<summary>
Sets the names of the week days for date/time formatting purposes.
</summary>
<param name="names">
An array of 7 text strings to be used as the week day names.
</param>
</member>
<member name="M:ChartDirector.BaseChart.setAMPM(System.String,System.String)">
<summary>
Sets the names to be used to denote morning and afternoon.
</summary>
<param name="am">
The name used to denote morning.
</param>
<param name="pm">
The name used to denote afternoon.
</param>
</member>
<member name="M:ChartDirector.BaseChart.layout">
<summary>
Perform auto-scaling of the axes (if any) and compute the positions of the various objects in the chart.
</summary>
</member>
<member name="M:ChartDirector.BaseChart.makeImage">
<summary>
Generates the chart as a System.Drawing.Image object.
</summary>
</member>
<member name="M:ChartDirector.BaseChart.makeWebImage(System.Int32)">
<summary>
Generates the chart as a WebImage object.
</summary>
<param name="format">
A constant representing the format of the image.
</param>
</member>
<member name="M:ChartDirector.BaseChart.enableVectorOutput">
<summary>
This method is deprecated. It has no effect and may be removed in future versions of ChartDirector.
</summary>
</member>
<member name="M:ChartDirector.BaseChart.setOutputOptions(System.String)">
<summary>
Sets output format options for the next chart output. Currently, only SVG, SVGZ and PDF output formats support output options.
</summary>
<param name="options">
A list of options delimited by semicolons.
</param>
</member>
<member name="M:ChartDirector.BaseChart.makeChart(System.String)">
<summary>
Generates the chart image and save it into a file.
</summary>
<param name="filename">
The name of the file to save the image.
</param>
</member>
<member name="M:ChartDirector.BaseChart.makeChart(System.Int32)">
<summary>
Generates the chart as an image in memory.
</summary>
<param name="format">
A constant representing the format of the image.
</param>
</member>
<member name="M:ChartDirector.BaseChart.makeChart2(System.Int32)">
<summary>
Generates the chart as an image in memory.
</summary>
<param name="format">
A constant representing the format of the image.
</param>
</member>
<member name="M:ChartDirector.BaseChart.makeChart">
<summary>
Generates the chart in internal format and return a "DrawArea" object to allow adding custom drawings on top of the chart.
</summary>
</member>
<member name="M:ChartDirector.BaseChart.makeChart3">
<summary>
Generates the chart in internal format and return a "DrawArea" object to allow adding custom drawings on top of the chart.
</summary>
</member>
<member name="M:ChartDirector.BaseChart.makeSession(System.Web.SessionState.HttpSessionState,System.String)">
<summary>
Generates the chart as an image, saves it to a session variable and returns query parameters for loading the image.
</summary>
<param name="sess">
The session object of an IIS Active Server Page.
</param>
<param name="name">
The name of the session variable used to store the chart image. If there are multiple chart images in the same web page, each image must use a different name.
</param>
</member>
<member name="M:ChartDirector.BaseChart.makeSession(System.Web.SessionState.HttpSessionState,System.String,System.Int32)">
<summary>
Generates the chart as an image, saves it to a session variable and returns query parameters for loading the image.
</summary>
<param name="sess">
The session object of an IIS Active Server Page.
</param>
<param name="name">
The name of the session variable used to store the chart image. If there are multiple chart images in the same web page, each image must use a different name.
</param>
<param name="imageFormat">
A constant representing the format of the image. Must be one of the predefined constants "PNG", "JPG", "GIF", "BMP", "WMP", "SVG", "SVGZ" or "PDF".
</param>
</member>
<member name="M:ChartDirector.BaseChart.makeTmpFile(System.String)">
<summary>
Generates the chart as an image and save it to a temporary file, and automatically remove old files.
</summary>
<param name="dirname">
The directory to store the temporary file and to remove old files.
</param>
</member>
<member name="M:ChartDirector.BaseChart.makeTmpFile(System.String,System.Int32)">
<summary>
Generates the chart as an image and save it to a temporary file, and automatically remove old files.
</summary>
<param name="dirname">
The directory to store the temporary file and to remove old files.
</param>
<param name="imageFormat">
A constant representing the format of the image. Must be one of the predefined constants "PNG", "JPG", "GIF", "BMP", "WMP", "SVG", "SVGZ" or "PDF".
</param>
</member>
<member name="M:ChartDirector.BaseChart.makeTmpFile(System.String,System.Int32,System.Int32)">
<summary>
Generates the chart as an image and save it to a temporary file, and automatically remove old files.
</summary>
<param name="dirname">
The directory to store the temporary file and to remove old files.
</param>
<param name="imageFormat">
A constant representing the format of the image. Must be one of the predefined constants "PNG", "JPG", "GIF", "BMP", "WMP", "SVG", "SVGZ" or "PDF".
</param>
<param name="lifeTime">
The life time of files in seconds. Older files will be deleted. A negative value disables automatic temporary file removal.
</param>
</member>
<member name="M:ChartDirector.BaseChart.initDynamicLayer">
<summary>
Initializes a dynamic layer for drawing text and shapes.
</summary>
</member>
<member name="M:ChartDirector.BaseChart.removeDynamicLayer">
<summary>
Removes the dynamic layer if any.
</summary>
</member>
<member name="M:ChartDirector.BaseChart.getHTMLImageMap(System.String)">
<summary>
Generates an HTML image map for the chart.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
</member>
<member name="M:ChartDirector.BaseChart.getHTMLImageMap(System.String,System.String)">
<summary>
Generates an HTML image map for the chart.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.BaseChart.getHTMLImageMap(System.String,System.String,System.String)">
<summary>
Generates an HTML image map for the chart.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
<param name="extraAttr">
A text string to specify additional attributes to add to the &lt;area&gt; tag. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.BaseChart.getHTMLImageMap(System.String,System.String,System.String,System.Int32,System.Int32)">
<summary>
Generates an HTML image map for the chart.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
<param name="extraAttr">
A text string to specify additional attributes to add to the &lt;area&gt; tag. "Parameter Substitution and Formatting" is supported.
</param>
<param name="offsetX">
An offset to be added to all x coordinates in the image map. This is useful if the current image will be shifted and inserted into another image. In this case, the image map will need to be shifted by the same offset.
</param>
<param name="offsetY">
An offset to be added to all y coordinates in the image map. See offsetX above for description.
</param>
</member>
<member name="M:ChartDirector.BaseChart.getJsChartModel">
<summary>
Gets the "Javascript Chart Model" for passing to "WebChartViewer.ChartModel" for the purpose of supporting track cursors in a web application.
</summary>
</member>
<member name="M:ChartDirector.BaseChart.getJsChartModel(System.String)">
<summary>
Gets the "Javascript Chart Model" for passing to "WebChartViewer.ChartModel" for the purpose of supporting track cursors in a web application.
</summary>
<param name="options">
This parameter is reserved for future use. Please do not use it.
</param>
</member>
<member name="M:ChartDirector.BaseChart.getChartMetrics">
<summary>
Gets the chart metrics for passing to "WebChartViewer.ChartMetrics" to support viewports for web applications.
</summary>
</member>
<member name="M:ChartDirector.LegendBox.addKey(System.String,System.Int32)">
<summary>
Adds a custom entry to the legend box.
</summary>
<param name="text">
The text of the legend entry.
</param>
<param name="color">
The icon color of the legend entry.
</param>
</member>
<member name="M:ChartDirector.LegendBox.addKey(System.String,System.Int32,System.Int32)">
<summary>
Adds a custom entry to the legend box.
</summary>
<param name="text">
The text of the legend entry.
</param>
<param name="color">
The icon color of the legend entry.
</param>
<param name="lineWidth">
The line width for legend entry that represents lines in line charts.
</param>
</member>
<member name="M:ChartDirector.LegendBox.addKey(System.String,System.Int32,System.Int32,ChartDirector.DrawArea)">
<summary>
Adds a custom entry to the legend box.
</summary>
<param name="text">
The text of the legend entry.
</param>
<param name="color">
The icon color of the legend entry.
</param>
<param name="lineWidth">
The line width for legend entry that represents lines in line charts.
</param>
<param name="drawarea">
A DrawArea containing the data symbol represents the legend entry. This is primarily used for legend entries in line charts with data symbols, or in scatter charts.
</param>
</member>
<member name="M:ChartDirector.LegendBox.addKey(System.Int32,System.String,System.Int32)">
<summary>
Adds a custom entry to the legend box with a given legend entry priority.
</summary>
<param name="pos">
The legend entry priority
</param>
<param name="text">
The text of the legend entry.
</param>
<param name="color">
The icon color of the legend entry.
</param>
</member>
<member name="M:ChartDirector.LegendBox.addKey(System.Int32,System.String,System.Int32,System.Int32)">
<summary>
Adds a custom entry to the legend box with a given legend entry priority.
</summary>
<param name="pos">
The legend entry priority
</param>
<param name="text">
The text of the legend entry.
</param>
<param name="color">
The icon color of the legend entry.
</param>
<param name="lineWidth">
The line width for legend entry that represents lines in line charts.
</param>
</member>
<member name="M:ChartDirector.LegendBox.addKey(System.Int32,System.String,System.Int32,System.Int32,ChartDirector.DrawArea)">
<summary>
Adds a custom entry to the legend box with a given legend entry priority.
</summary>
<param name="pos">
The legend entry priority
</param>
<param name="text">
The text of the legend entry.
</param>
<param name="color">
The icon color of the legend entry.
</param>
<param name="lineWidth">
The line width for legend entry that represents lines in line charts.
</param>
<param name="drawarea">
A DrawArea containing the data symbol represents the legend entry. This is primarily used for legend entries in line charts with data symbols, or in scatter charts.
</param>
</member>
<member name="M:ChartDirector.LegendBox.addKey2(System.Int32,System.String,System.Int32)">
<summary>
Adds a custom entry to the legend box with a given legend entry priority.
</summary>
<param name="pos">
The legend entry priority
</param>
<param name="text">
The text of the legend entry.
</param>
<param name="color">
The icon color of the legend entry.
</param>
</member>
<member name="M:ChartDirector.LegendBox.addKey2(System.Int32,System.String,System.Int32,System.Int32)">
<summary>
Adds a custom entry to the legend box with a given legend entry priority.
</summary>
<param name="pos">
The legend entry priority
</param>
<param name="text">
The text of the legend entry.
</param>
<param name="color">
The icon color of the legend entry.
</param>
<param name="lineWidth">
The line width for legend entry that represents lines in line charts.
</param>
</member>
<member name="M:ChartDirector.LegendBox.addKey2(System.Int32,System.String,System.Int32,System.Int32,ChartDirector.DrawArea)">
<summary>
Adds a custom entry to the legend box with a given legend entry priority.
</summary>
<param name="pos">
The legend entry priority
</param>
<param name="text">
The text of the legend entry.
</param>
<param name="color">
The icon color of the legend entry.
</param>
<param name="lineWidth">
The line width for legend entry that represents lines in line charts.
</param>
<param name="drawarea">
A DrawArea containing the data symbol represents the legend entry. This is primarily used for legend entries in line charts with data symbols, or in scatter charts.
</param>
</member>
<member name="M:ChartDirector.LegendBox.setCols(System.Int32)">
<summary>
Sets the number of columns in the legend box.
</summary>
<param name="noOfCols">
The number of columns in the legend box. The special value "AutoGrid" (= -2) means the number of columns is automatically determined. If this argument is 0, the legend box will use a flow layout (from left to right and then top to bottom, in which the entries may not be vertically aligned).
</param>
</member>
<member name="M:ChartDirector.LegendBox.setReverse">
<summary>
Reverses the ordering of the legend entries.
</summary>
</member>
<member name="M:ChartDirector.LegendBox.setReverse(System.Boolean)">
<summary>
Reverses the ordering of the legend entries.
</summary>
<param name="b">
A true value means the legend entries are ordered based on descending legend entry priority number. false value means the legend entries are ordered based on ascending legend entry priority number.
</param>
</member>
<member name="M:ChartDirector.LegendBox.setText(System.String)">
<summary>
Sets the template of the legend text.
</summary>
<param name="text">
The legend text template.
</param>
</member>
<member name="M:ChartDirector.LegendBox.setKeySize(System.Int32)">
<summary>
Sets the size of the legend icon and its distance from the legend text.
</summary>
<param name="width">
The width of the legend icon in pixels.
</param>
</member>
<member name="M:ChartDirector.LegendBox.setKeySize(System.Int32,System.Int32)">
<summary>
Sets the size of the legend icon and its distance from the legend text.
</summary>
<param name="width">
The width of the legend icon in pixels.
</param>
<param name="height">
The height of the legend icon in pixels. -1 means the height is automatically determined.
</param>
</member>
<member name="M:ChartDirector.LegendBox.setKeySize(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the size of the legend icon and its distance from the legend text.
</summary>
<param name="width">
The width of the legend icon in pixels.
</param>
<param name="height">
The height of the legend icon in pixels. -1 means the height is automatically determined.
</param>
<param name="gap">
The distance between the legend icon and the legend text in pixels. -1 means the distance is automatically determined.
</param>
</member>
<member name="M:ChartDirector.LegendBox.setKeySpacing(System.Int32)">
<summary>
Sets the distance between two legend entries.
</summary>
<param name="keySpacing">
The horizontal gap between two legend entries for horizontal legend layout, expressed in pixels.
</param>
</member>
<member name="M:ChartDirector.LegendBox.setKeySpacing(System.Int32,System.Int32)">
<summary>
Sets the distance between two legend entries.
</summary>
<param name="keySpacing">
The horizontal gap between two legend entries for horizontal legend layout, expressed in pixels.
</param>
<param name="lineSpacing">
The line spacing between two lines in the legend box, expressed in pixels. -1 means the line spacing is automatically determined.
</param>
</member>
<member name="M:ChartDirector.LegendBox.setKeyBorder(System.Int32)">
<summary>
Sets the default border color of the legend icon.
</summary>
<param name="edgeColor">
The border color.
</param>
</member>
<member name="M:ChartDirector.LegendBox.setKeyBorder(System.Int32,System.Int32)">
<summary>
Sets the default border color of the legend icon.
</summary>
<param name="edgeColor">
The border color.
</param>
<param name="raisedEffect">
The 3D border width. For positive values, the border will appear raised. For negative values, the border will appear depressed. A zero value means the border will appear flat. This argument can also be used to specify "Chart.glassEffect", "Chart.softLighting", "Chart.cylinderEffect" or "Chart.flatBorder" effects.
</param>
</member>
<member name="M:ChartDirector.LegendBox.setLineStyleKey">
<summary>
Determines whether to always use "line style legend keys" or not.
</summary>
</member>
<member name="M:ChartDirector.LegendBox.setLineStyleKey(System.Boolean)">
<summary>
Determines whether to always use "line style legend keys" or not.
</summary>
<param name="b">
A true value means to always use "line style legend keys". A false value means to automatically determined if "line style legend keys" should be used.
</param>
</member>
<member name="M:ChartDirector.LegendBox.getImageCoor(System.Int32)">
<summary>
Gets the image map coordinates of an legend entry as HTML image map attributes.
</summary>
<param name="dataItem">
The legend entry number, starting from 0. The first legend entry is 0. The nth legend entry is (n-1).
</param>
</member>
<member name="M:ChartDirector.LegendBox.getImageCoor(System.Int32,System.Int32,System.Int32)">
<summary>
Gets the image map coordinates of an legend entry as HTML image map attributes.
</summary>
<param name="dataItem">
The legend entry number, starting from 0. The first legend entry is 0. The nth legend entry is (n-1).
</param>
<param name="offsetX">
An offset to be added to all x coordinates in the image map. This is useful if the current image will be shifted and inserted into another image. In this case, the image map will need to be shifted by the same offset.
</param>
<param name="offsetY">
An offset to be added to all y coordinates in the image map. See offsetX above for description.
</param>
</member>
<member name="M:ChartDirector.LegendBox.getImageCoor2(System.Int32)">
<summary>
Gets the image map coordinates of an legend entry as HTML image map attributes.
</summary>
<param name="dataItem">
The legend entry number, starting from 0. The first legend entry is 0. The nth legend entry is (n-1).
</param>
</member>
<member name="M:ChartDirector.LegendBox.getImageCoor2(System.Int32,System.Int32,System.Int32)">
<summary>
Gets the image map coordinates of an legend entry as HTML image map attributes.
</summary>
<param name="dataItem">
The legend entry number, starting from 0. The first legend entry is 0. The nth legend entry is (n-1).
</param>
<param name="offsetX">
An offset to be added to all x coordinates in the image map. This is useful if the current image will be shifted and inserted into another image. In this case, the image map will need to be shifted by the same offset.
</param>
<param name="offsetY">
An offset to be added to all y coordinates in the image map. See offsetX above for description.
</param>
</member>
<member name="M:ChartDirector.LegendBox.getHTMLImageMap(System.String)">
<summary>
Generates an HTML image map for the legend box.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
</member>
<member name="M:ChartDirector.LegendBox.getHTMLImageMap(System.String,System.String)">
<summary>
Generates an HTML image map for the legend box.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.LegendBox.getHTMLImageMap(System.String,System.String,System.String)">
<summary>
Generates an HTML image map for the legend box.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
<param name="extraAttr">
A text string to specify additional attributes to add to the &lt;area&gt; tag. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.LegendBox.getHTMLImageMap(System.String,System.String,System.String,System.Int32,System.Int32)">
<summary>
Generates an HTML image map for the legend box.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
<param name="extraAttr">
A text string to specify additional attributes to add to the &lt;area&gt; tag. "Parameter Substitution and Formatting" is supported.
</param>
<param name="offsetX">
An offset to be added to all x coordinates in the image map. This is useful if the current image will be shifted and inserted into another image. In this case, the image map will need to be shifted by the same offset.
</param>
<param name="offsetY">
An offset to be added to all y coordinates in the image map. See offsetX above for description.
</param>
</member>
<member name="M:ChartDirector.MultiChart.#ctor(System.Int32,System.Int32)">
<summary>
Creates a new "MultiChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
</member>
<member name="M:ChartDirector.MultiChart.#ctor(System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "MultiChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
</member>
<member name="M:ChartDirector.MultiChart.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "MultiChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
<param name="edgeColor">
The edge color of the chart.
</param>
</member>
<member name="M:ChartDirector.MultiChart.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "MultiChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
<param name="edgeColor">
The edge color of the chart.
</param>
<param name="raisedEffect">
The 3D border width. For positive values, the border will appear raised. For negative values, the border will appear depressed. A zero value means the border will appear flat.
</param>
</member>
<member name="M:ChartDirector.MultiChart.addChart(System.Int32,System.Int32,ChartDirector.BaseChart)">
<summary>
Adds a "BaseChart" object (or its subclass such as "PieChart", "XYChart", "PolarChart", "AngularMeter" or "LinearMeter") into the multi-chart.
</summary>
<param name="x">
The x coordinate of a point in the multi-chart that is to align with the top-left corner of the added BaseChart.
</param>
<param name="y">
The y coordinate of a point in the multi-chart that is to align with the top-left corner of the added BaseChart.
</param>
<param name="c">
The BaseChart object to be added to the multi-chart.
</param>
</member>
<member name="M:ChartDirector.MultiChart.getChart">
<summary>
Gets the specified chart in the MultiChart.
</summary>
</member>
<member name="M:ChartDirector.MultiChart.getChart(System.Int32)">
<summary>
Gets the specified chart in the MultiChart.
</summary>
<param name="i">
The index of the chart. The index of the first chart set added to the MultiChart is 0. The index of the Nth data set added to the MultiChart is N - 1.
</param>
</member>
<member name="M:ChartDirector.MultiChart.getChartCount">
<summary>
Gets the number of charts in the MultiChart.
</summary>
</member>
<member name="M:ChartDirector.MultiChart.setMainChart(ChartDirector.BaseChart)">
<summary>
Sets the chart that receives viewport mouse actions (for zooming and scrolling support).
</summary>
<param name="c">
The chart that is to receive viewport mouse actions.
</param>
</member>
<member name="M:ChartDirector.PieChart.#ctor(System.Int32,System.Int32)">
<summary>
Creates a new "PieChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
</member>
<member name="M:ChartDirector.PieChart.#ctor(System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "PieChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
</member>
<member name="M:ChartDirector.PieChart.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "PieChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
<param name="edgeColor">
The edge color of the chart.
</param>
</member>
<member name="M:ChartDirector.PieChart.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "PieChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
<param name="edgeColor">
The edge color of the chart.
</param>
<param name="raisedEffect">
The 3D border width. For positive values, the border will appear raised. For negative values, the border will appear depressed. A zero value means the border will appear flat.
</param>
</member>
<member name="M:ChartDirector.PieChart.setPieSize(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the position and size of the pie in the pie chart.
</summary>
<param name="x">
The x coordinate of the pie center.
</param>
<param name="y">
The y coordinate of the pie center.
</param>
<param name="r">
The radius of the pie.
</param>
</member>
<member name="M:ChartDirector.PieChart.setDonutSize(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the position and size of the donut in the donut chart.
</summary>
<param name="x">
The x coordinate of the donut center.
</param>
<param name="y">
The y coordinate of the donut center.
</param>
<param name="r">
The inner radius of the donut.
</param>
<param name="r2">
The outer radius of the donut.
</param>
</member>
<member name="M:ChartDirector.PieChart.set3D">
<summary>
Adds 3D effects to the pie.
</summary>
</member>
<member name="M:ChartDirector.PieChart.set3D(System.Int32)">
<summary>
Adds 3D effects to the pie.
</summary>
<param name="depth">
The 3D depth of the pie in pixels. -1 means the depth is automatically determined.
</param>
</member>
<member name="M:ChartDirector.PieChart.set3D(System.Int32,System.Double)">
<summary>
Adds 3D effects to the pie.
</summary>
<param name="depth">
The 3D depth of the pie in pixels. -1 means the depth is automatically determined.
</param>
<param name="angle">
The 3D view angle in degrees. Must be 0 - 90 for standard 3D mode, and 0 - 360 in shadow 3D mode. -1 means the angle is automatically determined.
</param>
</member>
<member name="M:ChartDirector.PieChart.set3D(System.Int32,System.Double,System.Boolean)">
<summary>
Adds 3D effects to the pie.
</summary>
<param name="depth">
The 3D depth of the pie in pixels. -1 means the depth is automatically determined.
</param>
<param name="angle">
The 3D view angle in degrees. Must be 0 - 90 for standard 3D mode, and 0 - 360 in shadow 3D mode. -1 means the angle is automatically determined.
</param>
<param name="shadowMode">
Flag to indicate whether the pie is in standard 3D or shadow 3D mode. A true value means shadow 3D mode. A false value means standard 3D mode.
</param>
</member>
<member name="M:ChartDirector.PieChart.set3D(System.Double[])">
<summary>
Adds 3D effects to the pie, where each sector can have a different 3D depth.
</summary>
<param name="depths">
An array of integers representing the 3D depths for the sectors.
</param>
</member>
<member name="M:ChartDirector.PieChart.set3D(System.Double[],System.Double)">
<summary>
Adds 3D effects to the pie, where each sector can have a different 3D depth.
</summary>
<param name="depths">
An array of integers representing the 3D depths for the sectors.
</param>
<param name="angle">
The 3D view angle in degrees. Must be 0 - 90 for standard 3D mode, and 0 - 360 in shadow 3D mode. -1 means the angle is automatically determined.
</param>
</member>
<member name="M:ChartDirector.PieChart.set3D(System.Double[],System.Double,System.Boolean)">
<summary>
Adds 3D effects to the pie, where each sector can have a different 3D depth.
</summary>
<param name="depths">
An array of integers representing the 3D depths for the sectors.
</param>
<param name="angle">
The 3D view angle in degrees. Must be 0 - 90 for standard 3D mode, and 0 - 360 in shadow 3D mode. -1 means the angle is automatically determined.
</param>
<param name="shadowMode">
Flag to indicate whether the pie is in standard 3D or shadow 3D mode. A true value means shadow 3D mode. A false value means standard 3D mode.
</param>
</member>
<member name="M:ChartDirector.PieChart.set3D2(System.Double[])">
<summary>
Adds 3D effects to the pie, where each sector can have a different 3D depth.
</summary>
<param name="depths">
An array of integers representing the 3D depths for the sectors.
</param>
</member>
<member name="M:ChartDirector.PieChart.set3D2(System.Double[],System.Double)">
<summary>
Adds 3D effects to the pie, where each sector can have a different 3D depth.
</summary>
<param name="depths">
An array of integers representing the 3D depths for the sectors.
</param>
<param name="angle">
The 3D view angle in degrees. Must be 0 - 90 for standard 3D mode, and 0 - 360 in shadow 3D mode. -1 means the angle is automatically determined.
</param>
</member>
<member name="M:ChartDirector.PieChart.set3D2(System.Double[],System.Double,System.Boolean)">
<summary>
Adds 3D effects to the pie, where each sector can have a different 3D depth.
</summary>
<param name="depths">
An array of integers representing the 3D depths for the sectors.
</param>
<param name="angle">
The 3D view angle in degrees. Must be 0 - 90 for standard 3D mode, and 0 - 360 in shadow 3D mode. -1 means the angle is automatically determined.
</param>
<param name="shadowMode">
Flag to indicate whether the pie is in standard 3D or shadow 3D mode. A true value means shadow 3D mode. A false value means standard 3D mode.
</param>
</member>
<member name="M:ChartDirector.PieChart.setStartAngle(System.Double)">
<summary>
Sets the angle of the first sector in the pie and the layout direction for the sectors.
</summary>
<param name="startAngle">
The angle to start drawing the first sector in degrees. The angle is measured from the upward pointing direction in the clockwise direction.
</param>
</member>
<member name="M:ChartDirector.PieChart.setStartAngle(System.Double,System.Boolean)">
<summary>
Sets the angle of the first sector in the pie and the layout direction for the sectors.
</summary>
<param name="startAngle">
The angle to start drawing the first sector in degrees. The angle is measured from the upward pointing direction in the clockwise direction.
</param>
<param name="clockWise">
Flag to control the layout direction of the sectors. A true value means clockwise. A false value means anti-clockwise.
</param>
</member>
<member name="M:ChartDirector.PieChart.setExplode">
<summary>
Explode a sector from the pie.
</summary>
</member>
<member name="M:ChartDirector.PieChart.setExplode(System.Int32)">
<summary>
Explode a sector from the pie.
</summary>
<param name="sectorNo">
The sector number of the sector to be exploded from the pie, starting from 0. The first sector is 0. The nth sector is (n - 1). -1 means to explode all sectors.
</param>
</member>
<member name="M:ChartDirector.PieChart.setExplode(System.Int32,System.Int32)">
<summary>
Explode a sector from the pie.
</summary>
<param name="sectorNo">
The sector number of the sector to be exploded from the pie, starting from 0. The first sector is 0. The nth sector is (n - 1). -1 means to explode all sectors.
</param>
<param name="distance">
The explosion distance in pixels. -1 means the distance is automatically determined.
</param>
</member>
<member name="M:ChartDirector.PieChart.setExplodeGroup(System.Int32,System.Int32)">
<summary>
Explode a group of sectors from the pie.
</summary>
<param name="startSector">
The sector number of the first sector in the sector group to be exploded. The first sector is 0. The nth sector is (n - 1).
</param>
<param name="endSector">
The sector number of the last sector in the sector group to be exploded. The first sector is 0. The nth sector is (n - 1).
</param>
</member>
<member name="M:ChartDirector.PieChart.setExplodeGroup(System.Int32,System.Int32,System.Int32)">
<summary>
Explode a group of sectors from the pie.
</summary>
<param name="startSector">
The sector number of the first sector in the sector group to be exploded. The first sector is 0. The nth sector is (n - 1).
</param>
<param name="endSector">
The sector number of the last sector in the sector group to be exploded. The first sector is 0. The nth sector is (n - 1).
</param>
<param name="distance">
The explosion distance in pixels. -1 means the distance is automatically determined.
</param>
</member>
<member name="M:ChartDirector.PieChart.setLabelStyle">
<summary>
Sets the style used to draw all sector labels.
</summary>
</member>
<member name="M:ChartDirector.PieChart.setLabelStyle(System.String)">
<summary>
Sets the style used to draw all sector labels.
</summary>
<param name="font">
The font used to draw the sector labels.
</param>
</member>
<member name="M:ChartDirector.PieChart.setLabelStyle(System.String,System.Double)">
<summary>
Sets the style used to draw all sector labels.
</summary>
<param name="font">
The font used to draw the sector labels.
</param>
<param name="fontSize">
The font size in points.
</param>
</member>
<member name="M:ChartDirector.PieChart.setLabelStyle(System.String,System.Double,System.Int32)">
<summary>
Sets the style used to draw all sector labels.
</summary>
<param name="font">
The font used to draw the sector labels.
</param>
<param name="fontSize">
The font size in points.
</param>
<param name="fontColor">
The text color for the sector labels.
</param>
</member>
<member name="M:ChartDirector.PieChart.setLabelFormat(System.String)">
<summary>
Sets the format of the all sector labels.
</summary>
<param name="formatString">
The format string.
</param>
</member>
<member name="M:ChartDirector.PieChart.setLabelLayout(System.Int32)">
<summary>
Sets the layout method and location of the sector labels.
</summary>
<param name="layoutMethod">
Specify the layout method. Must be one of the predefined constants "CircleLayout" or "SideLayout".
</param>
</member>
<member name="M:ChartDirector.PieChart.setLabelLayout(System.Int32,System.Int32)">
<summary>
Sets the layout method and location of the sector labels.
</summary>
<param name="layoutMethod">
Specify the layout method. Must be one of the predefined constants "CircleLayout" or "SideLayout".
</param>
<param name="pos">
For circular layout, it is the distance between the sector perimeter and the sector label. A negative value (but not -1) means the sector label will be drawn in the interior of the sector.
</param>
</member>
<member name="M:ChartDirector.PieChart.setLabelLayout(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the layout method and location of the sector labels.
</summary>
<param name="layoutMethod">
Specify the layout method. Must be one of the predefined constants "CircleLayout" or "SideLayout".
</param>
<param name="pos">
For circular layout, it is the distance between the sector perimeter and the sector label. A negative value (but not -1) means the sector label will be drawn in the interior of the sector.
</param>
<param name="topBound">
This parameter applies only to side label layout. It controls the top bound of the labels (the minimum y coordinate), thereby limiting the extent that the labels can be shifted up to avoid overlapping. This parameter is typically used avoid the labels from moving up too much and overlap with other chart objects (such as the chart title).
</param>
</member>
<member name="M:ChartDirector.PieChart.setLabelLayout(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the layout method and location of the sector labels.
</summary>
<param name="layoutMethod">
Specify the layout method. Must be one of the predefined constants "CircleLayout" or "SideLayout".
</param>
<param name="pos">
For circular layout, it is the distance between the sector perimeter and the sector label. A negative value (but not -1) means the sector label will be drawn in the interior of the sector.
</param>
<param name="topBound">
This parameter applies only to side label layout. It controls the top bound of the labels (the minimum y coordinate), thereby limiting the extent that the labels can be shifted up to avoid overlapping. This parameter is typically used avoid the labels from moving up too much and overlap with other chart objects (such as the chart title).
</param>
<param name="bottomBound">
This parameter applies only to side label layout. It controls the bottom bound of the labels (the maximum y coordinate), thereby limiting the extent which the labels can be shifted down to avoid overlapping. This parameter is typically used to avoid the labels from moving down too much and overlap with other chart objects.
</param>
</member>
<member name="M:ChartDirector.PieChart.setLabelPos(System.Int32)">
<summary>
Sets the circular label layout method, and configure the join lines used to connect the sector labels to the sector perimeter.
</summary>
<param name="pos">
The distance between the sector perimeter and the sector label. A negative value means the sector label will be drawn in the interior of the sector.
</param>
</member>
<member name="M:ChartDirector.PieChart.setLabelPos(System.Int32,System.Int32)">
<summary>
Sets the circular label layout method, and configure the join lines used to connect the sector labels to the sector perimeter.
</summary>
<param name="pos">
The distance between the sector perimeter and the sector label. A negative value means the sector label will be drawn in the interior of the sector.
</param>
<param name="joinLineColor">
The color of the line that joins the sector perimeter with the sector label. The default is "Transparent". The join line is ignored if the sector label is inside the sector.
</param>
</member>
<member name="M:ChartDirector.PieChart.setJoinLine(System.Int32)">
<summary>
Sets the color and width of the join lines used to connect the sector labels to the sector perimeter.
</summary>
<param name="joinLineColor">
The color of the line that joins the sector perimeter with the sector label.
</param>
</member>
<member name="M:ChartDirector.PieChart.setJoinLine(System.Int32,System.Int32)">
<summary>
Sets the color and width of the join lines used to connect the sector labels to the sector perimeter.
</summary>
<param name="joinLineColor">
The color of the line that joins the sector perimeter with the sector label.
</param>
<param name="joinLineWidth">
The line width of the join line.
</param>
</member>
<member name="M:ChartDirector.PieChart.setLineColor(System.Int32)">
<summary>
Sets the sector edge color and join line color.
</summary>
<param name="edgeColor">
The colors for the edges of the sectors. By default, the edge color is "SameAsMainColor", which means the edge color is the same as the fill color of the sector, and the sector will appear borderless.
</param>
</member>
<member name="M:ChartDirector.PieChart.setLineColor(System.Int32,System.Int32)">
<summary>
Sets the sector edge color and join line color.
</summary>
<param name="edgeColor">
The colors for the edges of the sectors. By default, the edge color is "SameAsMainColor", which means the edge color is the same as the fill color of the sector, and the sector will appear borderless.
</param>
<param name="joinLineColor">
The color of the line that join the sector perimeter with the sector label. By default, for circular label layout, the join line color is "Transparent". For side label layout, the join line color is "SameAsMainColor".
</param>
</member>
<member name="M:ChartDirector.PieChart.setSectorStyle(System.Int32)">
<summary>
Sets the sector shading style, edge color and edge width.
</summary>
<param name="shadingMethod">
The sector shading style to use, which must be one of the constants in the table above. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PieChart.setSectorStyle(System.Int32,System.Int32)">
<summary>
Sets the sector shading style, edge color and edge width.
</summary>
<param name="shadingMethod">
The sector shading style to use, which must be one of the constants in the table above. -1 means to keep the existing value unchanged.
</param>
<param name="edgeColor">
The edge color of the sectors. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PieChart.setSectorStyle(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the sector shading style, edge color and edge width.
</summary>
<param name="shadingMethod">
The sector shading style to use, which must be one of the constants in the table above. -1 means to keep the existing value unchanged.
</param>
<param name="edgeColor">
The edge color of the sectors. -1 means to keep the existing value unchanged.
</param>
<param name="edgeWidth">
The edge width of the sectors. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PieChart.setData(System.Double[])">
<summary>
Sets the data used to draw the pie chart.
</summary>
<param name="data">
An array of numbers representing the data points.
</param>
</member>
<member name="M:ChartDirector.PieChart.setData(System.Double[],System.String[])">
<summary>
Sets the data used to draw the pie chart.
</summary>
<param name="data">
An array of numbers representing the data points.
</param>
<param name="labels">
An array of text strings representing the labels of the sectors. An empty array means no sector label.
</param>
</member>
<member name="M:ChartDirector.PieChart.getSector(System.Int32)">
<summary>
Retrieves the "Sector" object representing a single sector in the pie chart.
</summary>
<param name="sectorNo">
The sector number of the sector to retrieve, starting from 0. The first sector is 0. The nth sector is (n-1).
</param>
</member>
<member name="M:ChartDirector.Sector.setExplode">
<summary>
Explode the sector.
</summary>
</member>
<member name="M:ChartDirector.Sector.setExplode(System.Int32)">
<summary>
Explode the sector.
</summary>
<param name="distance">
The explosion distance in pixels. -1 means the distance is automatically determined.
</param>
</member>
<member name="M:ChartDirector.Sector.setLabelStyle">
<summary>
Sets the style used to draw the sector label.
</summary>
</member>
<member name="M:ChartDirector.Sector.setLabelStyle(System.String)">
<summary>
Sets the style used to draw the sector label.
</summary>
<param name="font">
The font used to draw the sector label.
</param>
</member>
<member name="M:ChartDirector.Sector.setLabelStyle(System.String,System.Double)">
<summary>
Sets the style used to draw the sector label.
</summary>
<param name="font">
The font used to draw the sector label.
</param>
<param name="fontSize">
The font size in points.
</param>
</member>
<member name="M:ChartDirector.Sector.setLabelStyle(System.String,System.Double,System.Int32)">
<summary>
Sets the style used to draw the sector label.
</summary>
<param name="font">
The font used to draw the sector label.
</param>
<param name="fontSize">
The font size in points.
</param>
<param name="fontColor">
The text color for the sector label.
</param>
</member>
<member name="M:ChartDirector.Sector.setLabelFormat(System.String)">
<summary>
Sets the format of the sector label.
</summary>
<param name="formatString">
The format string. See "PieChart.setLabelFormat" for details.
</param>
</member>
<member name="M:ChartDirector.Sector.setLabelLayout(System.Int32)">
<summary>
Sets the layout method and location of the sector label.
</summary>
<param name="layoutMethod">
Specify the layout method. Must be one of the predefined constants "CircleLayout" or "SideLayout".
</param>
</member>
<member name="M:ChartDirector.Sector.setLabelLayout(System.Int32,System.Int32)">
<summary>
Sets the layout method and location of the sector label.
</summary>
<param name="layoutMethod">
Specify the layout method. Must be one of the predefined constants "CircleLayout" or "SideLayout".
</param>
<param name="pos">
For circular layout, it is the distance between the sector perimeter and the sector label. A negative value (but not -1) means the sector label will be drawn in the interior of the sector.
</param>
</member>
<member name="M:ChartDirector.Sector.setLabelPos(System.Int32)">
<summary>
Sets the circular label layout method, and configure the join lines used to connect the sector label to the sector perimeter.
</summary>
<param name="pos">
The distance between the sector perimeter and the sector label. A negative value means the sector label will be drawn in the interior of the sector.
</param>
</member>
<member name="M:ChartDirector.Sector.setLabelPos(System.Int32,System.Int32)">
<summary>
Sets the circular label layout method, and configure the join lines used to connect the sector label to the sector perimeter.
</summary>
<param name="pos">
The distance between the sector perimeter and the sector label. A negative value means the sector label will be drawn in the interior of the sector.
</param>
<param name="joinLineColor">
The color of the line that joins the sector perimeter with the sector label. The default is "Transparent". The join line is ignored if the sector label is inside the sector.
</param>
</member>
<member name="M:ChartDirector.Sector.setJoinLine(System.Int32)">
<summary>
Sets the color and width of the join line used to connect the sector label to the sector perimeter.
</summary>
<param name="joinLineColor">
The color of the line that joins the sector perimeter with the sector label.
</param>
</member>
<member name="M:ChartDirector.Sector.setJoinLine(System.Int32,System.Int32)">
<summary>
Sets the color and width of the join line used to connect the sector label to the sector perimeter.
</summary>
<param name="joinLineColor">
The color of the line that joins the sector perimeter with the sector label.
</param>
<param name="joinLineWidth">
The line width of the join line.
</param>
</member>
<member name="M:ChartDirector.Sector.setColor(System.Int32)">
<summary>
Sets the fill color, edge color and join line color of the sector.
</summary>
<param name="color">
The color of the sector.
</param>
</member>
<member name="M:ChartDirector.Sector.setColor(System.Int32,System.Int32)">
<summary>
Sets the fill color, edge color and join line color of the sector.
</summary>
<param name="color">
The color of the sector.
</param>
<param name="edgeColor">
The edge color of the sector. -1 means the color is unchanged.
</param>
</member>
<member name="M:ChartDirector.Sector.setColor(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the fill color, edge color and join line color of the sector.
</summary>
<param name="color">
The color of the sector.
</param>
<param name="edgeColor">
The edge color of the sector. -1 means the color is unchanged.
</param>
<param name="joinLineColor">
The color of the line that join the sector perimeter with the sector label. -1 means the color is unchanged.
</param>
</member>
<member name="M:ChartDirector.Sector.setStyle(System.Int32)">
<summary>
Sets the sector shading style, edge color and edge width.
</summary>
<param name="shadingMethod">
The sector shading style to use. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.Sector.setStyle(System.Int32,System.Int32)">
<summary>
Sets the sector shading style, edge color and edge width.
</summary>
<param name="shadingMethod">
The sector shading style to use. -1 means to keep the existing value unchanged.
</param>
<param name="edgeColor">
The edge color of the sector. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.Sector.setStyle(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the sector shading style, edge color and edge width.
</summary>
<param name="shadingMethod">
The sector shading style to use. -1 means to keep the existing value unchanged.
</param>
<param name="edgeColor">
The edge color of the sector. -1 means to keep the existing value unchanged.
</param>
<param name="edgeWidth">
The edge width of the sector. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.Sector.getImageCoor">
<summary>
Gets the image map coordinates of the sector as HTML image map attributes.
</summary>
</member>
<member name="M:ChartDirector.Sector.getImageCoor(System.Int32,System.Int32)">
<summary>
Gets the image map coordinates of the sector as HTML image map attributes.
</summary>
<param name="offsetX">
An offset to be added to all x coordinates in the image map. This is useful if the current image will be shifted and inserted into another image. In this case, the image map will need to be shifted by the same offset.
</param>
<param name="offsetY">
An offset to be added to all y coordinates in the image map. See offsetX above for description.
</param>
</member>
<member name="M:ChartDirector.Sector.getLabelCoor">
<summary>
Gets the image map coordinates of the sector label as HTML image map attributes.
</summary>
</member>
<member name="M:ChartDirector.Sector.getLabelCoor(System.Int32,System.Int32)">
<summary>
Gets the image map coordinates of the sector label as HTML image map attributes.
</summary>
<param name="offsetX">
An offset to be added to all x coordinates in the image map. This is useful if the current image will be shifted and inserted into another image. In this case, the image map will need to be shifted by the same offset.
</param>
<param name="offsetY">
An offset to be added to all y coordinates in the image map. See offsetX above for description.
</param>
</member>
<member name="M:ChartDirector.XYChart.#ctor(System.Int32,System.Int32)">
<summary>
Creates a new "XYChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
</member>
<member name="M:ChartDirector.XYChart.#ctor(System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "XYChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
</member>
<member name="M:ChartDirector.XYChart.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "XYChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
<param name="edgeColor">
The edge color of the chart.
</param>
</member>
<member name="M:ChartDirector.XYChart.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "XYChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
<param name="edgeColor">
The edge color of the chart.
</param>
<param name="raisedEffect">
The 3D border width. For positive values, the border will appear raised. For negative values, the border will appear depressed. A zero value means the border will appear flat.
</param>
</member>
<member name="M:ChartDirector.XYChart.yAxis">
<summary>
Retrieves the "Axis" object representing the primary y-axis of the XYChart.
</summary>
</member>
<member name="M:ChartDirector.XYChart.yAxis2">
<summary>
Retrieves the "Axis" object representing the secondary y-axis of the XYChart.
</summary>
</member>
<member name="M:ChartDirector.XYChart.syncYAxis">
<summary>
Sets a linear formula to synchronize the secondary y-axis scale to the primary y-axis scale.
</summary>
</member>
<member name="M:ChartDirector.XYChart.syncYAxis(System.Double)">
<summary>
Sets a linear formula to synchronize the secondary y-axis scale to the primary y-axis scale.
</summary>
<param name="slope">
The slope parameter for the formula linking the secondary y-axis to the primary y-axis.
</param>
</member>
<member name="M:ChartDirector.XYChart.syncYAxis(System.Double,System.Double)">
<summary>
Sets a linear formula to synchronize the secondary y-axis scale to the primary y-axis scale.
</summary>
<param name="slope">
The slope parameter for the formula linking the secondary y-axis to the primary y-axis.
</param>
<param name="intercept">
The intercept parameter for the formula linking the secondary y-axis to the primary y-axis.
</param>
</member>
<member name="M:ChartDirector.XYChart.setYAxisOnRight">
<summary>
Interchange the position of the primary y-axis and the secondary y-axis.
</summary>
</member>
<member name="M:ChartDirector.XYChart.setYAxisOnRight(System.Boolean)">
<summary>
Interchange the position of the primary y-axis and the secondary y-axis.
</summary>
<param name="b">
A true value means to interchange the positions of the primary and secondary y-axes. A false value means using the default positions for the primary and secondary y-axes.
</param>
</member>
<member name="M:ChartDirector.XYChart.xAxis">
<summary>
Retrieves the "Axis" object representing the primary x-axis of the XYChart.
</summary>
</member>
<member name="M:ChartDirector.XYChart.xAxis2">
<summary>
Retrieves the "Axis" object representing the secondary x-axis of the XYChart.
</summary>
</member>
<member name="M:ChartDirector.XYChart.setXAxisOnTop">
<summary>
Interchange the position of the primary x-axis and the secondary x-axis.
</summary>
</member>
<member name="M:ChartDirector.XYChart.setXAxisOnTop(System.Boolean)">
<summary>
Interchange the position of the primary x-axis and the secondary x-axis.
</summary>
<param name="b">
A true value means to interchange the positions of the primary and secondary x-axes. A false value means using the default positions for the primary and secondary x-axes.
</param>
</member>
<member name="M:ChartDirector.XYChart.setAxisAtOrigin">
<summary>
Sets the chart into 4 quadrant mode. The axes may intersect at origin inside the plot area (as opposed to at the border of the plot area).
</summary>
</member>
<member name="M:ChartDirector.XYChart.setAxisAtOrigin(System.Int32)">
<summary>
Sets the chart into 4 quadrant mode. The axes may intersect at origin inside the plot area (as opposed to at the border of the plot area).
</summary>
<param name="originMode">
predefined constants to determine which axis needs to move to intersect with the zero point of the other axis.
</param>
</member>
<member name="M:ChartDirector.XYChart.setAxisAtOrigin(System.Int32,System.Int32)">
<summary>
Sets the chart into 4 quadrant mode. The axes may intersect at origin inside the plot area (as opposed to at the border of the plot area).
</summary>
<param name="originMode">
predefined constants to determine which axis needs to move to intersect with the zero point of the other axis.
</param>
<param name="symmetryMode">
Flags to determine if the axes need to be symmetrical about the origin.
</param>
</member>
<member name="M:ChartDirector.XYChart.addAxis(System.Int32,System.Int32)">
<summary>
Adds an additional axis to the chart.
</summary>
<param name="align">
Specifies which side of the plot area is the primary side of the axis. Must be one of the constants "Left", "Right", "Top" and "Bottom" for the 4 sides of the plot area.
</param>
<param name="offset">
An offset in pixels to move the axis away from the plot area. If a negative value is used, it will mean to move the axis into the plot area.
</param>
</member>
<member name="M:ChartDirector.XYChart.swapXY">
<summary>
Swap the position of the x and y axes, so the x-axes will become vertical, and the y-axes will become horizontal.
</summary>
</member>
<member name="M:ChartDirector.XYChart.swapXY(System.Boolean)">
<summary>
Swap the position of the x and y axes, so the x-axes will become vertical, and the y-axes will become horizontal.
</summary>
<param name="b">
A true value means the x and y axes will be swapped. A false value means the x and y axes not be swapped.
</param>
</member>
<member name="M:ChartDirector.XYChart.setPlotArea(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the position, size, background colors, edge color and grid colors of the plot area.
</summary>
<param name="x">
The x coordinate of the left of the plot area.
</param>
<param name="y">
The y coordinate of the top of the plot area.
</param>
<param name="width">
The width of the plot area in pixels.
</param>
<param name="height">
The height of the plot area in pixels.
</param>
</member>
<member name="M:ChartDirector.XYChart.setPlotArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the position, size, background colors, edge color and grid colors of the plot area.
</summary>
<param name="x">
The x coordinate of the left of the plot area.
</param>
<param name="y">
The y coordinate of the top of the plot area.
</param>
<param name="width">
The width of the plot area in pixels.
</param>
<param name="height">
The height of the plot area in pixels.
</param>
<param name="bgColor">
The background color of the plot area.
</param>
</member>
<member name="M:ChartDirector.XYChart.setPlotArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the position, size, background colors, edge color and grid colors of the plot area.
</summary>
<param name="x">
The x coordinate of the left of the plot area.
</param>
<param name="y">
The y coordinate of the top of the plot area.
</param>
<param name="width">
The width of the plot area in pixels.
</param>
<param name="height">
The height of the plot area in pixels.
</param>
<param name="bgColor">
The background color of the plot area.
</param>
<param name="altBgColor">
The second background color of the plot area. -1 means there is no second background color. If there is a second background color, the two background colors will be used alternatively as horizontal bands on the background grid.
</param>
</member>
<member name="M:ChartDirector.XYChart.setPlotArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the position, size, background colors, edge color and grid colors of the plot area.
</summary>
<param name="x">
The x coordinate of the left of the plot area.
</param>
<param name="y">
The y coordinate of the top of the plot area.
</param>
<param name="width">
The width of the plot area in pixels.
</param>
<param name="height">
The height of the plot area in pixels.
</param>
<param name="bgColor">
The background color of the plot area.
</param>
<param name="altBgColor">
The second background color of the plot area. -1 means there is no second background color. If there is a second background color, the two background colors will be used alternatively as horizontal bands on the background grid.
</param>
<param name="edgeColor">
The border color of the plot area. -1 means to use the default, which is "LineColor". However, if the axes are configured in 4 quadrant mode (see "XYChart.setAxisAtOrigin"), the default will change to "Transparent".
</param>
</member>
<member name="M:ChartDirector.XYChart.setPlotArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the position, size, background colors, edge color and grid colors of the plot area.
</summary>
<param name="x">
The x coordinate of the left of the plot area.
</param>
<param name="y">
The y coordinate of the top of the plot area.
</param>
<param name="width">
The width of the plot area in pixels.
</param>
<param name="height">
The height of the plot area in pixels.
</param>
<param name="bgColor">
The background color of the plot area.
</param>
<param name="altBgColor">
The second background color of the plot area. -1 means there is no second background color. If there is a second background color, the two background colors will be used alternatively as horizontal bands on the background grid.
</param>
<param name="edgeColor">
The border color of the plot area. -1 means to use the default, which is "LineColor". However, if the axes are configured in 4 quadrant mode (see "XYChart.setAxisAtOrigin"), the default will change to "Transparent".
</param>
<param name="hGridColor">
The horizontal grid color.
</param>
</member>
<member name="M:ChartDirector.XYChart.setPlotArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the position, size, background colors, edge color and grid colors of the plot area.
</summary>
<param name="x">
The x coordinate of the left of the plot area.
</param>
<param name="y">
The y coordinate of the top of the plot area.
</param>
<param name="width">
The width of the plot area in pixels.
</param>
<param name="height">
The height of the plot area in pixels.
</param>
<param name="bgColor">
The background color of the plot area.
</param>
<param name="altBgColor">
The second background color of the plot area. -1 means there is no second background color. If there is a second background color, the two background colors will be used alternatively as horizontal bands on the background grid.
</param>
<param name="edgeColor">
The border color of the plot area. -1 means to use the default, which is "LineColor". However, if the axes are configured in 4 quadrant mode (see "XYChart.setAxisAtOrigin"), the default will change to "Transparent".
</param>
<param name="hGridColor">
The horizontal grid color.
</param>
<param name="vGridColor">
The vertical grid color.
</param>
</member>
<member name="M:ChartDirector.XYChart.getPlotArea">
<summary>
Gets the "PlotArea" object representing the plot area.
</summary>
</member>
<member name="M:ChartDirector.XYChart.packPlotArea(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adjusts the plot area size and position to fit the plot area and the axis labels in a bounding box.
</summary>
<param name="leftX">
The left x coordinate of the bounding box.
</param>
<param name="topY">
The top y coordinate of the bounding box.
</param>
<param name="rightX">
The right x coordinate of the bounding box.
</param>
<param name="bottomY">
The bottom y coordinate of the bounding box.
</param>
</member>
<member name="M:ChartDirector.XYChart.packPlotArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adjusts the plot area size and position to fit the plot area and the axis labels in a bounding box.
</summary>
<param name="leftX">
The left x coordinate of the bounding box.
</param>
<param name="topY">
The top y coordinate of the bounding box.
</param>
<param name="rightX">
The right x coordinate of the bounding box.
</param>
<param name="bottomY">
The bottom y coordinate of the bounding box.
</param>
<param name="minWidth">
The minimum width the plot area can adjust to.
</param>
</member>
<member name="M:ChartDirector.XYChart.packPlotArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adjusts the plot area size and position to fit the plot area and the axis labels in a bounding box.
</summary>
<param name="leftX">
The left x coordinate of the bounding box.
</param>
<param name="topY">
The top y coordinate of the bounding box.
</param>
<param name="rightX">
The right x coordinate of the bounding box.
</param>
<param name="bottomY">
The bottom y coordinate of the bounding box.
</param>
<param name="minWidth">
The minimum width the plot area can adjust to.
</param>
<param name="minHeight">
The minimum height the plot area can adjust to.
</param>
</member>
<member name="M:ChartDirector.XYChart.setClipping">
<summary>
Enables clipping on the plot area.
</summary>
</member>
<member name="M:ChartDirector.XYChart.setClipping(System.Int32)">
<summary>
Enables clipping on the plot area.
</summary>
<param name="margin">
Additional margin, measured in pixels, to be added to the 4 sides of the plot area for the purpose of clipping. A positive value means the clipping region will be larger than the plot area. A negative value means the clipping region will be smaller than the plot area. 0 means the clipping region is equal to the plot area.
</param>
</member>
<member name="M:ChartDirector.XYChart.setTrimData(System.Int32)">
<summary>
Uses only a subset of the data series to draw charts.
</summary>
<param name="startPos">
The index for the first data position to use for plotting charts.
</param>
</member>
<member name="M:ChartDirector.XYChart.setTrimData(System.Int32,System.Int32)">
<summary>
Uses only a subset of the data series to draw charts.
</summary>
<param name="startPos">
The index for the first data position to use for plotting charts.
</param>
<param name="len">
The length of the data points used for plotting charts.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBarLayer(System.Double[])">
<summary>
Adds a bar layer to the XYChart, and specify the data set to use for drawing the bars.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBarLayer(System.Double[],System.Int32)">
<summary>
Adds a bar layer to the XYChart, and specify the data set to use for drawing the bars.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="color">
The color to draw the bars. -1 means that the color is automatically selected from the palette.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBarLayer(System.Double[],System.Int32,System.String)">
<summary>
Adds a bar layer to the XYChart, and specify the data set to use for drawing the bars.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="color">
The color to draw the bars. -1 means that the color is automatically selected from the palette.
</param>
<param name="name">
The name of the data set. The name will be used in the legend box, if one is available. An empty string means the data set has no name.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBarLayer(System.Double[],System.Int32,System.String,System.Int32)">
<summary>
Adds a bar layer to the XYChart, and specify the data set to use for drawing the bars.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="color">
The color to draw the bars. -1 means that the color is automatically selected from the palette.
</param>
<param name="name">
The name of the data set. The name will be used in the legend box, if one is available. An empty string means the data set has no name.
</param>
<param name="depth">
The 3D depth of the bar layer.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBarLayer">
<summary>
Adds an empty bar layer to the XYChart.
</summary>
</member>
<member name="M:ChartDirector.XYChart.addBarLayer(System.Int32)">
<summary>
Adds an empty bar layer to the XYChart.
</summary>
<param name="dataCombineMethod">
The method to combine the data sets together in the bar layer.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBarLayer(System.Int32,System.Int32)">
<summary>
Adds an empty bar layer to the XYChart.
</summary>
<param name="dataCombineMethod">
The method to combine the data sets together in the bar layer.
</param>
<param name="depth">
The 3D depth of the bar layer.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBarLayer2">
<summary>
Adds an empty bar layer to the XYChart.
</summary>
</member>
<member name="M:ChartDirector.XYChart.addBarLayer2(System.Int32)">
<summary>
Adds an empty bar layer to the XYChart.
</summary>
<param name="dataCombineMethod">
The method to combine the data sets together in the bar layer.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBarLayer2(System.Int32,System.Int32)">
<summary>
Adds an empty bar layer to the XYChart.
</summary>
<param name="dataCombineMethod">
The method to combine the data sets together in the bar layer.
</param>
<param name="depth">
The 3D depth of the bar layer.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBarLayer(System.Double[],System.Int32[])">
<summary>
Adds a multi-color bar layer to the XYChart, and specify the data set to use for drawing the bars.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="colors">
An array of colors to draw the bars. An empty array means the colors are automatically selected from the palette.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBarLayer(System.Double[],System.Int32[],System.String[])">
<summary>
Adds a multi-color bar layer to the XYChart, and specify the data set to use for drawing the bars.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="colors">
An array of colors to draw the bars. An empty array means the colors are automatically selected from the palette.
</param>
<param name="names">
An array of text strings as the names of the bars. The names will be used in the legend box, if one is available. An empty array means that bars have no name.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBarLayer(System.Double[],System.Int32[],System.String[],System.Int32)">
<summary>
Adds a multi-color bar layer to the XYChart, and specify the data set to use for drawing the bars.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="colors">
An array of colors to draw the bars. An empty array means the colors are automatically selected from the palette.
</param>
<param name="names">
An array of text strings as the names of the bars. The names will be used in the legend box, if one is available. An empty array means that bars have no name.
</param>
<param name="depth">
The 3D depth of the bar layer.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBarLayer3(System.Double[])">
<summary>
Adds a multi-color bar layer to the XYChart, and specify the data set to use for drawing the bars.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBarLayer3(System.Double[],System.Int32[])">
<summary>
Adds a multi-color bar layer to the XYChart, and specify the data set to use for drawing the bars.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="colors">
An array of colors to draw the bars. An empty array means the colors are automatically selected from the palette.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBarLayer3(System.Double[],System.Int32[],System.String[])">
<summary>
Adds a multi-color bar layer to the XYChart, and specify the data set to use for drawing the bars.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="colors">
An array of colors to draw the bars. An empty array means the colors are automatically selected from the palette.
</param>
<param name="names">
An array of text strings as the names of the bars. The names will be used in the legend box, if one is available. An empty array means that bars have no name.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBarLayer3(System.Double[],System.Int32[],System.String[],System.Int32)">
<summary>
Adds a multi-color bar layer to the XYChart, and specify the data set to use for drawing the bars.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="colors">
An array of colors to draw the bars. An empty array means the colors are automatically selected from the palette.
</param>
<param name="names">
An array of text strings as the names of the bars. The names will be used in the legend box, if one is available. An empty array means that bars have no name.
</param>
<param name="depth">
The 3D depth of the bar layer.
</param>
</member>
<member name="M:ChartDirector.XYChart.addLineLayer(System.Double[])">
<summary>
Adds a line layer to the XYChart, and specify the data set to use for drawing the line.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
</member>
<member name="M:ChartDirector.XYChart.addLineLayer(System.Double[],System.Int32)">
<summary>
Adds a line layer to the XYChart, and specify the data set to use for drawing the line.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="color">
The color to draw the line. -1 means that the color is automatically selected from the palette.
</param>
</member>
<member name="M:ChartDirector.XYChart.addLineLayer(System.Double[],System.Int32,System.String)">
<summary>
Adds a line layer to the XYChart, and specify the data set to use for drawing the line.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="color">
The color to draw the line. -1 means that the color is automatically selected from the palette.
</param>
<param name="name">
The name of the data set. The name will be used in the legend box, if one is available. An empty string means the data set has no name.
</param>
</member>
<member name="M:ChartDirector.XYChart.addLineLayer(System.Double[],System.Int32,System.String,System.Int32)">
<summary>
Adds a line layer to the XYChart, and specify the data set to use for drawing the line.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="color">
The color to draw the line. -1 means that the color is automatically selected from the palette.
</param>
<param name="name">
The name of the data set. The name will be used in the legend box, if one is available. An empty string means the data set has no name.
</param>
<param name="depth">
The 3D depth of the line layer.
</param>
</member>
<member name="M:ChartDirector.XYChart.addLineLayer">
<summary>
Adds an empty line layer to the XYChart.
</summary>
</member>
<member name="M:ChartDirector.XYChart.addLineLayer(System.Int32)">
<summary>
Adds an empty line layer to the XYChart.
</summary>
<param name="dataCombineMethod">
In this version of ChartDirector, this parameter is ignored.
</param>
</member>
<member name="M:ChartDirector.XYChart.addLineLayer(System.Int32,System.Int32)">
<summary>
Adds an empty line layer to the XYChart.
</summary>
<param name="dataCombineMethod">
In this version of ChartDirector, this parameter is ignored.
</param>
<param name="depth">
The 3D depth of the line layer.
</param>
</member>
<member name="M:ChartDirector.XYChart.addLineLayer2">
<summary>
Adds an empty line layer to the XYChart.
</summary>
</member>
<member name="M:ChartDirector.XYChart.addLineLayer2(System.Int32)">
<summary>
Adds an empty line layer to the XYChart.
</summary>
<param name="dataCombineMethod">
In this version of ChartDirector, this parameter is ignored.
</param>
</member>
<member name="M:ChartDirector.XYChart.addLineLayer2(System.Int32,System.Int32)">
<summary>
Adds an empty line layer to the XYChart.
</summary>
<param name="dataCombineMethod">
In this version of ChartDirector, this parameter is ignored.
</param>
<param name="depth">
The 3D depth of the line layer.
</param>
</member>
<member name="M:ChartDirector.XYChart.addSplineLayer">
<summary>
Adds a spline layer to the XYChart.
</summary>
</member>
<member name="M:ChartDirector.XYChart.addSplineLayer(System.Double[])">
<summary>
Adds a spline layer to the XYChart.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
</member>
<member name="M:ChartDirector.XYChart.addSplineLayer(System.Double[],System.Int32)">
<summary>
Adds a spline layer to the XYChart.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="color">
The color to draw the spline line. -1 means that the color is automatically selected from the palette.
</param>
</member>
<member name="M:ChartDirector.XYChart.addSplineLayer(System.Double[],System.Int32,System.String)">
<summary>
Adds a spline layer to the XYChart.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="color">
The color to draw the spline line. -1 means that the color is automatically selected from the palette.
</param>
<param name="name">
The name of the data set. The name will be used in the legend box, if one is available. An empty string means the data set has no name.
</param>
</member>
<member name="M:ChartDirector.XYChart.addStepLineLayer">
<summary>
Adds a step line chart layer to the XYChart.
</summary>
</member>
<member name="M:ChartDirector.XYChart.addStepLineLayer(System.Double[])">
<summary>
Adds a step line chart layer to the XYChart.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
</member>
<member name="M:ChartDirector.XYChart.addStepLineLayer(System.Double[],System.Int32)">
<summary>
Adds a step line chart layer to the XYChart.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="color">
The color to draw the step line. -1 means that the color is automatically selected from the palette.
</param>
</member>
<member name="M:ChartDirector.XYChart.addStepLineLayer(System.Double[],System.Int32,System.String)">
<summary>
Adds a step line chart layer to the XYChart.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="color">
The color to draw the step line. -1 means that the color is automatically selected from the palette.
</param>
<param name="name">
The name of the data set. The name will be used in the legend box, if one is available. An empty string means the data set has no name.
</param>
</member>
<member name="M:ChartDirector.XYChart.addTrendLayer(System.Double[])">
<summary>
Adds a trend chart layer to the XYChart, and specify the data set to use for drawing the trend line.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
</member>
<member name="M:ChartDirector.XYChart.addTrendLayer(System.Double[],System.Int32)">
<summary>
Adds a trend chart layer to the XYChart, and specify the data set to use for drawing the trend line.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="color">
The color to draw the line. -1 means that the color is automatically selected from the palette.
</param>
</member>
<member name="M:ChartDirector.XYChart.addTrendLayer(System.Double[],System.Int32,System.String)">
<summary>
Adds a trend chart layer to the XYChart, and specify the data set to use for drawing the trend line.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="color">
The color to draw the line. -1 means that the color is automatically selected from the palette.
</param>
<param name="name">
The name of the data set. The name will be used in the legend box, if one is available. An empty string means the data set has no name.
</param>
</member>
<member name="M:ChartDirector.XYChart.addTrendLayer(System.Double[],System.Int32,System.String,System.Int32)">
<summary>
Adds a trend chart layer to the XYChart, and specify the data set to use for drawing the trend line.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="color">
The color to draw the line. -1 means that the color is automatically selected from the palette.
</param>
<param name="name">
The name of the data set. The name will be used in the legend box, if one is available. An empty string means the data set has no name.
</param>
<param name="depth">
The 3D depth of the line layer.
</param>
</member>
<member name="M:ChartDirector.XYChart.addTrendLayer(System.Double[],System.Double[])">
<summary>
Adds a trend chart layer to the XYChart, and specify the x and y values for drawing the trend line.
</summary>
<param name="xData">
An array of numbers representing the x values of the data points.
</param>
<param name="yData">
An array of numbers representing the y values of the data points.
</param>
</member>
<member name="M:ChartDirector.XYChart.addTrendLayer(System.Double[],System.Double[],System.Int32)">
<summary>
Adds a trend chart layer to the XYChart, and specify the x and y values for drawing the trend line.
</summary>
<param name="xData">
An array of numbers representing the x values of the data points.
</param>
<param name="yData">
An array of numbers representing the y values of the data points.
</param>
<param name="color">
The color to draw the line. -1 means that the color is automatically selected from the palette.
</param>
</member>
<member name="M:ChartDirector.XYChart.addTrendLayer(System.Double[],System.Double[],System.Int32,System.String)">
<summary>
Adds a trend chart layer to the XYChart, and specify the x and y values for drawing the trend line.
</summary>
<param name="xData">
An array of numbers representing the x values of the data points.
</param>
<param name="yData">
An array of numbers representing the y values of the data points.
</param>
<param name="color">
The color to draw the line. -1 means that the color is automatically selected from the palette.
</param>
<param name="name">
The name of the data set. The name will be used in the legend box, if one is available. An empty string means the data set has no name.
</param>
</member>
<member name="M:ChartDirector.XYChart.addTrendLayer(System.Double[],System.Double[],System.Int32,System.String,System.Int32)">
<summary>
Adds a trend chart layer to the XYChart, and specify the x and y values for drawing the trend line.
</summary>
<param name="xData">
An array of numbers representing the x values of the data points.
</param>
<param name="yData">
An array of numbers representing the y values of the data points.
</param>
<param name="color">
The color to draw the line. -1 means that the color is automatically selected from the palette.
</param>
<param name="name">
The name of the data set. The name will be used in the legend box, if one is available. An empty string means the data set has no name.
</param>
<param name="depth">
The 3D depth of the line layer.
</param>
</member>
<member name="M:ChartDirector.XYChart.addTrendLayer2(System.Double[],System.Double[])">
<summary>
Adds a trend chart layer to the XYChart, and specify the x and y values for drawing the trend line.
</summary>
<param name="xData">
An array of numbers representing the x values of the data points.
</param>
<param name="yData">
An array of numbers representing the y values of the data points.
</param>
</member>
<member name="M:ChartDirector.XYChart.addTrendLayer2(System.Double[],System.Double[],System.Int32)">
<summary>
Adds a trend chart layer to the XYChart, and specify the x and y values for drawing the trend line.
</summary>
<param name="xData">
An array of numbers representing the x values of the data points.
</param>
<param name="yData">
An array of numbers representing the y values of the data points.
</param>
<param name="color">
The color to draw the line. -1 means that the color is automatically selected from the palette.
</param>
</member>
<member name="M:ChartDirector.XYChart.addTrendLayer2(System.Double[],System.Double[],System.Int32,System.String)">
<summary>
Adds a trend chart layer to the XYChart, and specify the x and y values for drawing the trend line.
</summary>
<param name="xData">
An array of numbers representing the x values of the data points.
</param>
<param name="yData">
An array of numbers representing the y values of the data points.
</param>
<param name="color">
The color to draw the line. -1 means that the color is automatically selected from the palette.
</param>
<param name="name">
The name of the data set. The name will be used in the legend box, if one is available. An empty string means the data set has no name.
</param>
</member>
<member name="M:ChartDirector.XYChart.addTrendLayer2(System.Double[],System.Double[],System.Int32,System.String,System.Int32)">
<summary>
Adds a trend chart layer to the XYChart, and specify the x and y values for drawing the trend line.
</summary>
<param name="xData">
An array of numbers representing the x values of the data points.
</param>
<param name="yData">
An array of numbers representing the y values of the data points.
</param>
<param name="color">
The color to draw the line. -1 means that the color is automatically selected from the palette.
</param>
<param name="name">
The name of the data set. The name will be used in the legend box, if one is available. An empty string means the data set has no name.
</param>
<param name="depth">
The 3D depth of the line layer.
</param>
</member>
<member name="M:ChartDirector.XYChart.addInterLineLayer(ChartDirector.LineObj,ChartDirector.LineObj,System.Int32)">
<summary>
Adds an inter-line layer the XYChart. An inter-line layer is used to fill the region between any two lines (straight lines, spline curves, step lines, etc).
</summary>
<param name="line1">
An opaque line object representing the first line.
</param>
<param name="line2">
An opaque line object representing the second line.
</param>
<param name="color12">
The color used to fill the region of the lines when line1 > line2.
</param>
</member>
<member name="M:ChartDirector.XYChart.addInterLineLayer(ChartDirector.LineObj,ChartDirector.LineObj,System.Int32,System.Int32)">
<summary>
Adds an inter-line layer the XYChart. An inter-line layer is used to fill the region between any two lines (straight lines, spline curves, step lines, etc).
</summary>
<param name="line1">
An opaque line object representing the first line.
</param>
<param name="line2">
An opaque line object representing the second line.
</param>
<param name="color12">
The color used to fill the region of the lines when line1 > line2.
</param>
<param name="color21">
The color used to fill the region of the lines when line2 > line1. -1 means this color is the same as <b>color12</b>.
</param>
</member>
<member name="M:ChartDirector.XYChart.addScatterLayer(System.Double[],System.Double[])">
<summary>
Adds a scatter chart layer to the XYChart.
</summary>
<param name="xData">
An array of numbers representing the x values of the data points. If no explicit x coordinates are used in the chart (eg. using an enumerated x-axis), an empty array may be used for this argument.
</param>
<param name="yData">
An array of numbers representing the y values of the data points.
</param>
</member>
<member name="M:ChartDirector.XYChart.addScatterLayer(System.Double[],System.Double[],System.String)">
<summary>
Adds a scatter chart layer to the XYChart.
</summary>
<param name="xData">
An array of numbers representing the x values of the data points. If no explicit x coordinates are used in the chart (eg. using an enumerated x-axis), an empty array may be used for this argument.
</param>
<param name="yData">
An array of numbers representing the y values of the data points.
</param>
<param name="name">
The name of the data set. The name will be used in the legend box, if one is available. An empty string means the data set has no name.
</param>
</member>
<member name="M:ChartDirector.XYChart.addScatterLayer(System.Double[],System.Double[],System.String,System.Int32)">
<summary>
Adds a scatter chart layer to the XYChart.
</summary>
<param name="xData">
An array of numbers representing the x values of the data points. If no explicit x coordinates are used in the chart (eg. using an enumerated x-axis), an empty array may be used for this argument.
</param>
<param name="yData">
An array of numbers representing the y values of the data points.
</param>
<param name="name">
The name of the data set. The name will be used in the legend box, if one is available. An empty string means the data set has no name.
</param>
<param name="symbol">
One of the predefined symbol constants to specify the symbol to use. (See "Shape Specification" for available built-in shapes.)
</param>
</member>
<member name="M:ChartDirector.XYChart.addScatterLayer(System.Double[],System.Double[],System.String,System.Int32,System.Int32)">
<summary>
Adds a scatter chart layer to the XYChart.
</summary>
<param name="xData">
An array of numbers representing the x values of the data points. If no explicit x coordinates are used in the chart (eg. using an enumerated x-axis), an empty array may be used for this argument.
</param>
<param name="yData">
An array of numbers representing the y values of the data points.
</param>
<param name="name">
The name of the data set. The name will be used in the legend box, if one is available. An empty string means the data set has no name.
</param>
<param name="symbol">
One of the predefined symbol constants to specify the symbol to use. (See "Shape Specification" for available built-in shapes.)
</param>
<param name="symbolSize">
The width and height of the symbol in pixels.
</param>
</member>
<member name="M:ChartDirector.XYChart.addScatterLayer(System.Double[],System.Double[],System.String,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a scatter chart layer to the XYChart.
</summary>
<param name="xData">
An array of numbers representing the x values of the data points. If no explicit x coordinates are used in the chart (eg. using an enumerated x-axis), an empty array may be used for this argument.
</param>
<param name="yData">
An array of numbers representing the y values of the data points.
</param>
<param name="name">
The name of the data set. The name will be used in the legend box, if one is available. An empty string means the data set has no name.
</param>
<param name="symbol">
One of the predefined symbol constants to specify the symbol to use. (See "Shape Specification" for available built-in shapes.)
</param>
<param name="symbolSize">
The width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means that the color is automatically selected from the palette.
</param>
</member>
<member name="M:ChartDirector.XYChart.addScatterLayer(System.Double[],System.Double[],System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a scatter chart layer to the XYChart.
</summary>
<param name="xData">
An array of numbers representing the x values of the data points. If no explicit x coordinates are used in the chart (eg. using an enumerated x-axis), an empty array may be used for this argument.
</param>
<param name="yData">
An array of numbers representing the y values of the data points.
</param>
<param name="name">
The name of the data set. The name will be used in the legend box, if one is available. An empty string means the data set has no name.
</param>
<param name="symbol">
One of the predefined symbol constants to specify the symbol to use. (See "Shape Specification" for available built-in shapes.)
</param>
<param name="symbolSize">
The width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means that the color is automatically selected from the palette.
</param>
<param name="edgeColor">
The edge color used to draw the edge of the symbol. -1 means using "LineColor" as the edge color.
</param>
</member>
<member name="M:ChartDirector.XYChart.addAreaLayer(System.Double[])">
<summary>
Adds an area chart layer to the XYChart, and specify the data set to use for drawing the area.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
</member>
<member name="M:ChartDirector.XYChart.addAreaLayer(System.Double[],System.Int32)">
<summary>
Adds an area chart layer to the XYChart, and specify the data set to use for drawing the area.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="color">
The color to draw the area. -1 means that the color is automatically selected from the color palette.
</param>
</member>
<member name="M:ChartDirector.XYChart.addAreaLayer(System.Double[],System.Int32,System.String)">
<summary>
Adds an area chart layer to the XYChart, and specify the data set to use for drawing the area.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="color">
The color to draw the area. -1 means that the color is automatically selected from the color palette.
</param>
<param name="name">
The name of the data set. The name will be used in the legend box, if one is available. An empty string means the data set has no name.
</param>
</member>
<member name="M:ChartDirector.XYChart.addAreaLayer(System.Double[],System.Int32,System.String,System.Int32)">
<summary>
Adds an area chart layer to the XYChart, and specify the data set to use for drawing the area.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="color">
The color to draw the area. -1 means that the color is automatically selected from the color palette.
</param>
<param name="name">
The name of the data set. The name will be used in the legend box, if one is available. An empty string means the data set has no name.
</param>
<param name="depth">
The 3D depth of the area layer.
</param>
</member>
<member name="M:ChartDirector.XYChart.addAreaLayer">
<summary>
Adds an empty area chart layer to the XYChart.
</summary>
</member>
<member name="M:ChartDirector.XYChart.addAreaLayer(System.Int32)">
<summary>
Adds an empty area chart layer to the XYChart.
</summary>
<param name="dataCombineMethod">
The method to combine the data sets together in the area layer.
</param>
</member>
<member name="M:ChartDirector.XYChart.addAreaLayer(System.Int32,System.Int32)">
<summary>
Adds an empty area chart layer to the XYChart.
</summary>
<param name="dataCombineMethod">
The method to combine the data sets together in the area layer.
</param>
<param name="depth">
The 3D depth of the area layer.
</param>
</member>
<member name="M:ChartDirector.XYChart.addAreaLayer2">
<summary>
Adds an empty area chart layer to the XYChart.
</summary>
</member>
<member name="M:ChartDirector.XYChart.addAreaLayer2(System.Int32)">
<summary>
Adds an empty area chart layer to the XYChart.
</summary>
<param name="dataCombineMethod">
The method to combine the data sets together in the area layer.
</param>
</member>
<member name="M:ChartDirector.XYChart.addAreaLayer2(System.Int32,System.Int32)">
<summary>
Adds an empty area chart layer to the XYChart.
</summary>
<param name="dataCombineMethod">
The method to combine the data sets together in the area layer.
</param>
<param name="depth">
The 3D depth of the area layer.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBoxWhiskerLayer(System.Double[],System.Double[])">
<summary>
Adds a box-whisker layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="boxTop">
An array of numbers representing the top edge of the box.
</param>
<param name="boxBottom">
An array of numbers representing the bottom edge of the box.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBoxWhiskerLayer(System.Double[],System.Double[],System.Double[])">
<summary>
Adds a box-whisker layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="boxTop">
An array of numbers representing the top edge of the box.
</param>
<param name="boxBottom">
An array of numbers representing the bottom edge of the box.
</param>
<param name="maxData">
An array of numbers representing the maximum value mark lines.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBoxWhiskerLayer(System.Double[],System.Double[],System.Double[],System.Double[])">
<summary>
Adds a box-whisker layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="boxTop">
An array of numbers representing the top edge of the box.
</param>
<param name="boxBottom">
An array of numbers representing the bottom edge of the box.
</param>
<param name="maxData">
An array of numbers representing the maximum value mark lines.
</param>
<param name="minData">
An array of numbers representing the minimum value mark lines.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBoxWhiskerLayer(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[])">
<summary>
Adds a box-whisker layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="boxTop">
An array of numbers representing the top edge of the box.
</param>
<param name="boxBottom">
An array of numbers representing the bottom edge of the box.
</param>
<param name="maxData">
An array of numbers representing the maximum value mark lines.
</param>
<param name="minData">
An array of numbers representing the minimum value mark lines.
</param>
<param name="midData">
An array of numbers representing the middle value mark lines.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBoxWhiskerLayer(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Int32)">
<summary>
Adds a box-whisker layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="boxTop">
An array of numbers representing the top edge of the box.
</param>
<param name="boxBottom">
An array of numbers representing the bottom edge of the box.
</param>
<param name="maxData">
An array of numbers representing the maximum value mark lines.
</param>
<param name="minData">
An array of numbers representing the minimum value mark lines.
</param>
<param name="midData">
An array of numbers representing the middle value mark lines.
</param>
<param name="fillColor">
The color used to fill the box. -1 means that the color is automatically selected from the palette.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBoxWhiskerLayer(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Int32,System.Int32)">
<summary>
Adds a box-whisker layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="boxTop">
An array of numbers representing the top edge of the box.
</param>
<param name="boxBottom">
An array of numbers representing the bottom edge of the box.
</param>
<param name="maxData">
An array of numbers representing the maximum value mark lines.
</param>
<param name="minData">
An array of numbers representing the minimum value mark lines.
</param>
<param name="midData">
An array of numbers representing the middle value mark lines.
</param>
<param name="fillColor">
The color used to fill the box. -1 means that the color is automatically selected from the palette.
</param>
<param name="whiskerColor">
The color used to draw the central line and mark lines.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBoxWhiskerLayer(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Int32,System.Int32,System.Int32)">
<summary>
Adds a box-whisker layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="boxTop">
An array of numbers representing the top edge of the box.
</param>
<param name="boxBottom">
An array of numbers representing the bottom edge of the box.
</param>
<param name="maxData">
An array of numbers representing the maximum value mark lines.
</param>
<param name="minData">
An array of numbers representing the minimum value mark lines.
</param>
<param name="midData">
An array of numbers representing the middle value mark lines.
</param>
<param name="fillColor">
The color used to fill the box. -1 means that the color is automatically selected from the palette.
</param>
<param name="whiskerColor">
The color used to draw the central line and mark lines.
</param>
<param name="edgeColor">
The color used to draw the border of the box.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBoxWhiskerLayer(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Int32[])">
<summary>
Adds a multi-color box-whisker layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="boxTop">
An array of numbers representing the top edge of the box.
</param>
<param name="boxBottom">
An array of numbers representing the bottom edge of the box.
</param>
<param name="maxData">
An array of numbers representing the maximum value mark lines.
</param>
<param name="minData">
An array of numbers representing the minimum value mark lines.
</param>
<param name="midData">
An array of numbers representing the middle value mark lines.
</param>
<param name="fillColors">
An array of colors to be used as the fill color of the boxes. If there are insufficient colors in the array for the boxes, the remaining boxes will have their colors automatically selected from the palette.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBoxWhiskerLayer(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Int32[],System.Double)">
<summary>
Adds a multi-color box-whisker layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="boxTop">
An array of numbers representing the top edge of the box.
</param>
<param name="boxBottom">
An array of numbers representing the bottom edge of the box.
</param>
<param name="maxData">
An array of numbers representing the maximum value mark lines.
</param>
<param name="minData">
An array of numbers representing the minimum value mark lines.
</param>
<param name="midData">
An array of numbers representing the middle value mark lines.
</param>
<param name="fillColors">
An array of colors to be used as the fill color of the boxes. If there are insufficient colors in the array for the boxes, the remaining boxes will have their colors automatically selected from the palette.
</param>
<param name="whiskerBrightness">
The brightness factor for whisker color. A value less than 1 means darkening. A value larger than 1 means brightening. A zero value means black.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBoxWhiskerLayer(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Int32[],System.Double,System.String[])">
<summary>
Adds a multi-color box-whisker layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="boxTop">
An array of numbers representing the top edge of the box.
</param>
<param name="boxBottom">
An array of numbers representing the bottom edge of the box.
</param>
<param name="maxData">
An array of numbers representing the maximum value mark lines.
</param>
<param name="minData">
An array of numbers representing the minimum value mark lines.
</param>
<param name="midData">
An array of numbers representing the middle value mark lines.
</param>
<param name="fillColors">
An array of colors to be used as the fill color of the boxes. If there are insufficient colors in the array for the boxes, the remaining boxes will have their colors automatically selected from the palette.
</param>
<param name="whiskerBrightness">
The brightness factor for whisker color. A value less than 1 means darkening. A value larger than 1 means brightening. A zero value means black.
</param>
<param name="names">
An array of names for the boxes to be used in the legend box, if one is configured for the chart.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBoxWhiskerLayer2(System.Double[],System.Double[])">
<summary>
Adds a multi-color box-whisker layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="boxTop">
An array of numbers representing the top edge of the box.
</param>
<param name="boxBottom">
An array of numbers representing the bottom edge of the box.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBoxWhiskerLayer2(System.Double[],System.Double[],System.Double[])">
<summary>
Adds a multi-color box-whisker layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="boxTop">
An array of numbers representing the top edge of the box.
</param>
<param name="boxBottom">
An array of numbers representing the bottom edge of the box.
</param>
<param name="maxData">
An array of numbers representing the maximum value mark lines.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBoxWhiskerLayer2(System.Double[],System.Double[],System.Double[],System.Double[])">
<summary>
Adds a multi-color box-whisker layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="boxTop">
An array of numbers representing the top edge of the box.
</param>
<param name="boxBottom">
An array of numbers representing the bottom edge of the box.
</param>
<param name="maxData">
An array of numbers representing the maximum value mark lines.
</param>
<param name="minData">
An array of numbers representing the minimum value mark lines.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBoxWhiskerLayer2(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[])">
<summary>
Adds a multi-color box-whisker layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="boxTop">
An array of numbers representing the top edge of the box.
</param>
<param name="boxBottom">
An array of numbers representing the bottom edge of the box.
</param>
<param name="maxData">
An array of numbers representing the maximum value mark lines.
</param>
<param name="minData">
An array of numbers representing the minimum value mark lines.
</param>
<param name="midData">
An array of numbers representing the middle value mark lines.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBoxWhiskerLayer2(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Int32[])">
<summary>
Adds a multi-color box-whisker layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="boxTop">
An array of numbers representing the top edge of the box.
</param>
<param name="boxBottom">
An array of numbers representing the bottom edge of the box.
</param>
<param name="maxData">
An array of numbers representing the maximum value mark lines.
</param>
<param name="minData">
An array of numbers representing the minimum value mark lines.
</param>
<param name="midData">
An array of numbers representing the middle value mark lines.
</param>
<param name="fillColors">
An array of colors to be used as the fill color of the boxes. If there are insufficient colors in the array for the boxes, the remaining boxes will have their colors automatically selected from the palette.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBoxWhiskerLayer2(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Int32[],System.Double)">
<summary>
Adds a multi-color box-whisker layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="boxTop">
An array of numbers representing the top edge of the box.
</param>
<param name="boxBottom">
An array of numbers representing the bottom edge of the box.
</param>
<param name="maxData">
An array of numbers representing the maximum value mark lines.
</param>
<param name="minData">
An array of numbers representing the minimum value mark lines.
</param>
<param name="midData">
An array of numbers representing the middle value mark lines.
</param>
<param name="fillColors">
An array of colors to be used as the fill color of the boxes. If there are insufficient colors in the array for the boxes, the remaining boxes will have their colors automatically selected from the palette.
</param>
<param name="whiskerBrightness">
The brightness factor for whisker color. A value less than 1 means darkening. A value larger than 1 means brightening. A zero value means black.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBoxWhiskerLayer2(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Int32[],System.Double,System.String[])">
<summary>
Adds a multi-color box-whisker layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="boxTop">
An array of numbers representing the top edge of the box.
</param>
<param name="boxBottom">
An array of numbers representing the bottom edge of the box.
</param>
<param name="maxData">
An array of numbers representing the maximum value mark lines.
</param>
<param name="minData">
An array of numbers representing the minimum value mark lines.
</param>
<param name="midData">
An array of numbers representing the middle value mark lines.
</param>
<param name="fillColors">
An array of colors to be used as the fill color of the boxes. If there are insufficient colors in the array for the boxes, the remaining boxes will have their colors automatically selected from the palette.
</param>
<param name="whiskerBrightness">
The brightness factor for whisker color. A value less than 1 means darkening. A value larger than 1 means brightening. A zero value means black.
</param>
<param name="names">
An array of names for the boxes to be used in the legend box, if one is configured for the chart.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBoxLayer(System.Double[],System.Double[])">
<summary>
Adds a floating box layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="boxTop">
An array of numbers representing the top edge of the box.
</param>
<param name="boxBottom">
An array of numbers representing the bottom edge of the box.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBoxLayer(System.Double[],System.Double[],System.Int32)">
<summary>
Adds a floating box layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="boxTop">
An array of numbers representing the top edge of the box.
</param>
<param name="boxBottom">
An array of numbers representing the bottom edge of the box.
</param>
<param name="color">
The color to draw the area. -1 means that the color is automatically selected from the color palette.
</param>
</member>
<member name="M:ChartDirector.XYChart.addBoxLayer(System.Double[],System.Double[],System.Int32,System.String)">
<summary>
Adds a floating box layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="boxTop">
An array of numbers representing the top edge of the box.
</param>
<param name="boxBottom">
An array of numbers representing the bottom edge of the box.
</param>
<param name="color">
The color to draw the area. -1 means that the color is automatically selected from the color palette.
</param>
<param name="name">
The name of the data set. The name will be used in the legend box, if one is available. An empty string means the data set has no name.
</param>
</member>
<member name="M:ChartDirector.XYChart.addVectorLayer(System.Double[],System.Double[],System.Double[],System.Double[])">
<summary>
Adds a vector layer to the chart.
</summary>
<param name="xData">
An array of numbers representing the x coordinates for the reference points of the vectors.
</param>
<param name="yData">
An array of numbers representing the y coordinates for the reference points of the vectors.
</param>
<param name="lengths">
An array of numbers representing either the lengths of the vectors or the x coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
<param name="directions">
An array of numbers representing either the directions of the vectors or the y coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
</member>
<member name="M:ChartDirector.XYChart.addVectorLayer(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32)">
<summary>
Adds a vector layer to the chart.
</summary>
<param name="xData">
An array of numbers representing the x coordinates for the reference points of the vectors.
</param>
<param name="yData">
An array of numbers representing the y coordinates for the reference points of the vectors.
</param>
<param name="lengths">
An array of numbers representing either the lengths of the vectors or the x coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
<param name="directions">
An array of numbers representing either the directions of the vectors or the y coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
<param name="lengthScale">
The method to specify vector lengths and directions, which must be one of the predefined constants in the table above.
</param>
</member>
<member name="M:ChartDirector.XYChart.addVectorLayer(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32,System.Int32)">
<summary>
Adds a vector layer to the chart.
</summary>
<param name="xData">
An array of numbers representing the x coordinates for the reference points of the vectors.
</param>
<param name="yData">
An array of numbers representing the y coordinates for the reference points of the vectors.
</param>
<param name="lengths">
An array of numbers representing either the lengths of the vectors or the x coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
<param name="directions">
An array of numbers representing either the directions of the vectors or the y coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
<param name="lengthScale">
The method to specify vector lengths and directions, which must be one of the predefined constants in the table above.
</param>
<param name="color">
The color to draw the data points. -1 means that the color is automatically selected from the palette.
</param>
</member>
<member name="M:ChartDirector.XYChart.addVectorLayer(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32,System.Int32,System.String)">
<summary>
Adds a vector layer to the chart.
</summary>
<param name="xData">
An array of numbers representing the x coordinates for the reference points of the vectors.
</param>
<param name="yData">
An array of numbers representing the y coordinates for the reference points of the vectors.
</param>
<param name="lengths">
An array of numbers representing either the lengths of the vectors or the x coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
<param name="directions">
An array of numbers representing either the directions of the vectors or the y coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
<param name="lengthScale">
The method to specify vector lengths and directions, which must be one of the predefined constants in the table above.
</param>
<param name="color">
The color to draw the data points. -1 means that the color is automatically selected from the palette.
</param>
<param name="name">
The name of the layer. The name will be used in the legend box, if one is available. An empty string means the layer has no name.
</param>
</member>
<member name="M:ChartDirector.XYChart.addHLOCLayer(System.Double[],System.Double[])">
<summary>
Adds a high-low-open-close (HLOC) layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="highData">
An array of numbers representing the high values. An empty array means there is no high value data available.
</param>
<param name="lowData">
An array of numbers representing the low values. An empty array means there is no low value data available.
</param>
</member>
<member name="M:ChartDirector.XYChart.addHLOCLayer(System.Double[],System.Double[],System.Double[])">
<summary>
Adds a high-low-open-close (HLOC) layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="highData">
An array of numbers representing the high values. An empty array means there is no high value data available.
</param>
<param name="lowData">
An array of numbers representing the low values. An empty array means there is no low value data available.
</param>
<param name="openData">
An array of numbers representing the opening values. An empty array means there is no opening value data available.
</param>
</member>
<member name="M:ChartDirector.XYChart.addHLOCLayer(System.Double[],System.Double[],System.Double[],System.Double[])">
<summary>
Adds a high-low-open-close (HLOC) layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="highData">
An array of numbers representing the high values. An empty array means there is no high value data available.
</param>
<param name="lowData">
An array of numbers representing the low values. An empty array means there is no low value data available.
</param>
<param name="openData">
An array of numbers representing the opening values. An empty array means there is no opening value data available.
</param>
<param name="closeData">
An array of numbers representing the closing values. An empty array means there is no closing value data available.
</param>
</member>
<member name="M:ChartDirector.XYChart.addHLOCLayer(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32)">
<summary>
Adds a high-low-open-close (HLOC) layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="highData">
An array of numbers representing the high values. An empty array means there is no high value data available.
</param>
<param name="lowData">
An array of numbers representing the low values. An empty array means there is no low value data available.
</param>
<param name="openData">
An array of numbers representing the opening values. An empty array means there is no opening value data available.
</param>
<param name="closeData">
An array of numbers representing the closing values. An empty array means there is no closing value data available.
</param>
<param name="color">
The color to draw the HLOC symbol. -1 means that the color is automatically selected from the palette.
</param>
</member>
<member name="M:ChartDirector.XYChart.addHLOCLayer">
<summary>
Adds an empty high-low-open-close (HLOC) layer to the XYChart.
</summary>
</member>
<member name="M:ChartDirector.XYChart.addHLOCLayer2">
<summary>
Adds an empty high-low-open-close (HLOC) layer to the XYChart.
</summary>
</member>
<member name="M:ChartDirector.XYChart.addHLOCLayer(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32,System.Int32)">
<summary>
Adds a multi-color high-low-open-close (HLOC) layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="highData">
An array of numbers representing the high values. An empty array means there is no high value data available.
</param>
<param name="lowData">
An array of numbers representing the low values. An empty array means there is no low value data available.
</param>
<param name="openData">
An array of numbers representing the opening values. An empty array means there is no opening value data available.
</param>
<param name="closeData">
An array of numbers representing the closing values. An empty array means there is no closing value data available.
</param>
<param name="upColor">
The color to be used on an "up" day.
</param>
<param name="downColor">
The color to be used on a "down" day.
</param>
</member>
<member name="M:ChartDirector.XYChart.addHLOCLayer(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32,System.Int32,System.Int32)">
<summary>
Adds a multi-color high-low-open-close (HLOC) layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="highData">
An array of numbers representing the high values. An empty array means there is no high value data available.
</param>
<param name="lowData">
An array of numbers representing the low values. An empty array means there is no low value data available.
</param>
<param name="openData">
An array of numbers representing the opening values. An empty array means there is no opening value data available.
</param>
<param name="closeData">
An array of numbers representing the closing values. An empty array means there is no closing value data available.
</param>
<param name="upColor">
The color to be used on an "up" day.
</param>
<param name="downColor">
The color to be used on a "down" day.
</param>
<param name="colorMode">
The method used to determine if a day is an "up" or "down". Must be one of the constants in the above table. -1 means the colorMode is automatically determine to be either "HLOCDefault" or "HLOCUpDown", depending on whether upColor and downColor are the same or different.
</param>
</member>
<member name="M:ChartDirector.XYChart.addHLOCLayer(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Double)">
<summary>
Adds a multi-color high-low-open-close (HLOC) layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="highData">
An array of numbers representing the high values. An empty array means there is no high value data available.
</param>
<param name="lowData">
An array of numbers representing the low values. An empty array means there is no low value data available.
</param>
<param name="openData">
An array of numbers representing the opening values. An empty array means there is no opening value data available.
</param>
<param name="closeData">
An array of numbers representing the closing values. An empty array means there is no closing value data available.
</param>
<param name="upColor">
The color to be used on an "up" day.
</param>
<param name="downColor">
The color to be used on a "down" day.
</param>
<param name="colorMode">
The method used to determine if a day is an "up" or "down". Must be one of the constants in the above table. -1 means the colorMode is automatically determine to be either "HLOCDefault" or "HLOCUpDown", depending on whether upColor and downColor are the same or different.
</param>
<param name="leadValue">
The lead value to act as the closing pricing before the first day, so as to determine if the first day is an "up" or "down" day.
</param>
</member>
<member name="M:ChartDirector.XYChart.addHLOCLayer3(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32,System.Int32)">
<summary>
Adds a multi-color high-low-open-close (HLOC) layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="highData">
An array of numbers representing the high values. An empty array means there is no high value data available.
</param>
<param name="lowData">
An array of numbers representing the low values. An empty array means there is no low value data available.
</param>
<param name="openData">
An array of numbers representing the opening values. An empty array means there is no opening value data available.
</param>
<param name="closeData">
An array of numbers representing the closing values. An empty array means there is no closing value data available.
</param>
<param name="upColor">
The color to be used on an "up" day.
</param>
<param name="downColor">
The color to be used on a "down" day.
</param>
</member>
<member name="M:ChartDirector.XYChart.addHLOCLayer3(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32,System.Int32,System.Int32)">
<summary>
Adds a multi-color high-low-open-close (HLOC) layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="highData">
An array of numbers representing the high values. An empty array means there is no high value data available.
</param>
<param name="lowData">
An array of numbers representing the low values. An empty array means there is no low value data available.
</param>
<param name="openData">
An array of numbers representing the opening values. An empty array means there is no opening value data available.
</param>
<param name="closeData">
An array of numbers representing the closing values. An empty array means there is no closing value data available.
</param>
<param name="upColor">
The color to be used on an "up" day.
</param>
<param name="downColor">
The color to be used on a "down" day.
</param>
<param name="colorMode">
The method used to determine if a day is an "up" or "down". Must be one of the constants in the above table. -1 means the colorMode is automatically determine to be either "HLOCDefault" or "HLOCUpDown", depending on whether upColor and downColor are the same or different.
</param>
</member>
<member name="M:ChartDirector.XYChart.addHLOCLayer3(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Double)">
<summary>
Adds a multi-color high-low-open-close (HLOC) layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="highData">
An array of numbers representing the high values. An empty array means there is no high value data available.
</param>
<param name="lowData">
An array of numbers representing the low values. An empty array means there is no low value data available.
</param>
<param name="openData">
An array of numbers representing the opening values. An empty array means there is no opening value data available.
</param>
<param name="closeData">
An array of numbers representing the closing values. An empty array means there is no closing value data available.
</param>
<param name="upColor">
The color to be used on an "up" day.
</param>
<param name="downColor">
The color to be used on a "down" day.
</param>
<param name="colorMode">
The method used to determine if a day is an "up" or "down". Must be one of the constants in the above table. -1 means the colorMode is automatically determine to be either "HLOCDefault" or "HLOCUpDown", depending on whether upColor and downColor are the same or different.
</param>
<param name="leadValue">
The lead value to act as the closing pricing before the first day, so as to determine if the first day is an "up" or "down" day.
</param>
</member>
<member name="M:ChartDirector.XYChart.addCandleStickLayer(System.Double[],System.Double[],System.Double[],System.Double[])">
<summary>
Adds a candlestick layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="highData">
An array of numbers representing the high values.
</param>
<param name="lowData">
An array of numbers representing the low values.
</param>
<param name="openData">
An array of numbers representing the opening values.
</param>
<param name="closeData">
An array of numbers representing the closing values.
</param>
</member>
<member name="M:ChartDirector.XYChart.addCandleStickLayer(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32)">
<summary>
Adds a candlestick layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="highData">
An array of numbers representing the high values.
</param>
<param name="lowData">
An array of numbers representing the low values.
</param>
<param name="openData">
An array of numbers representing the opening values.
</param>
<param name="closeData">
An array of numbers representing the closing values.
</param>
<param name="riseColor">
The color used to fill the candle if the closing value is higher than the opening value.
</param>
</member>
<member name="M:ChartDirector.XYChart.addCandleStickLayer(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32,System.Int32)">
<summary>
Adds a candlestick layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="highData">
An array of numbers representing the high values.
</param>
<param name="lowData">
An array of numbers representing the low values.
</param>
<param name="openData">
An array of numbers representing the opening values.
</param>
<param name="closeData">
An array of numbers representing the closing values.
</param>
<param name="riseColor">
The color used to fill the candle if the closing value is higher than the opening value.
</param>
<param name="fallColor">
The color used to fill the candle if the opening value is higher than the closing value.
</param>
</member>
<member name="M:ChartDirector.XYChart.addCandleStickLayer(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32,System.Int32,System.Int32)">
<summary>
Adds a candlestick layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="highData">
An array of numbers representing the high values.
</param>
<param name="lowData">
An array of numbers representing the low values.
</param>
<param name="openData">
An array of numbers representing the opening values.
</param>
<param name="closeData">
An array of numbers representing the closing values.
</param>
<param name="riseColor">
The color used to fill the candle if the closing value is higher than the opening value.
</param>
<param name="fallColor">
The color used to fill the candle if the opening value is higher than the closing value.
</param>
<param name="edgeColor">
The color used to draw the center line and the border of the candle.
</param>
</member>
<member name="M:ChartDirector.XYChart.addContourLayer(System.Double[],System.Double[],System.Double[])">
<summary>
Adds a contour layer to the XYChart, and specify the data sets to use for drawing the layer.
</summary>
<param name="xData">
An array of numbers representing the x data series.
</param>
<param name="yData">
An array of numbers representing the y data series.
</param>
<param name="zData">
An array of numbers representing the z data series.
</param>
</member>
<member name="M:ChartDirector.XYChart.getLayer(System.Int32)">
<summary>
Gets a "Layer" object based on the order in which it is being added to the chart.
</summary>
<param name="i">
The index of the data layer. The index of the first layer added to the chart is 0. The index of the Nth layer added to the chart is N - 1.
</param>
</member>
<member name="M:ChartDirector.XYChart.getLayerByZ(System.Int32)">
<summary>
Gets a "Layer" object based on the order in which it is being drawn.
</summary>
<param name="zIndex">
The z-index of the required layer. The z-index of the first layer drawn is 0. The z-index for the Nth layer drawn is N - 1.
</param>
</member>
<member name="M:ChartDirector.XYChart.getLayerCount">
<summary>
Gets the number of layers in the chart.
</summary>
</member>
<member name="M:ChartDirector.XYChart.layoutAxes">
<summary>
Performs axis auto-scaling and sets the axis positions and lengths.
</summary>
</member>
<member name="M:ChartDirector.XYChart.getXCoor(System.Double)">
<summary>
Gets the x pixel coordinate given the x data value.
</summary>
<param name="v">
The x data value.
</param>
</member>
<member name="M:ChartDirector.XYChart.getYCoor(System.Double)">
<summary>
Gets the y pixel coordinate given the y data value.
</summary>
<param name="v">
The y data value.
</param>
</member>
<member name="M:ChartDirector.XYChart.getYCoor(System.Double,ChartDirector.Axis)">
<summary>
Gets the y pixel coordinate given the y data value.
</summary>
<param name="v">
The y data value.
</param>
<param name="yAxis">
The y-axis to use to determine the pixel coordinates of data values. The y-axis may be obtained using "XYChart.yAxis", "XYChart.yAxis2" or "XYChart.addAxis". The default is to use the primary y-axis.
</param>
</member>
<member name="M:ChartDirector.XYChart.getXValue(System.Int32)">
<summary>
Gets the x data value given the x pixel coordinate.
</summary>
<param name="xCoor">
The x pixel coordinate.
</param>
</member>
<member name="M:ChartDirector.XYChart.getYValue(System.Int32)">
<summary>
Gets the y data value given the y pixel coordinate.
</summary>
<param name="yCoor">
The y pixel coordinate.
</param>
</member>
<member name="M:ChartDirector.XYChart.getYValue(System.Int32,ChartDirector.Axis)">
<summary>
Gets the y data value given the y pixel coordinate.
</summary>
<param name="yCoor">
The y pixel coordinate.
</param>
<param name="yAxis">
The y-axis to use to determine the pixel coordinates of data values. The y-axis may be obtained using "XYChart.yAxis", "XYChart.yAxis2" or "XYChart.addAxis". The default is to use the primary y-axis.
</param>
</member>
<member name="M:ChartDirector.XYChart.getNearestXValue(System.Double)">
<summary>
Gets the x data value that is nearest to the specified x pixel coordinate.
</summary>
<param name="xCoor">
The x pixel coordinate to search for.
</param>
</member>
<member name="M:ChartDirector.XYChart.xZoneColor(System.Double,System.Int32,System.Int32)">
<summary>
Creates an x-zone color. An x-zone will change from one color to another depending on a threshold value on the x-axis.
</summary>
<param name="threshold">
The x value serving as the threshold for switching between two colors.
</param>
<param name="belowColor">
The color to use when the x-axis value of the pixel is smaller than the threshold.
</param>
<param name="aboveColor">
The color to use when the x-axis value of the pixel is greater than the threshold.
</param>
</member>
<member name="M:ChartDirector.XYChart.yZoneColor(System.Double,System.Int32,System.Int32)">
<summary>
Creates a y-zone color. A y-zone will change from one color to another depending on a threshold value on the y-axis.
</summary>
<param name="threshold">
The y value serving as the threshold for switching between two colors.
</param>
<param name="belowColor">
The color to use when the y-axis value of the pixel is smaller than the threshold.
</param>
<param name="aboveColor">
The color to use when the y-axis value of the pixel is greater than the threshold.
</param>
</member>
<member name="M:ChartDirector.XYChart.yZoneColor(System.Double,System.Int32,System.Int32,ChartDirector.Axis)">
<summary>
Creates a y-zone color. A y-zone will change from one color to another depending on a threshold value on the y-axis.
</summary>
<param name="threshold">
The y value serving as the threshold for switching between two colors.
</param>
<param name="belowColor">
The color to use when the y-axis value of the pixel is smaller than the threshold.
</param>
<param name="aboveColor">
The color to use when the y-axis value of the pixel is greater than the threshold.
</param>
<param name="yAxis">
The y-axis to use to determine the pixel coordinates of data values. The y-axis may be obtained using "XYChart.yAxis", "XYChart.yAxis2" or "XYChart.addAxis". The default is to use the primary y-axis.
</param>
</member>
<member name="M:ChartDirector.PlotArea.setBackground(System.Int32)">
<summary>
Sets the background colors and the border color of the plot area.
</summary>
<param name="color">
The background color.
</param>
</member>
<member name="M:ChartDirector.PlotArea.setBackground(System.Int32,System.Int32)">
<summary>
Sets the background colors and the border color of the plot area.
</summary>
<param name="color">
The background color.
</param>
<param name="altBgColor">
The second background color. -1 means there is no second background color.
</param>
</member>
<member name="M:ChartDirector.PlotArea.setBackground(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the background colors and the border color of the plot area.
</summary>
<param name="color">
The background color.
</param>
<param name="altBgColor">
The second background color. -1 means there is no second background color.
</param>
<param name="edgeColor">
The border color of the plot area. -1 means to use the default, which is "LineColor". However, if the axes are configured in 4 quadrant mode (see "XYChart.setAxisAtOrigin"), the default will change to "Transparent".
</param>
</member>
<member name="M:ChartDirector.PlotArea.setBackground(System.String)">
<summary>
Sets the specified image file as the background image of the plot area.
</summary>
<param name="img">
The image file that is used as the background image of the plot area.
</param>
</member>
<member name="M:ChartDirector.PlotArea.setBackground(System.String,System.Int32)">
<summary>
Sets the specified image file as the background image of the plot area.
</summary>
<param name="img">
The image file that is used as the background image of the plot area.
</param>
<param name="align">
The alignment of the background image relative to the plot area. See "Alignment Specification" for supported alignment types.
</param>
</member>
<member name="M:ChartDirector.PlotArea.setBackground2(System.String)">
<summary>
Sets the specified image file as the background image of the plot area.
</summary>
<param name="img">
The image file that is used as the background image of the plot area.
</param>
</member>
<member name="M:ChartDirector.PlotArea.setBackground2(System.String,System.Int32)">
<summary>
Sets the specified image file as the background image of the plot area.
</summary>
<param name="img">
The image file that is used as the background image of the plot area.
</param>
<param name="align">
The alignment of the background image relative to the plot area. See "Alignment Specification" for supported alignment types.
</param>
</member>
<member name="M:ChartDirector.PlotArea.setAltBgColor(System.Boolean,System.Int32,System.Int32)">
<summary>
Sets alternating plot area background color.
</summary>
<param name="horizontal">
true means to use horizontal bands. false means to use vertical bands.
</param>
<param name="color1">
The first color to be used as the alternating background color.
</param>
<param name="color2">
The second color to be used as the alternating background color.
</param>
</member>
<member name="M:ChartDirector.PlotArea.setAltBgColor(System.Boolean,System.Int32,System.Int32,System.Int32)">
<summary>
Sets alternating plot area background color.
</summary>
<param name="horizontal">
true means to use horizontal bands. false means to use vertical bands.
</param>
<param name="color1">
The first color to be used as the alternating background color.
</param>
<param name="color2">
The second color to be used as the alternating background color.
</param>
<param name="edgeColor">
The border color of the plot area. -1 means to use the default, which is "LineColor". However, if the axes are configured in 4 quadrant mode (see "XYChart.setAxisAtOrigin"), the default will change to "Transparent".
</param>
</member>
<member name="M:ChartDirector.PlotArea.set4QBgColor(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets using 4 background plot area colors for 4 quadrants.
</summary>
<param name="Q1Color">
The background color to be used for the first quadrant.
</param>
<param name="Q2Color">
The background color to be used for the second quadrant.
</param>
<param name="Q3Color">
The background color to be used for the third quadrant.
</param>
<param name="Q4Color">
The background color to be used for the fourth quadrant.
</param>
</member>
<member name="M:ChartDirector.PlotArea.set4QBgColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets using 4 background plot area colors for 4 quadrants.
</summary>
<param name="Q1Color">
The background color to be used for the first quadrant.
</param>
<param name="Q2Color">
The background color to be used for the second quadrant.
</param>
<param name="Q3Color">
The background color to be used for the third quadrant.
</param>
<param name="Q4Color">
The background color to be used for the fourth quadrant.
</param>
<param name="edgeColor">
he border color of the plot area. -1 means to use the default, which is "LineColor". However, if the axes are configured in 4 quadrant mode (see "XYChart.setAxisAtOrigin"), the default will change to "Transparent".
</param>
</member>
<member name="M:ChartDirector.PlotArea.setGridColor(System.Int32)">
<summary>
Sets the horizontal and vertical grid colors of the plot area.
</summary>
<param name="hGridColor">
The color for the horizontal grid lines associated with major ticks.
</param>
</member>
<member name="M:ChartDirector.PlotArea.setGridColor(System.Int32,System.Int32)">
<summary>
Sets the horizontal and vertical grid colors of the plot area.
</summary>
<param name="hGridColor">
The color for the horizontal grid lines associated with major ticks.
</param>
<param name="vGridColor">
The color for the vertical grid lines associated with major ticks.
</param>
</member>
<member name="M:ChartDirector.PlotArea.setGridColor(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the horizontal and vertical grid colors of the plot area.
</summary>
<param name="hGridColor">
The color for the horizontal grid lines associated with major ticks.
</param>
<param name="vGridColor">
The color for the vertical grid lines associated with major ticks.
</param>
<param name="minorHGridColor">
The color for the horizontal grid lines associated with minor ticks. -1 means the color is the same as <b>hGridColor</b>.
</param>
</member>
<member name="M:ChartDirector.PlotArea.setGridColor(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the horizontal and vertical grid colors of the plot area.
</summary>
<param name="hGridColor">
The color for the horizontal grid lines associated with major ticks.
</param>
<param name="vGridColor">
The color for the vertical grid lines associated with major ticks.
</param>
<param name="minorHGridColor">
The color for the horizontal grid lines associated with minor ticks. -1 means the color is the same as <b>hGridColor</b>.
</param>
<param name="minorVGridColor">
The color for the vertical grid lines associated with minor ticks. -1 means the color is the same as <b>vGridColor</b>.
</param>
</member>
<member name="M:ChartDirector.PlotArea.setGridWidth(System.Int32)">
<summary>
Sets the horizontal and vertical grid line width.
</summary>
<param name="hGridWidth">
The line width for the horizontal grid lines associated with major ticks.
</param>
</member>
<member name="M:ChartDirector.PlotArea.setGridWidth(System.Int32,System.Int32)">
<summary>
Sets the horizontal and vertical grid line width.
</summary>
<param name="hGridWidth">
The line width for the horizontal grid lines associated with major ticks.
</param>
<param name="vGridWidth">
The line width for the vertical grid lines associated with major ticks. -1 means the vertical grid line width is the same as <b>hGridWidth</b>.
</param>
</member>
<member name="M:ChartDirector.PlotArea.setGridWidth(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the horizontal and vertical grid line width.
</summary>
<param name="hGridWidth">
The line width for the horizontal grid lines associated with major ticks.
</param>
<param name="vGridWidth">
The line width for the vertical grid lines associated with major ticks. -1 means the vertical grid line width is the same as <b>hGridWidth</b>.
</param>
<param name="minorHGridWidth">
The line width for the horizontal grid lines associated with minor ticks. -1 means the color is the same as <b>hGridWidth</b>.
</param>
</member>
<member name="M:ChartDirector.PlotArea.setGridWidth(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the horizontal and vertical grid line width.
</summary>
<param name="hGridWidth">
The line width for the horizontal grid lines associated with major ticks.
</param>
<param name="vGridWidth">
The line width for the vertical grid lines associated with major ticks. -1 means the vertical grid line width is the same as <b>hGridWidth</b>.
</param>
<param name="minorHGridWidth">
The line width for the horizontal grid lines associated with minor ticks. -1 means the color is the same as <b>hGridWidth</b>.
</param>
<param name="minorVGridWidth">
The line width for the horizontal grid lines associated with minor ticks. -1 means the color is the same as <b>vGridWidth</b>.
</param>
</member>
<member name="M:ChartDirector.PlotArea.setGridAxis(ChartDirector.Axis,ChartDirector.Axis)">
<summary>
Sets the axis used for drawing grid lines.
</summary>
<param name="xGridAxis">
The x-axis used for drawing grid lines.
</param>
<param name="yGridAxis">
The y-axis used for drawing grid lines.
</param>
</member>
<member name="M:ChartDirector.PlotArea.moveGridBefore">
<summary>
Moves the grid lines in front of a "Layer".
</summary>
</member>
<member name="M:ChartDirector.PlotArea.moveGridBefore(ChartDirector.Layer)">
<summary>
Moves the grid lines in front of a "Layer".
</summary>
<param name="layer">
The "Layer" for the grid lines to move in front of. A null value means that the grid lines will be behind all layers.
</param>
</member>
<member name="M:ChartDirector.PlotArea.getLeftX">
<summary>
Gets the left x pixel coordinate of the plot area.
</summary>
</member>
<member name="M:ChartDirector.PlotArea.getRightX">
<summary>
Gets the right x pixel coordinate of the plot area.
</summary>
</member>
<member name="M:ChartDirector.PlotArea.getTopY">
<summary>
Gets the top y pixel coordinate of the plot area.
</summary>
</member>
<member name="M:ChartDirector.PlotArea.getBottomY">
<summary>
Gets the bottom y pixel coordinate of the plot area.
</summary>
</member>
<member name="M:ChartDirector.PlotArea.getWidth">
<summary>
Gets the width of the plot area.
</summary>
</member>
<member name="M:ChartDirector.PlotArea.getHeight">
<summary>
Gets the height of the plot area.
</summary>
</member>
<member name="M:ChartDirector.Axis.setLabelStyle">
<summary>
Sets the font style used to for the axis labels.
</summary>
</member>
<member name="M:ChartDirector.Axis.setLabelStyle(System.String)">
<summary>
Sets the font style used to for the axis labels.
</summary>
<param name="font">
The font used to draw the labels.
</param>
</member>
<member name="M:ChartDirector.Axis.setLabelStyle(System.String,System.Double)">
<summary>
Sets the font style used to for the axis labels.
</summary>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels in points.
</param>
</member>
<member name="M:ChartDirector.Axis.setLabelStyle(System.String,System.Double,System.Int32)">
<summary>
Sets the font style used to for the axis labels.
</summary>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels in points.
</param>
<param name="fontColor">
The color used to draw the labels.
</param>
</member>
<member name="M:ChartDirector.Axis.setLabelStyle(System.String,System.Double,System.Int32,System.Double)">
<summary>
Sets the font style used to for the axis labels.
</summary>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels in points.
</param>
<param name="fontColor">
The color used to draw the labels.
</param>
<param name="fontAngle">
The rotation angle of the labels.
</param>
</member>
<member name="M:ChartDirector.Axis.setLabelFormat(System.String)">
<summary>
Sets the format for numeric or date/time axis labels.
</summary>
<param name="formatString">
The format string.
</param>
</member>
<member name="M:ChartDirector.Axis.setMultiFormat(System.Int32,System.String,System.Int32,System.String)">
<summary>
Sets multiple formats for numeric or date/time axis labels.
</summary>
<param name="filter1">
The filter that defines the first kind of labels.
</param>
<param name="format1">
The format string for the first kind of labels.
</param>
<param name="filter2">
The filter that defines the second kind of labels.
</param>
<param name="format2">
The format string for the second kind of labels.
</param>
</member>
<member name="M:ChartDirector.Axis.setMultiFormat(System.Int32,System.String,System.Int32,System.String,System.Int32)">
<summary>
Sets multiple formats for numeric or date/time axis labels.
</summary>
<param name="filter1">
The filter that defines the first kind of labels.
</param>
<param name="format1">
The format string for the first kind of labels.
</param>
<param name="filter2">
The filter that defines the second kind of labels.
</param>
<param name="format2">
The format string for the second kind of labels.
</param>
<param name="labelSpan">
The number of label positions that are claimed by one label. If a label occupies more than 1 position, ChartDirector will not put labels on nearby positions, even if they meet the filter criteria.
</param>
</member>
<member name="M:ChartDirector.Axis.setMultiFormat(System.Int32,System.String,System.Int32,System.String,System.Int32,System.Boolean)">
<summary>
Sets multiple formats for numeric or date/time axis labels.
</summary>
<param name="filter1">
The filter that defines the first kind of labels.
</param>
<param name="format1">
The format string for the first kind of labels.
</param>
<param name="filter2">
The filter that defines the second kind of labels.
</param>
<param name="format2">
The format string for the second kind of labels.
</param>
<param name="labelSpan">
The number of label positions that are claimed by one label. If a label occupies more than 1 position, ChartDirector will not put labels on nearby positions, even if they meet the filter criteria.
</param>
<param name="promoteFirst">
If set to true, the first label will be promoted to a higher filter category in the multi-format list.
</param>
</member>
<member name="M:ChartDirector.Axis.setMultiFormat(System.Int32,System.String)">
<summary>
Adds one filter and format string to the multi-format lists.
</summary>
<param name="filterId">
The filter that defines a subset of labels.
</param>
<param name="formatString">
The format string for formatting the subset defined by the above filter.
</param>
</member>
<member name="M:ChartDirector.Axis.setMultiFormat(System.Int32,System.String,System.Int32)">
<summary>
Adds one filter and format string to the multi-format lists.
</summary>
<param name="filterId">
The filter that defines a subset of labels.
</param>
<param name="formatString">
The format string for formatting the subset defined by the above filter.
</param>
<param name="labelSpan">
The number of label positions that are claimed by one label. If a label occupies more than 1 position, ChartDirector will not put labels on nearby positions, even if they meet the filter criteria.
</param>
</member>
<member name="M:ChartDirector.Axis.setMultiFormat(System.Int32,System.String,System.Int32,System.Boolean)">
<summary>
Adds one filter and format string to the multi-format lists.
</summary>
<param name="filterId">
The filter that defines a subset of labels.
</param>
<param name="formatString">
The format string for formatting the subset defined by the above filter.
</param>
<param name="labelSpan">
The number of label positions that are claimed by one label. If a label occupies more than 1 position, ChartDirector will not put labels on nearby positions, even if they meet the filter criteria.
</param>
<param name="promoteFirst">
If set to true, the first label will be promoted to a higher filter category in the multi-format list.
</param>
</member>
<member name="M:ChartDirector.Axis.setMultiFormat2(System.Int32,System.String)">
<summary>
Adds one filter and format string to the multi-format lists.
</summary>
<param name="filterId">
The filter that defines a subset of labels.
</param>
<param name="formatString">
The format string for formatting the subset defined by the above filter.
</param>
</member>
<member name="M:ChartDirector.Axis.setMultiFormat2(System.Int32,System.String,System.Int32)">
<summary>
Adds one filter and format string to the multi-format lists.
</summary>
<param name="filterId">
The filter that defines a subset of labels.
</param>
<param name="formatString">
The format string for formatting the subset defined by the above filter.
</param>
<param name="labelSpan">
The number of label positions that are claimed by one label. If a label occupies more than 1 position, ChartDirector will not put labels on nearby positions, even if they meet the filter criteria.
</param>
</member>
<member name="M:ChartDirector.Axis.setMultiFormat2(System.Int32,System.String,System.Int32,System.Boolean)">
<summary>
Adds one filter and format string to the multi-format lists.
</summary>
<param name="filterId">
The filter that defines a subset of labels.
</param>
<param name="formatString">
The format string for formatting the subset defined by the above filter.
</param>
<param name="labelSpan">
The number of label positions that are claimed by one label. If a label occupies more than 1 position, ChartDirector will not put labels on nearby positions, even if they meet the filter criteria.
</param>
<param name="promoteFirst">
If set to true, the first label will be promoted to a higher filter category in the multi-format list.
</param>
</member>
<member name="M:ChartDirector.Axis.setFormatCondition(System.String)">
<summary>
Specifies the condition that subsequent "Axis.setLabelFormat" and "Axis.setMultiFormat" will become applicable.
</summary>
<param name="condition">
The type of condition to test. Must be one of the condition types in the above table. This text string is case sensitive.
</param>
</member>
<member name="M:ChartDirector.Axis.setFormatCondition(System.String,System.Double)">
<summary>
Specifies the condition that subsequent "Axis.setLabelFormat" and "Axis.setMultiFormat" will become applicable.
</summary>
<param name="condition">
The type of condition to test. Must be one of the condition types in the above table. This text string is case sensitive.
</param>
<param name="operand">
The operand for condition types that need an operand.
</param>
</member>
<member name="M:ChartDirector.Axis.setLabelAlignment(System.Int32)">
<summary>
Sets the alignment of the axis labels relative to their associated ticks.
</summary>
<param name="alignment">
The alignment of the label relative to the associated tick.
</param>
</member>
<member name="M:ChartDirector.Axis.setLabelAlignment(System.Int32,System.Int32)">
<summary>
Sets the alignment of the axis labels relative to their associated ticks.
</summary>
<param name="alignment">
The alignment of the label relative to the associated tick.
</param>
<param name="minLabelSpace">
The minimum space in pixels that must be available at the plot area border in order to display the label
</param>
</member>
<member name="M:ChartDirector.Axis.setLabelGap(System.Int32)">
<summary>
Sets the distance between the axis labels and the ticks on the axis.
</summary>
<param name="d">
The distance between the axis label and the tick in pixels.
</param>
</member>
<member name="M:ChartDirector.Axis.setLabelOffset(System.Double)">
<summary>
Shifts the axis labels from its default position along the axis.
</summary>
<param name="offset">
The distance to shift the labels along the axis.
</param>
</member>
<member name="M:ChartDirector.Axis.setTitle(System.String)">
<summary>
Adds a title to the axis.
</summary>
<param name="text">
The title text.
</param>
</member>
<member name="M:ChartDirector.Axis.setTitle(System.String,System.String)">
<summary>
Adds a title to the axis.
</summary>
<param name="text">
The title text.
</param>
<param name="font">
The font used to draw the title. If no font is specified, the default is "bold".
</param>
</member>
<member name="M:ChartDirector.Axis.setTitle(System.String,System.String,System.Double)">
<summary>
Adds a title to the axis.
</summary>
<param name="text">
The title text.
</param>
<param name="font">
The font used to draw the title. If no font is specified, the default is "bold".
</param>
<param name="fontSize">
The size of the font in points.
</param>
</member>
<member name="M:ChartDirector.Axis.setTitle(System.String,System.String,System.Double,System.Int32)">
<summary>
Adds a title to the axis.
</summary>
<param name="text">
The title text.
</param>
<param name="font">
The font used to draw the title. If no font is specified, the default is "bold".
</param>
<param name="fontSize">
The size of the font in points.
</param>
<param name="fontColor">
The color used to draw the title text.
</param>
</member>
<member name="M:ChartDirector.Axis.setTitlePos(System.Int32)">
<summary>
Sets the position of the axis title relative to the axis.
</summary>
<param name="alignment">
The position of the title relative to the axis.
</param>
</member>
<member name="M:ChartDirector.Axis.setTitlePos(System.Int32,System.Int32)">
<summary>
Sets the position of the axis title relative to the axis.
</summary>
<param name="alignment">
The position of the title relative to the axis.
</param>
<param name="titleGap">
The distance between the axis title and the axis in pixels.
</param>
</member>
<member name="M:ChartDirector.Axis.setColors(System.Int32)">
<summary>
Sets the colors of the axis itself, axis label, axis title and axis ticks.
</summary>
<param name="axisColor">
The color of the axis itself.
</param>
</member>
<member name="M:ChartDirector.Axis.setColors(System.Int32,System.Int32)">
<summary>
Sets the colors of the axis itself, axis label, axis title and axis ticks.
</summary>
<param name="axisColor">
The color of the axis itself.
</param>
<param name="labelColor">
The color of the axis labels.
</param>
</member>
<member name="M:ChartDirector.Axis.setColors(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the colors of the axis itself, axis label, axis title and axis ticks.
</summary>
<param name="axisColor">
The color of the axis itself.
</param>
<param name="labelColor">
The color of the axis labels.
</param>
<param name="titleColor">
The color of the axis title. -1 means the axis title color is the same as the axis label color.
</param>
</member>
<member name="M:ChartDirector.Axis.setColors(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the colors of the axis itself, axis label, axis title and axis ticks.
</summary>
<param name="axisColor">
The color of the axis itself.
</param>
<param name="labelColor">
The color of the axis labels.
</param>
<param name="titleColor">
The color of the axis title. -1 means the axis title color is the same as the axis label color.
</param>
<param name="tickColor">
The color of the axis ticks. -1 means the axis ticks color is the same as the axis color.
</param>
</member>
<member name="M:ChartDirector.Axis.setTickLength(System.Int32)">
<summary>
Sets the length of the axis ticks.
</summary>
<param name="majorTickLen">
The length of the major ticks in pixels. The length of the minor ticks will automatically be set to half the length of the major ticks.
</param>
</member>
<member name="M:ChartDirector.Axis.setTickLength(System.Int32,System.Int32)">
<summary>
Sets the length of the major and minor axis ticks.
</summary>
<param name="majorTickLen">
The length of the major ticks in pixels.
</param>
<param name="minorTickLen">
The length of the minor ticks in pixels.
</param>
</member>
<member name="M:ChartDirector.Axis.setTickLength2(System.Int32,System.Int32)">
<summary>
Sets the length of the major and minor axis ticks.
</summary>
<param name="majorTickLen">
The length of the major ticks in pixels.
</param>
<param name="minorTickLen">
The length of the minor ticks in pixels.
</param>
</member>
<member name="M:ChartDirector.Axis.setTickWidth(System.Int32)">
<summary>
Sets the width of the axis ticks.
</summary>
<param name="majorTickWidth">
The width of the major ticks in pixels.
</param>
</member>
<member name="M:ChartDirector.Axis.setTickWidth(System.Int32,System.Int32)">
<summary>
Sets the width of the axis ticks.
</summary>
<param name="majorTickWidth">
The width of the major ticks in pixels.
</param>
<param name="minorTickWidth">
The width of the minor ticks in pixels. -1 means the width is the same as <b>majorTickWidth</b>.
</param>
</member>
<member name="M:ChartDirector.Axis.setTickColor(System.Int32)">
<summary>
Sets the colors of the axis ticks.
</summary>
<param name="majorTickColor">
The color of the major ticks.
</param>
</member>
<member name="M:ChartDirector.Axis.setTickColor(System.Int32,System.Int32)">
<summary>
Sets the colors of the axis ticks.
</summary>
<param name="majorTickColor">
The color of the major ticks.
</param>
<param name="minorTickColor">
The color of the minor ticks. -1 means the color is the same as <b>majorTickColor</b>.
</param>
</member>
<member name="M:ChartDirector.Axis.setTickOffset(System.Double)">
<summary>
Shifts the position of the ticks along the axis.
</summary>
<param name="offset">
The distance to shift the ticks along the axis.
</param>
</member>
<member name="M:ChartDirector.Axis.setMinTickInc(System.Double)">
<summary>
Sets the minimum distance between two ticks on the axis for auto-scaled axis.
</summary>
<param name="inc">
The minimum distance between two ticks on the axis as a data value.
</param>
</member>
<member name="M:ChartDirector.Axis.setWidth(System.Int32)">
<summary>
Sets the line width of the axis.
</summary>
<param name="width">
The line width of the axis in pixels.
</param>
</member>
<member name="M:ChartDirector.Axis.setLength(System.Int32)">
<summary>
Sets the length of the axis.
</summary>
<param name="length">
The length of the axis in pixels.
</param>
</member>
<member name="M:ChartDirector.Axis.setMargin(System.Int32)">
<summary>
Reserve margins at the ends of the axis.
</summary>
<param name="topMargin">
The margin reserved at the top end (or right end for horizontal axis) of the axis in pixels.
</param>
</member>
<member name="M:ChartDirector.Axis.setMargin(System.Int32,System.Int32)">
<summary>
Reserve margins at the ends of the axis.
</summary>
<param name="topMargin">
The margin reserved at the top end (or right end for horizontal axis) of the axis in pixels.
</param>
<param name="bottomMargin">
The margin reserved at the bottom end (or left end for horizontal axis) of the axis in pixels.
</param>
</member>
<member name="M:ChartDirector.Axis.setIndent(System.Boolean)">
<summary>
Specifies if the axis should be "indented" or not.
</summary>
<param name="indent">
A true value sets the axis to indented mode. A false value sets the axis to non-indented mode.
</param>
</member>
<member name="M:ChartDirector.Axis.setOffset(System.Int32,System.Int32)">
<summary>
Sets the positional offset of the axis.
</summary>
<param name="x">
The x offset in pixels.
</param>
<param name="y">
The y offset in pixels.
</param>
</member>
<member name="M:ChartDirector.Axis.setAutoScale">
<summary>
Sets the margins at the two ends of the axis during auto-scaling, and whether to start the axis from zero.
</summary>
</member>
<member name="M:ChartDirector.Axis.setAutoScale(System.Double)">
<summary>
Sets the margins at the two ends of the axis during auto-scaling, and whether to start the axis from zero.
</summary>
<param name="topExtension">
The top portion of the axis that no data point should fall into. For example, a value of 0.2 means no data value will fall within the top 20% of the axis. The topExtension must be between 0 to 1.
</param>
</member>
<member name="M:ChartDirector.Axis.setAutoScale(System.Double,System.Double)">
<summary>
Sets the margins at the two ends of the axis during auto-scaling, and whether to start the axis from zero.
</summary>
<param name="topExtension">
The top portion of the axis that no data point should fall into. For example, a value of 0.2 means no data value will fall within the top 20% of the axis. The topExtension must be between 0 to 1.
</param>
<param name="bottomExtension">
The bottom portion of the axis that no data point should fall into. For example, a value of 0.2 means no data value will fall within the bottom 20% of the axis. The bottomExtension must be between 0 to 1.
</param>
</member>
<member name="M:ChartDirector.Axis.setAutoScale(System.Double,System.Double,System.Double)">
<summary>
Sets the margins at the two ends of the axis during auto-scaling, and whether to start the axis from zero.
</summary>
<param name="topExtension">
The top portion of the axis that no data point should fall into. For example, a value of 0.2 means no data value will fall within the top 20% of the axis. The topExtension must be between 0 to 1.
</param>
<param name="bottomExtension">
The bottom portion of the axis that no data point should fall into. For example, a value of 0.2 means no data value will fall within the bottom 20% of the axis. The bottomExtension must be between 0 to 1.
</param>
<param name="zeroAffinity">
The tendency of ChartDirector to include zero in the axis during auto-scaling. The value must be between 0 and 1. A large value encourages ChartDirector to start the axis from zero. A value of 1 means the axis always includes the zero point. A value of 0 means there is no preference for the zero point during auto-scaling.
</param>
</member>
<member name="M:ChartDirector.Axis.setRounding(System.Boolean,System.Boolean)">
<summary>
Controls whether to round the ends of the axis to align with tick positions.
</summary>
<param name="roundMin">
A true value means the lesser end of the axis should be rounded to align with tick positions. A false value means no rounding.
</param>
<param name="roundMax">
A true value means the greater end of the axis should be rounded to align with tick positions. A false value means no rounding.
</param>
</member>
<member name="M:ChartDirector.Axis.setTickDensity(System.Int32)">
<summary>
Sets the density of the axis ticks.
</summary>
<param name="majorTickSpacing">
Specify the desired distance between two major ticks in pixels.
</param>
</member>
<member name="M:ChartDirector.Axis.setTickDensity(System.Int32,System.Int32)">
<summary>
Sets the density of the axis ticks.
</summary>
<param name="majorTickSpacing">
Specify the desired distance between two major ticks in pixels.
</param>
<param name="minorTickSpacing">
Specify the desired distance between two minor ticks in pixels. -1 means minor ticks are not used.
</param>
</member>
<member name="M:ChartDirector.Axis.setReverse">
<summary>
Reverse the axis.
</summary>
</member>
<member name="M:ChartDirector.Axis.setReverse(System.Boolean)">
<summary>
Reverse the axis.
</summary>
<param name="b">
A true value means the axis is reversed. A false value means the axis is not reversed.
</param>
</member>
<member name="M:ChartDirector.Axis.setLabels(System.String[])">
<summary>
Sets the text labels to be used on the axis.
</summary>
<param name="text">
An array of strings containing the text of the labels.
</param>
</member>
<member name="M:ChartDirector.Axis.setLabels(System.Double[])">
<summary>
Sets the numeric/date/time labels to be used on the axis.
</summary>
<param name="labels">
An array of numbers/dates to be used as the axis labels.
</param>
</member>
<member name="M:ChartDirector.Axis.setLabels(System.Double[],System.String)">
<summary>
Sets the numeric/date/time labels to be used on the axis.
</summary>
<param name="labels">
An array of numbers/dates to be used as the axis labels.
</param>
<param name="formatString">
A format string to specified how to format the labels into human readable form. Please refer to "Axis.setLabelFormat" for the syntax of the format string. An empty string means the format will be automatically determined.
</param>
</member>
<member name="M:ChartDirector.Axis.setLabels2(System.Double[])">
<summary>
Sets the numeric/date/time labels to be used on the axis.
</summary>
<param name="labels">
An array of numbers/dates to be used as the axis labels.
</param>
</member>
<member name="M:ChartDirector.Axis.setLabels2(System.Double[],System.String)">
<summary>
Sets the numeric/date/time labels to be used on the axis.
</summary>
<param name="labels">
An array of numbers/dates to be used as the axis labels.
</param>
<param name="formatString">
A format string to specified how to format the labels into human readable form. Please refer to "Axis.setLabelFormat" for the syntax of the format string. An empty string means the format will be automatically determined.
</param>
</member>
<member name="M:ChartDirector.Axis.setLabels(System.DateTime[])">
<summary>
Sets the numeric/date/time labels to be used on the axis.
</summary>
<param name="labels">
An array of numbers/dates to be used as the axis labels.
</param>
</member>
<member name="M:ChartDirector.Axis.setLabels(System.DateTime[],System.String)">
<summary>
Sets the numeric/date/time labels to be used on the axis.
</summary>
<param name="labels">
An array of numbers/dates to be used as the axis labels.
</param>
<param name="formatString">
A format string to specified how to format the labels into human readable form. Please refer to "Axis.setLabelFormat" for the syntax of the format string. An empty string means the format will be automatically determined.
</param>
</member>
<member name="M:ChartDirector.Axis.setLabels2(System.DateTime[])">
<summary>
Sets the numeric/date/time labels to be used on the axis.
</summary>
<param name="labels">
An array of numbers/dates to be used as the axis labels.
</param>
</member>
<member name="M:ChartDirector.Axis.setLabels2(System.DateTime[],System.String)">
<summary>
Sets the numeric/date/time labels to be used on the axis.
</summary>
<param name="labels">
An array of numbers/dates to be used as the axis labels.
</param>
<param name="formatString">
A format string to specified how to format the labels into human readable form. Please refer to "Axis.setLabelFormat" for the syntax of the format string. An empty string means the format will be automatically determined.
</param>
</member>
<member name="M:ChartDirector.Axis.setLabelStep(System.Int32)">
<summary>
Shows a regularly spaced subset of the axis labels on the axis.
</summary>
<param name="majorTickStep">
The spacing between visible labels (major ticks). For example, a value of 10 means displaying 1 label for every 10 labels.
</param>
</member>
<member name="M:ChartDirector.Axis.setLabelStep(System.Int32,System.Int32)">
<summary>
Shows a regularly spaced subset of the axis labels on the axis.
</summary>
<param name="majorTickStep">
The spacing between visible labels (major ticks). For example, a value of 10 means displaying 1 label for every 10 labels.
</param>
<param name="minorTickStep">
For labels that are not displayed, ChartDirector can optionally put a minor tick in its place. The argument specifies the spacing between minor ticks. For example, a value of 5 means displaying 1 minor tick for every 5 labels. 0 means no minor tick is used.
</param>
</member>
<member name="M:ChartDirector.Axis.setLabelStep(System.Int32,System.Int32,System.Int32)">
<summary>
Shows a regularly spaced subset of the axis labels on the axis.
</summary>
<param name="majorTickStep">
The spacing between visible labels (major ticks). For example, a value of 10 means displaying 1 label for every 10 labels.
</param>
<param name="minorTickStep">
For labels that are not displayed, ChartDirector can optionally put a minor tick in its place. The argument specifies the spacing between minor ticks. For example, a value of 5 means displaying 1 minor tick for every 5 labels. 0 means no minor tick is used.
</param>
<param name="majorTickOffset">
The offset used for selecting the labels. For example, if majorTickStep is set to 10, by default, ChartDirector will select the labels with index 0, 10, 20, 30 and so on. If the majorTickOffset argument is set to 3, then ChartDirector will select labels with index 3, 13, 23, 33 and so on.
</param>
</member>
<member name="M:ChartDirector.Axis.setLabelStep(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Shows a regularly spaced subset of the axis labels on the axis.
</summary>
<param name="majorTickStep">
The spacing between visible labels (major ticks). For example, a value of 10 means displaying 1 label for every 10 labels.
</param>
<param name="minorTickStep">
For labels that are not displayed, ChartDirector can optionally put a minor tick in its place. The argument specifies the spacing between minor ticks. For example, a value of 5 means displaying 1 minor tick for every 5 labels. 0 means no minor tick is used.
</param>
<param name="majorTickOffset">
The offset used for selecting the labels. For example, if majorTickStep is set to 10, by default, ChartDirector will select the labels with index 0, 10, 20, 30 and so on. If the majorTickOffset argument is set to 3, then ChartDirector will select labels with index 3, 13, 23, 33 and so on.
</param>
<param name="minorTickOffset">
The offset used for selecting minor tick points. The usage is the same as the majorTickOffset argument, except it applies to minor tick points. The default is to use the same value as majorTickOffset.
</param>
</member>
<member name="M:ChartDirector.Axis.setLinearScale(System.Double,System.Double)">
<summary>
Sets the axis to use the given linear scale.
</summary>
<param name="lowerLimit">
The lower bound of the axis.
</param>
<param name="upperLimit">
The upper bound of the axis.
</param>
</member>
<member name="M:ChartDirector.Axis.setLinearScale(System.Double,System.Double,System.Double)">
<summary>
Sets the axis to use the given linear scale.
</summary>
<param name="lowerLimit">
The lower bound of the axis.
</param>
<param name="upperLimit">
The upper bound of the axis.
</param>
<param name="majorTickInc">
Adds major ticks to the axis, where the major ticks are separated by majorTickInc in value. Each major tick will have an associated text label for the value if the axis at the tick.
</param>
</member>
<member name="M:ChartDirector.Axis.setLinearScale(System.Double,System.Double,System.Double,System.Double)">
<summary>
Sets the axis to use the given linear scale.
</summary>
<param name="lowerLimit">
The lower bound of the axis.
</param>
<param name="upperLimit">
The upper bound of the axis.
</param>
<param name="majorTickInc">
Adds major ticks to the axis, where the major ticks are separated by majorTickInc in value. Each major tick will have an associated text label for the value if the axis at the tick.
</param>
<param name="minorTickInc">
Adds minor ticks to the axis, where the minor ticks are separated by minorTickInc in value. 0 means no minor tick is used.
</param>
</member>
<member name="M:ChartDirector.Axis.setLinearScale(System.Double,System.Double,System.String[])">
<summary>
Sets the axis to use the given linear scale and the given labels.
</summary>
<param name="lowerLimit">
The lower bound of the axis.
</param>
<param name="upperLimit">
The upper bound of the axis.
</param>
<param name="labels">
An array of text strings to be used as the labels on the axis. ChartDirector will distribute the labels evenly on the axis. By default, all labels are associated with major ticks. These can be modified by using '-' or '~' as the first character. Please refer to "Axis.setLabels" for details.
</param>
</member>
<member name="M:ChartDirector.Axis.setLinearScale2(System.Double,System.Double,System.String[])">
<summary>
Sets the axis to use the given linear scale and the given labels.
</summary>
<param name="lowerLimit">
The lower bound of the axis.
</param>
<param name="upperLimit">
The upper bound of the axis.
</param>
<param name="labels">
An array of text strings to be used as the labels on the axis. ChartDirector will distribute the labels evenly on the axis. By default, all labels are associated with major ticks. These can be modified by using '-' or '~' as the first character. Please refer to "Axis.setLabels" for details.
</param>
</member>
<member name="M:ChartDirector.Axis.setLinearScale">
<summary>
Sets the axis to use linear auto-scale.
</summary>
</member>
<member name="M:ChartDirector.Axis.setLinearScale(System.String)">
<summary>
Sets the axis to use linear auto-scale.
</summary>
<param name="formatString">
The format used for the labels on the axis. Please refer to "Axis.setLabelFormat" for the syntax of the format string. An empty string means the format will be automatically determined.
</param>
</member>
<member name="M:ChartDirector.Axis.setLinearScale3">
<summary>
Sets the axis to use linear auto-scale.
</summary>
</member>
<member name="M:ChartDirector.Axis.setLinearScale3(System.String)">
<summary>
Sets the axis to use linear auto-scale.
</summary>
<param name="formatString">
The format used for the labels on the axis. Please refer to "Axis.setLabelFormat" for the syntax of the format string. An empty string means the format will be automatically determined.
</param>
</member>
<member name="M:ChartDirector.Axis.setLogScale(System.Double,System.Double)">
<summary>
Sets the axis to use the given logarithmic scale.
</summary>
<param name="lowerLimit">
The lower bound of the axis.
</param>
<param name="upperLimit">
The upper bound of the axis.
</param>
</member>
<member name="M:ChartDirector.Axis.setLogScale(System.Double,System.Double,System.Double)">
<summary>
Sets the axis to use the given logarithmic scale.
</summary>
<param name="lowerLimit">
The lower bound of the axis.
</param>
<param name="upperLimit">
The upper bound of the axis.
</param>
<param name="majorTickInc">
Adds major ticks to the axis, where the major ticks are separated by majorTickInc in ratio. For example, a value of 10 means each tick will be 10 times the value of the previous tick. Each major tick will have an associated text label for the value if the axis at the tick.
</param>
</member>
<member name="M:ChartDirector.Axis.setLogScale(System.Double,System.Double,System.Double,System.Double)">
<summary>
Sets the axis to use the given logarithmic scale.
</summary>
<param name="lowerLimit">
The lower bound of the axis.
</param>
<param name="upperLimit">
The upper bound of the axis.
</param>
<param name="majorTickInc">
Adds major ticks to the axis, where the major ticks are separated by majorTickInc in ratio. For example, a value of 10 means each tick will be 10 times the value of the previous tick. Each major tick will have an associated text label for the value if the axis at the tick.
</param>
<param name="minorTickInc">
Adds minor ticks to the axis, where the minor ticks are separated by minorTickInc in ratio.
</param>
</member>
<member name="M:ChartDirector.Axis.setLogScale(System.Double,System.Double,System.String[])">
<summary>
Sets the axis to use the given logarithmic scale and the given labels.
</summary>
<param name="lowerLimit">
The lower bound of the axis.
</param>
<param name="upperLimit">
The upper bound of the axis.
</param>
<param name="labels">
An array of text strings to be used as the labels on the axis. ChartDirector will distribute the labels evenly on the axis. By default, all labels are associated with major ticks. These can be modified by using '-' or '~' as the first character. Please refer to "Axis.setLabels" for details.
</param>
</member>
<member name="M:ChartDirector.Axis.setLogScale2(System.Double,System.Double,System.String[])">
<summary>
Sets the axis to use the given logarithmic scale and the given labels.
</summary>
<param name="lowerLimit">
The lower bound of the axis.
</param>
<param name="upperLimit">
The upper bound of the axis.
</param>
<param name="labels">
An array of text strings to be used as the labels on the axis. ChartDirector will distribute the labels evenly on the axis. By default, all labels are associated with major ticks. These can be modified by using '-' or '~' as the first character. Please refer to "Axis.setLabels" for details.
</param>
</member>
<member name="M:ChartDirector.Axis.setLogScale">
<summary>
Sets the axis to use logarithmic auto-scale.
</summary>
</member>
<member name="M:ChartDirector.Axis.setLogScale(System.String)">
<summary>
Sets the axis to use logarithmic auto-scale.
</summary>
<param name="formatString">
The format used for the labels on the axis. Please refer to "Axis.setLabelFormat" for the syntax of the format string. An empty string means the format will be automatically determined.
</param>
</member>
<member name="M:ChartDirector.Axis.setLogScale3">
<summary>
Sets the axis to use logarithmic auto-scale.
</summary>
</member>
<member name="M:ChartDirector.Axis.setLogScale3(System.String)">
<summary>
Sets the axis to use logarithmic auto-scale.
</summary>
<param name="formatString">
The format used for the labels on the axis. Please refer to "Axis.setLabelFormat" for the syntax of the format string. An empty string means the format will be automatically determined.
</param>
</member>
<member name="M:ChartDirector.Axis.setDateScale(System.Double,System.Double)">
<summary>
Sets the axis to use the given date scale.
</summary>
<param name="lowerLimit">
The lower bound of the axis, representing using one of the "ChartDirector supported date format".
</param>
<param name="upperLimit">
The upper bound of the axis, representing using one of the "ChartDirector supported date format".
</param>
</member>
<member name="M:ChartDirector.Axis.setDateScale(System.Double,System.Double,System.Double)">
<summary>
Sets the axis to use the given date scale.
</summary>
<param name="lowerLimit">
The lower bound of the axis, representing using one of the "ChartDirector supported date format".
</param>
<param name="upperLimit">
The upper bound of the axis, representing using one of the "ChartDirector supported date format".
</param>
<param name="majorTickInc">
Adds major ticks to the axis, where the major ticks are separated by majorTickInc seconds. Each major tick will have an associated text label for the value if the axis at the tick.
</param>
</member>
<member name="M:ChartDirector.Axis.setDateScale(System.Double,System.Double,System.Double,System.Double)">
<summary>
Sets the axis to use the given date scale.
</summary>
<param name="lowerLimit">
The lower bound of the axis, representing using one of the "ChartDirector supported date format".
</param>
<param name="upperLimit">
The upper bound of the axis, representing using one of the "ChartDirector supported date format".
</param>
<param name="majorTickInc">
Adds major ticks to the axis, where the major ticks are separated by majorTickInc seconds. Each major tick will have an associated text label for the value if the axis at the tick.
</param>
<param name="minorTickInc">
Adds minor ticks to the x-axis, where the minor ticks are separated by minorTickInc seconds.
</param>
</member>
<member name="M:ChartDirector.Axis.setDateScale(System.DateTime,System.DateTime)">
<summary>
Sets the axis to use the given date scale.
</summary>
<param name="lowerLimit">
The lower bound of the axis, representing using one of the "ChartDirector supported date format".
</param>
<param name="upperLimit">
The upper bound of the axis, representing using one of the "ChartDirector supported date format".
</param>
</member>
<member name="M:ChartDirector.Axis.setDateScale(System.DateTime,System.DateTime,System.Double)">
<summary>
Sets the axis to use the given date scale.
</summary>
<param name="lowerLimit">
The lower bound of the axis, representing using one of the "ChartDirector supported date format".
</param>
<param name="upperLimit">
The upper bound of the axis, representing using one of the "ChartDirector supported date format".
</param>
<param name="majorTickInc">
Adds major ticks to the axis, where the major ticks are separated by majorTickInc seconds. Each major tick will have an associated text label for the value if the axis at the tick.
</param>
</member>
<member name="M:ChartDirector.Axis.setDateScale(System.DateTime,System.DateTime,System.Double,System.Double)">
<summary>
Sets the axis to use the given date scale.
</summary>
<param name="lowerLimit">
The lower bound of the axis, representing using one of the "ChartDirector supported date format".
</param>
<param name="upperLimit">
The upper bound of the axis, representing using one of the "ChartDirector supported date format".
</param>
<param name="majorTickInc">
Adds major ticks to the axis, where the major ticks are separated by majorTickInc seconds. Each major tick will have an associated text label for the value if the axis at the tick.
</param>
<param name="minorTickInc">
Adds minor ticks to the x-axis, where the minor ticks are separated by minorTickInc seconds.
</param>
</member>
<member name="M:ChartDirector.Axis.setDateScale(System.Double,System.Double,System.String[])">
<summary>
Sets the axis to use the given date scale and the given labels.
</summary>
<param name="lowerLimit">
The lower bound of the axis, representing using one of the "ChartDirector supported date format".
</param>
<param name="upperLimit">
The upper bound of the axis, representing using one of the "ChartDirector supported date format".
</param>
<param name="labels">
An array of text strings to be used as the labels on the axis. ChartDirector will distribute the labels evenly on the axis. By default, all labels are associated with major ticks. These can be modified by using '-' or '~' as the first character. Please refer to "Axis.setLabels" for details.
</param>
</member>
<member name="M:ChartDirector.Axis.setDateScale2(System.Double,System.Double,System.String[])">
<summary>
Sets the axis to use the given date scale and the given labels.
</summary>
<param name="lowerLimit">
The lower bound of the axis, representing using one of the "ChartDirector supported date format".
</param>
<param name="upperLimit">
The upper bound of the axis, representing using one of the "ChartDirector supported date format".
</param>
<param name="labels">
An array of text strings to be used as the labels on the axis. ChartDirector will distribute the labels evenly on the axis. By default, all labels are associated with major ticks. These can be modified by using '-' or '~' as the first character. Please refer to "Axis.setLabels" for details.
</param>
</member>
<member name="M:ChartDirector.Axis.setDateScale(System.DateTime,System.DateTime,System.String[])">
<summary>
Sets the axis to use the given date scale and the given labels.
</summary>
<param name="lowerLimit">
The lower bound of the axis, representing using one of the "ChartDirector supported date format".
</param>
<param name="upperLimit">
The upper bound of the axis, representing using one of the "ChartDirector supported date format".
</param>
<param name="labels">
An array of text strings to be used as the labels on the axis. ChartDirector will distribute the labels evenly on the axis. By default, all labels are associated with major ticks. These can be modified by using '-' or '~' as the first character. Please refer to "Axis.setLabels" for details.
</param>
</member>
<member name="M:ChartDirector.Axis.setDateScale2(System.DateTime,System.DateTime,System.String[])">
<summary>
Sets the axis to use the given date scale and the given labels.
</summary>
<param name="lowerLimit">
The lower bound of the axis, representing using one of the "ChartDirector supported date format".
</param>
<param name="upperLimit">
The upper bound of the axis, representing using one of the "ChartDirector supported date format".
</param>
<param name="labels">
An array of text strings to be used as the labels on the axis. ChartDirector will distribute the labels evenly on the axis. By default, all labels are associated with major ticks. These can be modified by using '-' or '~' as the first character. Please refer to "Axis.setLabels" for details.
</param>
</member>
<member name="M:ChartDirector.Axis.setDateScale">
<summary>
Sets the axis to use date auto-scale.
</summary>
</member>
<member name="M:ChartDirector.Axis.setDateScale(System.String)">
<summary>
Sets the axis to use date auto-scale.
</summary>
<param name="formatString">
The format used for the labels on the axis. Please refer to "Axis.setLabelFormat" for the syntax of the format string. An empty string means the format will be automatically determined.
</param>
</member>
<member name="M:ChartDirector.Axis.setDateScale3">
<summary>
Sets the axis to use date auto-scale.
</summary>
</member>
<member name="M:ChartDirector.Axis.setDateScale3(System.String)">
<summary>
Sets the axis to use date auto-scale.
</summary>
<param name="formatString">
The format used for the labels on the axis. Please refer to "Axis.setLabelFormat" for the syntax of the format string. An empty string means the format will be automatically determined.
</param>
</member>
<member name="M:ChartDirector.Axis.syncAxis(ChartDirector.Axis)">
<summary>
Synchronizes this axis with another axis using a linear formula.
</summary>
<param name="axis">
The axis to synchronize to. A value of null means not to synchronize to any axis.
</param>
</member>
<member name="M:ChartDirector.Axis.syncAxis(ChartDirector.Axis,System.Double)">
<summary>
Synchronizes this axis with another axis using a linear formula.
</summary>
<param name="axis">
The axis to synchronize to. A value of null means not to synchronize to any axis.
</param>
<param name="slope">
The slope for synchronizing this axis to the other axis.
</param>
</member>
<member name="M:ChartDirector.Axis.syncAxis(ChartDirector.Axis,System.Double,System.Double)">
<summary>
Synchronizes this axis with another axis using a linear formula.
</summary>
<param name="axis">
The axis to synchronize to. A value of null means not to synchronize to any axis.
</param>
<param name="slope">
The slope for synchronizing this axis to the other axis.
</param>
<param name="intercept">
The intercept parameter for synchronizing this axis to the other axis.
</param>
</member>
<member name="M:ChartDirector.Axis.copyAxis(ChartDirector.Axis)">
<summary>
Copies the scale and labels from another axis.
</summary>
<param name="axis">
The axis to copy from.
</param>
</member>
<member name="M:ChartDirector.Axis.addLabel(System.Double,System.String)">
<summary>
Adds an extra label on the axis.
</summary>
<param name="pos">
The position on the axis to add the label.
</param>
<param name="label">
The text label to add.
</param>
</member>
<member name="M:ChartDirector.Axis.addMark(System.Double,System.Int32)">
<summary>
Adds a mark line to the chart.
</summary>
<param name="value">
The value on the axis to draw the mark line.
</param>
<param name="lineColor">
The color of the mark line.
</param>
</member>
<member name="M:ChartDirector.Axis.addMark(System.Double,System.Int32,System.String)">
<summary>
Adds a mark line to the chart.
</summary>
<param name="value">
The value on the axis to draw the mark line.
</param>
<param name="lineColor">
The color of the mark line.
</param>
<param name="text">
The text label for the mark line. An empty string means there is no text label. By default, the text label and the tick on the axis will be drawn using the same color as the mark line. You can modify the colors by using the "Mark.setMarkColor" method.
</param>
</member>
<member name="M:ChartDirector.Axis.addMark(System.Double,System.Int32,System.String,System.String)">
<summary>
Adds a mark line to the chart.
</summary>
<param name="value">
The value on the axis to draw the mark line.
</param>
<param name="lineColor">
The color of the mark line.
</param>
<param name="text">
The text label for the mark line. An empty string means there is no text label. By default, the text label and the tick on the axis will be drawn using the same color as the mark line. You can modify the colors by using the "Mark.setMarkColor" method.
</param>
<param name="font">
The font used to draw the text label.
</param>
</member>
<member name="M:ChartDirector.Axis.addMark(System.Double,System.Int32,System.String,System.String,System.Double)">
<summary>
Adds a mark line to the chart.
</summary>
<param name="value">
The value on the axis to draw the mark line.
</param>
<param name="lineColor">
The color of the mark line.
</param>
<param name="text">
The text label for the mark line. An empty string means there is no text label. By default, the text label and the tick on the axis will be drawn using the same color as the mark line. You can modify the colors by using the "Mark.setMarkColor" method.
</param>
<param name="font">
The font used to draw the text label.
</param>
<param name="fontSize">
The font size used to draw the text label in points.
</param>
</member>
<member name="M:ChartDirector.Axis.addZone(System.Double,System.Double,System.Int32)">
<summary>
Adds a zone to the chart.
</summary>
<param name="startValue">
The start value (the lower bound) for the zone.
</param>
<param name="endValue">
The end value (the upper bound) for the zone.
</param>
<param name="color">
The color of the zone.
</param>
</member>
<member name="M:ChartDirector.Axis.makeLabelTable">
<summary>
Creates a CDML table and docks it to the axis, with one row (for horizontal axis) or column (for vertical axis) containing the axis labels.
</summary>
</member>
<member name="M:ChartDirector.Axis.getLabelTable">
<summary>
Gets the CDML table created by "Axis.makeLabelTable".
</summary>
</member>
<member name="M:ChartDirector.Axis.getMinValue">
<summary>
Gets the lower bound of the axis.
</summary>
</member>
<member name="M:ChartDirector.Axis.getMaxValue">
<summary>
Gets the upper bound of the axis.
</summary>
</member>
<member name="M:ChartDirector.Axis.getX">
<summary>
Gets the x-coordinate of starting point of the axis.
</summary>
</member>
<member name="M:ChartDirector.Axis.getY">
<summary>
Gets the y-coordinate of starting point of the axis.
</summary>
</member>
<member name="M:ChartDirector.Axis.getAlignment">
<summary>
Gets the side of the plot area that the axis is associated with.
</summary>
</member>
<member name="M:ChartDirector.Axis.getThickness">
<summary>
Gets the thickness of the axis.
</summary>
</member>
<member name="M:ChartDirector.Axis.getTicks">
<summary>
Gets the values of the ticks.
</summary>
</member>
<member name="M:ChartDirector.Axis.getLabel(System.Double)">
<summary>
Gets the label at the specified position on the axis.
</summary>
<param name="i">
The position specified as a value on the axis scale.
</param>
</member>
<member name="M:ChartDirector.Axis.getFormattedLabel(System.Double)">
<summary>
Gets the label at the specified position on the axis, formatting one if necessary.
</summary>
<param name="i">
The position specified as a value on the axis scale.
</param>
</member>
<member name="M:ChartDirector.Axis.getFormattedLabel(System.Double,System.String)">
<summary>
Gets the label at the specified position on the axis, formatting one if necessary.
</summary>
<param name="i">
The position specified as a value on the axis scale.
</param>
<param name="formatString">
The format string used to format a label if necessary. Please refer to "Axis.setLabelFormat" for the syntax of the format string. An empty string means the format will be automatically determined.
</param>
</member>
<member name="M:ChartDirector.Axis.getHTMLImageMap(System.String)">
<summary>
Generates an HTML image map for the axis labels.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
</member>
<member name="M:ChartDirector.Axis.getHTMLImageMap(System.String,System.String)">
<summary>
Generates an HTML image map for the axis labels.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.Axis.getHTMLImageMap(System.String,System.String,System.String)">
<summary>
Generates an HTML image map for the axis labels.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
<param name="extraAttr">
A text string to specify additional attributes to add to the &lt;area&gt; tag. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.Axis.getHTMLImageMap(System.String,System.String,System.String,System.Int32,System.Int32)">
<summary>
Generates an HTML image map for the axis labels.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
<param name="extraAttr">
A text string to specify additional attributes to add to the &lt;area&gt; tag. "Parameter Substitution and Formatting" is supported.
</param>
<param name="offsetX">
An offset to be added to all x coordinates in the image map. This is useful if the current image will be shifted and inserted into another image. In this case, the image map will need to be shifted by the same offset.
</param>
<param name="offsetY">
An offset to be added to all y coordinates in the image map. See offsetX above for description.
</param>
</member>
<member name="M:ChartDirector.Axis.getAxisImageMap(System.Int32,System.Int32,System.String)">
<summary>
Generates an HTML image map for the axis itself.
</summary>
<param name="noOfSegments">
The number of segments to divide the axis into.
</param>
<param name="mapWidth">
The width of the axis used for the purpose of generating the image map.
</param>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
</member>
<member name="M:ChartDirector.Axis.getAxisImageMap(System.Int32,System.Int32,System.String,System.String)">
<summary>
Generates an HTML image map for the axis itself.
</summary>
<param name="noOfSegments">
The number of segments to divide the axis into.
</param>
<param name="mapWidth">
The width of the axis used for the purpose of generating the image map.
</param>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.Axis.getAxisImageMap(System.Int32,System.Int32,System.String,System.String,System.String)">
<summary>
Generates an HTML image map for the axis itself.
</summary>
<param name="noOfSegments">
The number of segments to divide the axis into.
</param>
<param name="mapWidth">
The width of the axis used for the purpose of generating the image map.
</param>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
<param name="extraAttr">
A text string to specify additional attributes to add to the &lt;area&gt; tag. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.Axis.getAxisImageMap(System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32)">
<summary>
Generates an HTML image map for the axis itself.
</summary>
<param name="noOfSegments">
The number of segments to divide the axis into.
</param>
<param name="mapWidth">
The width of the axis used for the purpose of generating the image map.
</param>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
<param name="extraAttr">
A text string to specify additional attributes to add to the &lt;area&gt; tag. "Parameter Substitution and Formatting" is supported.
</param>
<param name="offsetX">
An offset to be added to all x coordinates in the image map. This is useful if the current image will be shifted and inserted into another image. In this case, the image map will need to be shifted by the same offset.
</param>
<param name="offsetY">
An offset to be added to all y coordinates in the image map. See offsetX above for description.
</param>
</member>
<member name="M:ChartDirector.ColorAxis.setAxisPos(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the position of the color axis.
</summary>
<param name="x">
The x-coordinate of the reference point used to position the color axis.
</param>
<param name="y">
The y-coordinate of the reference point used to position the color axis.
</param>
<param name="alignment">
The alignment of the color axis with respect to the reference point. For example, a value of "TopLeft" means the reference point is the top- left corner of the color axis. See "Alignment Specification" for supported alignment types..
</param>
</member>
<member name="M:ChartDirector.ColorAxis.setColorGradient">
<summary>
Sets the continuous color gradient or discrete color steps for the color axis.
</summary>
</member>
<member name="M:ChartDirector.ColorAxis.setColorGradient(System.Boolean)">
<summary>
Sets the continuous color gradient or discrete color steps for the color axis.
</summary>
<param name="isContinuous">
True ti set to continuous color gradient. False to set to discrete color steps.
</param>
</member>
<member name="M:ChartDirector.ColorAxis.setColorGradient(System.Boolean,System.Int32[])">
<summary>
Sets the continuous color gradient or discrete color steps for the color axis.
</summary>
<param name="isContinuous">
True ti set to continuous color gradient. False to set to discrete color steps.
</param>
<param name="colors">
An array of colors used to define the continuous color gradient. If an empty array is used, the colors are automatically determined.
</param>
</member>
<member name="M:ChartDirector.ColorAxis.setColorGradient(System.Boolean,System.Int32[],System.Int32)">
<summary>
Sets the continuous color gradient or discrete color steps for the color axis.
</summary>
<param name="isContinuous">
True ti set to continuous color gradient. False to set to discrete color steps.
</param>
<param name="colors">
An array of colors used to define the continuous color gradient. If an empty array is used, the colors are automatically determined.
</param>
<param name="underflowColor">
The color to use if a value falls below the minimum value of the axis scale. -1 means the underflowColor is the same color at the minimum value.
</param>
</member>
<member name="M:ChartDirector.ColorAxis.setColorGradient(System.Boolean,System.Int32[],System.Int32,System.Int32)">
<summary>
Sets the continuous color gradient or discrete color steps for the color axis.
</summary>
<param name="isContinuous">
True ti set to continuous color gradient. False to set to discrete color steps.
</param>
<param name="colors">
An array of colors used to define the continuous color gradient. If an empty array is used, the colors are automatically determined.
</param>
<param name="underflowColor">
The color to use if a value falls below the minimum value of the axis scale. -1 means the underflowColor is the same color at the minimum value.
</param>
<param name="overflowColor">
The color to use if a value exceeds the maximum value of the axis scale. -1 means the overflowColor is the same color at the maximum value.
</param>
</member>
<member name="M:ChartDirector.ColorAxis.setColorScale(System.Double[])">
<summary>
Sets the axis scale and the associated colors.
</summary>
<param name="colorStops">
An array of numbers alternating between values and colors. If the number count is even, the array will define a continuous color scale, otherwise it will define a step color scale.
</param>
</member>
<member name="M:ChartDirector.ColorAxis.setColorScale(System.Double[],System.Int32)">
<summary>
Sets the axis scale and the associated colors.
</summary>
<param name="colorStops">
An array of numbers alternating between values and colors. If the number count is even, the array will define a continuous color scale, otherwise it will define a step color scale.
</param>
<param name="underflowColor">
The color to use if a value falls below the minimum value of the axis scale. -1 means the underflowColor is the same color at the minimum value.
</param>
</member>
<member name="M:ChartDirector.ColorAxis.setColorScale(System.Double[],System.Int32,System.Int32)">
<summary>
Sets the axis scale and the associated colors.
</summary>
<param name="colorStops">
An array of numbers alternating between values and colors. If the number count is even, the array will define a continuous color scale, otherwise it will define a step color scale.
</param>
<param name="underflowColor">
The color to use if a value falls below the minimum value of the axis scale. -1 means the underflowColor is the same color at the minimum value.
</param>
<param name="overflowColor">
The color to use if a value exceeds the maximum value of the axis scale. -1 means the overflowColor is the same color at the maximum value.
</param>
</member>
<member name="M:ChartDirector.ColorAxis.setLevels(System.Int32)">
<summary>
Sets the maximum number of contour intervals on the axis.
</summary>
<param name="maxLevels">
An integer representing the maximum number of contour intervals.
</param>
</member>
<member name="M:ChartDirector.ColorAxis.setCompactAxis">
<summary>
Sets whether to compact the axis or not.
</summary>
</member>
<member name="M:ChartDirector.ColorAxis.setCompactAxis(System.Boolean)">
<summary>
Sets whether to compact the axis or not.
</summary>
<param name="b">
A true value means to compact the axis. A false value means not to compact the axis.
</param>
</member>
<member name="M:ChartDirector.ColorAxis.setAxisBorder(System.Int32)">
<summary>
Sets the border color and 3D border effect of the axis stem.
</summary>
<param name="edgeColor">
The edge color of the axis stem.
</param>
</member>
<member name="M:ChartDirector.ColorAxis.setAxisBorder(System.Int32,System.Int32)">
<summary>
Sets the border color and 3D border effect of the axis stem.
</summary>
<param name="edgeColor">
The edge color of the axis stem.
</param>
<param name="raisedEffect">
The 3D border width. For positive values, the border will appear raised. For negative values, the border will appear depressed. A zero value means the border will appear flat. This argument can also be used to specify "Chart.glassEffect", "Chart.softLighting", "Chart.cylinderEffect" or "Chart.flatBorder" effects.
</param>
</member>
<member name="M:ChartDirector.ColorAxis.setBoundingBox(System.Int32)">
<summary>
Sets the background color, border color and 3D border effect of the bounding box.
</summary>
<param name="fillColor">
The background color of the bounding box.
</param>
</member>
<member name="M:ChartDirector.ColorAxis.setBoundingBox(System.Int32,System.Int32)">
<summary>
Sets the background color, border color and 3D border effect of the bounding box.
</summary>
<param name="fillColor">
The background color of the bounding box.
</param>
<param name="edgeColor">
The border color of the bounding box.
</param>
</member>
<member name="M:ChartDirector.ColorAxis.setBoundingBox(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the background color, border color and 3D border effect of the bounding box.
</summary>
<param name="fillColor">
The background color of the bounding box.
</param>
<param name="edgeColor">
The border color of the bounding box.
</param>
<param name="raisedEffect">
The 3D border width. For positive values, the border will appear raised. For negative values, the border will appear depressed. A zero value means the border will appear flat. This argument can also be used to specify "Chart.glassEffect", "Chart.softLighting", "Chart.cylinderEffect" or "Chart.flatBorder" effects.
</param>
</member>
<member name="M:ChartDirector.ColorAxis.setBoxMargin(System.Int32)">
<summary>
Sets all margins (left, right, top, and bottom) of the bounding box to the same value.
</summary>
<param name="m">
The left, right, top and bottom margins in pixels.
</param>
</member>
<member name="M:ChartDirector.ColorAxis.setBoxMargin(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the margins of the bounding box in pixels.
</summary>
<param name="leftMargin">
The left margin in pixels.
</param>
<param name="rightMargin">
The right margin in pixels.
</param>
<param name="topMargin">
The top margin in pixels.
</param>
<param name="bottomMargin">
The bottom margin in pixels.
</param>
</member>
<member name="M:ChartDirector.ColorAxis.setBoxMargin2(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the margins of the bounding box in pixels.
</summary>
<param name="leftMargin">
The left margin in pixels.
</param>
<param name="rightMargin">
The right margin in pixels.
</param>
<param name="topMargin">
The top margin in pixels.
</param>
<param name="bottomMargin">
The bottom margin in pixels.
</param>
</member>
<member name="M:ChartDirector.ColorAxis.setRoundedCorners">
<summary>
Sets the border style of the bounding box to rounded corners.
</summary>
</member>
<member name="M:ChartDirector.ColorAxis.setRoundedCorners(System.Int32)">
<summary>
Sets the border style of the bounding box to rounded corners.
</summary>
<param name="r1">
The radius of the top-left rounded corner in pixels.
</param>
</member>
<member name="M:ChartDirector.ColorAxis.setRoundedCorners(System.Int32,System.Int32)">
<summary>
Sets the border style of the bounding box to rounded corners.
</summary>
<param name="r1">
The radius of the top-left rounded corner in pixels.
</param>
<param name="r2">
The radius of the top-right rounded corner in pixels. -1 means it is the same as the radius of the top-left corner.
</param>
</member>
<member name="M:ChartDirector.ColorAxis.setRoundedCorners(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the border style of the bounding box to rounded corners.
</summary>
<param name="r1">
The radius of the top-left rounded corner in pixels.
</param>
<param name="r2">
The radius of the top-right rounded corner in pixels. -1 means it is the same as the radius of the top-left corner.
</param>
<param name="r3">
The radius of the bottom-right rounded corner in pixels. -1 means it is the same as the radius of the top-left corner.
</param>
</member>
<member name="M:ChartDirector.ColorAxis.setRoundedCorners(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the border style of the bounding box to rounded corners.
</summary>
<param name="r1">
The radius of the top-left rounded corner in pixels.
</param>
<param name="r2">
The radius of the top-right rounded corner in pixels. -1 means it is the same as the radius of the top-left corner.
</param>
<param name="r3">
The radius of the bottom-right rounded corner in pixels. -1 means it is the same as the radius of the top-left corner.
</param>
<param name="r4">
The radius of the bottom-left rounded corner in pixels. -1 means it is the same as the radius of the top-left corner.
</param>
</member>
<member name="M:ChartDirector.ColorAxis.getBoxWidth">
<summary>
Gets the width of the color axis inclusive of the bounding box.
</summary>
</member>
<member name="M:ChartDirector.ColorAxis.getBoxHeight">
<summary>
Gets the height of the color axis inclusive of the bounding box.
</summary>
</member>
<member name="M:ChartDirector.ColorAxis.getColor(System.Double)">
<summary>
Gets the color given the data value.
</summary>
<param name="z">
The data value.
</param>
</member>
<member name="M:ChartDirector.Mark.setValue(System.Double)">
<summary>
Sets the value of the mark line.
</summary>
<param name="value">
The value of the mark.
</param>
</member>
<member name="M:ChartDirector.Mark.setMarkColor(System.Int32)">
<summary>
Sets the line, text and tick colors of the mark line.
</summary>
<param name="lineColor">
The color of the mark line.
</param>
</member>
<member name="M:ChartDirector.Mark.setMarkColor(System.Int32,System.Int32)">
<summary>
Sets the line, text and tick colors of the mark line.
</summary>
<param name="lineColor">
The color of the mark line.
</param>
<param name="textColor">
The color of the text label that will be shown on the axis. -1 means the text label color is the same as the line color.
</param>
</member>
<member name="M:ChartDirector.Mark.setMarkColor(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the line, text and tick colors of the mark line.
</summary>
<param name="lineColor">
The color of the mark line.
</param>
<param name="textColor">
The color of the text label that will be shown on the axis. -1 means the text label color is the same as the line color.
</param>
<param name="tickColor">
The color of the tick that will be shown on the axis. -1 means the tick color is the same as the line color.
</param>
</member>
<member name="M:ChartDirector.Mark.setLineWidth(System.Int32)">
<summary>
Sets the line width of the mark line.
</summary>
<param name="w">
The mark line width in pixels.
</param>
</member>
<member name="M:ChartDirector.Mark.setDrawOnTop(System.Boolean)">
<summary>
Determine whether the mark line is drawn at the front of the chart layers, or at the back of the plot area (that is, like grid lines).
</summary>
<param name="b">
A true value means drawing the mark line at the front of the chart layers. A false value means drawing the mark line at the back of the plot area.
</param>
</member>
<member name="M:ChartDirector.Mark.getLine">
<summary>
Retrieves an opaque LineObj representing the mark line. The opaque LineObj is to be used in "XYChart.addInterLineLayer" for adding coloring between lines.
</summary>
</member>
<member name="M:ChartDirector.AngularAxis.setLabelStyle">
<summary>
Sets the font style used to for the axis labels.
</summary>
</member>
<member name="M:ChartDirector.AngularAxis.setLabelStyle(System.String)">
<summary>
Sets the font style used to for the axis labels.
</summary>
<param name="font">
The font used to draw the labels.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.setLabelStyle(System.String,System.Double)">
<summary>
Sets the font style used to for the axis labels.
</summary>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels in points.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.setLabelStyle(System.String,System.Double,System.Int32)">
<summary>
Sets the font style used to for the axis labels.
</summary>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels in points.
</param>
<param name="fontColor">
The color used to draw the labels.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.setLabelStyle(System.String,System.Double,System.Int32,System.Double)">
<summary>
Sets the font style used to for the axis labels.
</summary>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels in points.
</param>
<param name="fontColor">
The color used to draw the labels.
</param>
<param name="fontAngle">
The rotation angle of the labels.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.setLabelGap(System.Int32)">
<summary>
Sets the distance between the axis labels and the axis.
</summary>
<param name="d">
The distance between the axis label and axis in pixels.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.setLabels(System.String[])">
<summary>
Sets the text labels to be used on the axis.
</summary>
<param name="text">
An array of strings containing the text of the labels.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.setLabels(System.Double[])">
<summary>
Sets the numeric labels to be used on the axis.
</summary>
<param name="labels">
An array of numbers to be used as the axis labels.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.setLabels(System.Double[],System.String)">
<summary>
Sets the numeric labels to be used on the axis.
</summary>
<param name="labels">
An array of numbers to be used as the axis labels.
</param>
<param name="formatString">
A format string to specified how to format the labels into human readable form. Please refer to "Axis.setLabelFormat" for the syntax of the format string. An empty string means the format will be automatically determined.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.setLabels2(System.Double[])">
<summary>
Sets the numeric labels to be used on the axis.
</summary>
<param name="labels">
An array of numbers to be used as the axis labels.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.setLabels2(System.Double[],System.String)">
<summary>
Sets the numeric labels to be used on the axis.
</summary>
<param name="labels">
An array of numbers to be used as the axis labels.
</param>
<param name="formatString">
A format string to specified how to format the labels into human readable form. Please refer to "Axis.setLabelFormat" for the syntax of the format string. An empty string means the format will be automatically determined.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.addLabel(System.Double,System.String)">
<summary>
Adds an extra label on the axis.
</summary>
<param name="pos">
The position on the axis to add the label.
</param>
<param name="label">
The text label to add.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.setLinearScale(System.Double,System.Double)">
<summary>
Sets the axis to use the given linear scale.
</summary>
<param name="lowerLimit">
The lower bound of the axis.
</param>
<param name="upperLimit">
The upper bound of the axis.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.setLinearScale(System.Double,System.Double,System.Double)">
<summary>
Sets the axis to use the given linear scale.
</summary>
<param name="lowerLimit">
The lower bound of the axis.
</param>
<param name="upperLimit">
The upper bound of the axis.
</param>
<param name="majorTickInc">
Adds major ticks to the axis, where the major ticks are separated by majorTickInc in value. Each major tick will have an associated text label for the value if the axis at the tick. 0 means no major tick is used.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.setLinearScale(System.Double,System.Double,System.Double,System.Double)">
<summary>
Sets the axis to use the given linear scale.
</summary>
<param name="lowerLimit">
The lower bound of the axis.
</param>
<param name="upperLimit">
The upper bound of the axis.
</param>
<param name="majorTickInc">
Adds major ticks to the axis, where the major ticks are separated by majorTickInc in value. Each major tick will have an associated text label for the value if the axis at the tick. 0 means no major tick is used.
</param>
<param name="minorTickInc">
Adds minor ticks to the axis, where the minor ticks are separated by minorTickInc in value. 0 means no minor tick is used.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.setLinearScale(System.Double,System.Double,System.String[])">
<summary>
Sets the axis to use the given linear scale and the given labels.
</summary>
<param name="lowerLimit">
The lower bound of the axis.
</param>
<param name="upperLimit">
The upper bound of the axis.
</param>
<param name="labels">
An array of text strings to be used as the labels on the axis. ChartDirector will distribute the labels evenly on the axis.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.setLinearScale2(System.Double,System.Double,System.String[])">
<summary>
Sets the axis to use the given linear scale and the given labels.
</summary>
<param name="lowerLimit">
The lower bound of the axis.
</param>
<param name="upperLimit">
The upper bound of the axis.
</param>
<param name="labels">
An array of text strings to be used as the labels on the axis. ChartDirector will distribute the labels evenly on the axis.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.addZone(System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
<summary>
Adds an angular zone to the polar chart.
</summary>
<param name="startValue">
The data value that marks the start angular position of the zone.
</param>
<param name="endValue">
The data value that marks the end angular position of the zone.
</param>
<param name="startRadius">
The starting radius of the zone in radial axis scale.
</param>
<param name="endRadius">
The ending radius of the zone in radial axis scale.
</param>
<param name="fillColor">
The fill color of the zone.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.addZone(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds an angular zone to the polar chart.
</summary>
<param name="startValue">
The data value that marks the start angular position of the zone.
</param>
<param name="endValue">
The data value that marks the end angular position of the zone.
</param>
<param name="startRadius">
The starting radius of the zone in radial axis scale.
</param>
<param name="endRadius">
The ending radius of the zone in radial axis scale.
</param>
<param name="fillColor">
The fill color of the zone.
</param>
<param name="edgeColor">
The edge color of the zone. The default is the same as the fill color.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.addZone(System.Double,System.Double,System.Int32)">
<summary>
Adds an angular zone to the polar chart.
</summary>
<param name="startValue">
The data value that marks the start angular position of the zone.
</param>
<param name="endValue">
The data value that marks the end angular position of the zone.
</param>
<param name="fillColor">
The fill color of the zone.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.addZone(System.Double,System.Double,System.Int32,System.Int32)">
<summary>
Adds an angular zone to the polar chart.
</summary>
<param name="startValue">
The data value that marks the start angular position of the zone.
</param>
<param name="endValue">
The data value that marks the end angular position of the zone.
</param>
<param name="fillColor">
The fill color of the zone.
</param>
<param name="edgeColor">
The edge color of the zone. The default is the same as the fill color.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.addZone2(System.Double,System.Double,System.Int32)">
<summary>
Adds an angular zone to the polar chart.
</summary>
<param name="startValue">
The data value that marks the start angular position of the zone.
</param>
<param name="endValue">
The data value that marks the end angular position of the zone.
</param>
<param name="fillColor">
The fill color of the zone.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.addZone2(System.Double,System.Double,System.Int32,System.Int32)">
<summary>
Adds an angular zone to the polar chart.
</summary>
<param name="startValue">
The data value that marks the start angular position of the zone.
</param>
<param name="endValue">
The data value that marks the end angular position of the zone.
</param>
<param name="fillColor">
The fill color of the zone.
</param>
<param name="edgeColor">
The edge color of the zone. The default is the same as the fill color.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.getHTMLImageMap(System.String)">
<summary>
Generates an HTML image map for the axis labels.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.getHTMLImageMap(System.String,System.String)">
<summary>
Generates an HTML image map for the axis labels.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.getHTMLImageMap(System.String,System.String,System.String)">
<summary>
Generates an HTML image map for the axis labels.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
<param name="extraAttr">
A text string to specify additional attributes to add to the &lt;area&gt; tag. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.getHTMLImageMap(System.String,System.String,System.String,System.Int32,System.Int32)">
<summary>
Generates an HTML image map for the axis labels.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
<param name="extraAttr">
A text string to specify additional attributes to add to the &lt;area&gt; tag. "Parameter Substitution and Formatting" is supported.
</param>
<param name="offsetX">
An offset to be added to all x coordinates in the image map. This is useful if the current image will be shifted and inserted into another image. In this case, the image map will need to be shifted by the same offset.
</param>
<param name="offsetY">
An offset to be added to all y coordinates in the image map. See offsetX above for description.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.getAxisImageMap(System.Int32,System.Int32,System.String)">
<summary>
Generates an HTML image map for the axis itself.
</summary>
<param name="noOfSegments">
The number of segments to divide the axis into.
</param>
<param name="mapWidth">
The width of the axis used for the purpose of generating the image map.
</param>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.getAxisImageMap(System.Int32,System.Int32,System.String,System.String)">
<summary>
Generates an HTML image map for the axis itself.
</summary>
<param name="noOfSegments">
The number of segments to divide the axis into.
</param>
<param name="mapWidth">
The width of the axis used for the purpose of generating the image map.
</param>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.getAxisImageMap(System.Int32,System.Int32,System.String,System.String,System.String)">
<summary>
Generates an HTML image map for the axis itself.
</summary>
<param name="noOfSegments">
The number of segments to divide the axis into.
</param>
<param name="mapWidth">
The width of the axis used for the purpose of generating the image map.
</param>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
<param name="extraAttr">
A text string to specify additional attributes to add to the &lt;area&gt; tag. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.AngularAxis.getAxisImageMap(System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32)">
<summary>
Generates an HTML image map for the axis itself.
</summary>
<param name="noOfSegments">
The number of segments to divide the axis into.
</param>
<param name="mapWidth">
The width of the axis used for the purpose of generating the image map.
</param>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
<param name="extraAttr">
A text string to specify additional attributes to add to the &lt;area&gt; tag. "Parameter Substitution and Formatting" is supported.
</param>
<param name="offsetX">
An offset to be added to all x coordinates in the image map. This is useful if the current image will be shifted and inserted into another image. In this case, the image map will need to be shifted by the same offset.
</param>
<param name="offsetY">
An offset to be added to all y coordinates in the image map. See offsetX above for description.
</param>
</member>
<member name="M:ChartDirector.Layer.set3D">
<summary>
Sets the 3D depth of the layer, and the 3D gap between the current layer and the next layer.
</summary>
</member>
<member name="M:ChartDirector.Layer.set3D(System.Int32)">
<summary>
Sets the 3D depth of the layer, and the 3D gap between the current layer and the next layer.
</summary>
<param name="d">
The 3D depth of the layer in pixels. -1 means the 3D depth is automatically calculated.
</param>
</member>
<member name="M:ChartDirector.Layer.set3D(System.Int32,System.Int32)">
<summary>
Sets the 3D depth of the layer, and the 3D gap between the current layer and the next layer.
</summary>
<param name="d">
The 3D depth of the layer in pixels. -1 means the 3D depth is automatically calculated.
</param>
<param name="zGap">
The 3D gap between the current layer and the next layer in pixels.
</param>
</member>
<member name="M:ChartDirector.Layer.setLineWidth(System.Int32)">
<summary>
Sets the default line width of lines when drawing data sets on the layer.
</summary>
<param name="w">
The width of the line in pixels.
</param>
</member>
<member name="M:ChartDirector.Layer.setBorderColor(System.Int32)">
<summary>
Sets the default border color and lighting effect for the data representation.
</summary>
<param name="color">
The border color.
</param>
</member>
<member name="M:ChartDirector.Layer.setBorderColor(System.Int32,System.Int32)">
<summary>
Sets the default border color and lighting effect for the data representation.
</summary>
<param name="color">
The border color.
</param>
<param name="lightingEffect">
Specifies the 3D bevel or border width, flat border effect, or other special shading effects as described in the above table.
</param>
</member>
<member name="M:ChartDirector.Layer.setLegendOrder(System.Int32)">
<summary>
Sets the order of the data set names as appeared in the legend box.
</summary>
<param name="dataSetOrder">
One of the predefined constants representing the legend entry ordering method for data sets within the layer.
</param>
</member>
<member name="M:ChartDirector.Layer.setLegendOrder(System.Int32,System.Int32)">
<summary>
Sets the order of the data set names as appeared in the legend box.
</summary>
<param name="dataSetOrder">
One of the predefined constants representing the legend entry ordering method for data sets within the layer.
</param>
<param name="layerOrder">
The base legend entry priority of the layer. -1 means the priority is 10000 x (layer_index + 1).
</param>
</member>
<member name="M:ChartDirector.Layer.setLegend(System.Int32)">
<summary>
Sets the order of the data set names as appeared in the legend box.
</summary>
<param name="m">
One of the predefined constants representing the legend entry ordering method for data sets within the layer.
</param>
</member>
<member name="M:ChartDirector.Layer.getLegendIcon(System.Int32)">
<summary>
Gets the CDML representation of the legend icon for a data set.
</summary>
<param name="dataSetNo">
The index of the data set. The index of the first data set added to the layer is 0. The index of the Nth data set added to the layer is N - 1.
</param>
</member>
<member name="M:ChartDirector.Layer.setDataCombineMethod(System.Int32)">
<summary>
Sets the method used to combine multiple data sets in a layer.
</summary>
<param name="m">
one of the predefined constants representing the data combine method to use.
</param>
</member>
<member name="M:ChartDirector.Layer.addDataSet(System.Double[])">
<summary>
Adds a data set to the chart layer.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
</member>
<member name="M:ChartDirector.Layer.addDataSet(System.Double[],System.Int32)">
<summary>
Adds a data set to the chart layer.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="color">
The color to draw the data item. -1 means that the color is automatically selected from the palette.
</param>
</member>
<member name="M:ChartDirector.Layer.addDataSet(System.Double[],System.Int32,System.String)">
<summary>
Adds a data set to the chart layer.
</summary>
<param name="data">
An array of numbers representing the data set.
</param>
<param name="color">
The color to draw the data item. -1 means that the color is automatically selected from the palette.
</param>
<param name="name">
The name of the data set. The name will be used in the legend box, if one is available. An empty string means the data set has no name.
</param>
</member>
<member name="M:ChartDirector.Layer.getDataSet(System.Int32)">
<summary>
Gets a "DataSet" object based on the order in which it is being added to the chart.
</summary>
<param name="dataSetNo">
The index of the data set. The index of the first data set added to the layer is 0. The index of the Nth data set added to the layer is N - 1.
</param>
</member>
<member name="M:ChartDirector.Layer.getDataSetByZ(System.Int32)">
<summary>
Gets a "DataSet" object based on the order in which it is being drawn.
</summary>
<param name="zIndex">
The z-index of the required data set. The z-index of the first data set drawn is 0. The z-index for the Nth data set drawn is N - 1.
</param>
</member>
<member name="M:ChartDirector.Layer.getDataSetCount">
<summary>
Gets the number of data sets in the layer.
</summary>
</member>
<member name="M:ChartDirector.Layer.addDataGroup">
<summary>
Open a new data group.
</summary>
</member>
<member name="M:ChartDirector.Layer.addDataGroup(System.String)">
<summary>
Open a new data group.
</summary>
<param name="name">
Name of the data group.
</param>
</member>
<member name="M:ChartDirector.Layer.addExtraField(System.String[])">
<summary>
Adds an array of text to be used as an extra field in various places.
</summary>
<param name="texts">
An array of text to be stored inside the layer object.
</param>
</member>
<member name="M:ChartDirector.Layer.addExtraField(System.Double[])">
<summary>
Adds an array of numbers/dates to be used as an extra field in various places.
</summary>
<param name="numbers">
An array of numbers/dates to be stored inside the layer object.
</param>
</member>
<member name="M:ChartDirector.Layer.addExtraField2(System.Double[])">
<summary>
Adds an array of numbers/dates to be used as an extra field in various places.
</summary>
<param name="numbers">
An array of numbers/dates to be stored inside the layer object.
</param>
</member>
<member name="M:ChartDirector.Layer.addExtraField(System.DateTime[])">
<summary>
Adds an array of numbers/dates to be used as an extra field in various places.
</summary>
<param name="numbers">
An array of numbers/dates to be stored inside the layer object.
</param>
</member>
<member name="M:ChartDirector.Layer.addExtraField2(System.DateTime[])">
<summary>
Adds an array of numbers/dates to be used as an extra field in various places.
</summary>
<param name="numbers">
An array of numbers/dates to be stored inside the layer object.
</param>
</member>
<member name="M:ChartDirector.Layer.setUseYAxis(ChartDirector.Axis)">
<summary>
Determine the y-axis to use when drawing the data sets.
</summary>
<param name="a">
The y-axis to use when drawing the data sets.
</param>
</member>
<member name="M:ChartDirector.Layer.setUseYAxis">
<summary>
Determine if the primary or secondary y-axis should be used when drawing the data sets.
</summary>
</member>
<member name="M:ChartDirector.Layer.setUseYAxis(System.Boolean)">
<summary>
Determine if the primary or secondary y-axis should be used when drawing the data sets.
</summary>
<param name="b">
A true value means the secondary y-axis will be used. A false value means the primary y-axis will be used.
</param>
</member>
<member name="M:ChartDirector.Layer.setUseYAxis2">
<summary>
Determine if the primary or secondary y-axis should be used when drawing the data sets.
</summary>
</member>
<member name="M:ChartDirector.Layer.setUseYAxis2(System.Boolean)">
<summary>
Determine if the primary or secondary y-axis should be used when drawing the data sets.
</summary>
<param name="b">
A true value means the secondary y-axis will be used. A false value means the primary y-axis will be used.
</param>
</member>
<member name="M:ChartDirector.Layer.setXData(System.Double[])">
<summary>
Sets the x values of the data points in the data sets.
</summary>
<param name="xData">
An array of numbers representing the x value series.
</param>
</member>
<member name="M:ChartDirector.Layer.setXData(System.DateTime[])">
<summary>
Sets the x values of the data points in the data sets.
</summary>
<param name="xData">
An array of numbers representing the x value series.
</param>
</member>
<member name="M:ChartDirector.Layer.setXData(System.Double,System.Double)">
<summary>
Sets the x values of the data points in the data sets as evenly distributed in a range.
</summary>
<param name="minValue">
The x value of the first point in a data set.
</param>
<param name="maxValue">
The x value of the last point in the data set.
</param>
</member>
<member name="M:ChartDirector.Layer.setXData2(System.Double,System.Double)">
<summary>
Sets the x values of the data points in the data sets as evenly distributed in a range.
</summary>
<param name="minValue">
The x value of the first point in a data set.
</param>
<param name="maxValue">
The x value of the last point in the data set.
</param>
</member>
<member name="M:ChartDirector.Layer.setXData(System.DateTime,System.DateTime)">
<summary>
Sets the x values of the data points in the data sets as evenly distributed in a range.
</summary>
<param name="minValue">
The x value of the first point in a data set.
</param>
<param name="maxValue">
The x value of the last point in the data set.
</param>
</member>
<member name="M:ChartDirector.Layer.setXData2(System.DateTime,System.DateTime)">
<summary>
Sets the x values of the data points in the data sets as evenly distributed in a range.
</summary>
<param name="minValue">
The x value of the first point in a data set.
</param>
<param name="maxValue">
The x value of the last point in the data set.
</param>
</member>
<member name="M:ChartDirector.Layer.setBaseLine(System.Double)">
<summary>
Sets the baseline for the data representation.
</summary>
<param name="baseLine">
The value of the base line.
</param>
</member>
<member name="M:ChartDirector.Layer.alignLayer(ChartDirector.Layer,System.Int32)">
<summary>
Aligns the layer with a data set of another bar chart layer in "Side" layout.
</summary>
<param name="layer">
The "BarLayer" which contains the bars to synchronize with.
</param>
<param name="dataSet">
The data set of the bars to synchronize with.
</param>
</member>
<member name="M:ChartDirector.Layer.getXCoor(System.Double)">
<summary>
Gets the x pixel coordinate given the x data value.
</summary>
<param name="v">
The x data value.
</param>
</member>
<member name="M:ChartDirector.Layer.getYCoor(System.Double)">
<summary>
Gets the y pixel coordinate given the y data value.
</summary>
<param name="v">
The y data value.
</param>
</member>
<member name="M:ChartDirector.Layer.getYCoor(System.Double,ChartDirector.Axis)">
<summary>
Gets the y pixel coordinate given the y data value.
</summary>
<param name="v">
The y data value.
</param>
<param name="yAxis">
The y-axis to use to determine the pixel coordinates of data values. The y-axis may be obtained using "XYChart.yAxis", "XYChart.yAxis2" or "XYChart.addAxis". The default is to use the primary y-axis.
</param>
</member>
<member name="M:ChartDirector.Layer.getNearestXValue(System.Double)">
<summary>
Gets the x data value that is nearest to the specified x pixel coordinate.
</summary>
<param name="xCoor">
The x pixel coordinate to search for.
</param>
</member>
<member name="M:ChartDirector.Layer.getXIndexOf(System.Double)">
<summary>
Gets the data point index at the specified x data value.
</summary>
<param name="xValue">
The x data value used to look for the data points in order to get the data point index of the nearest data point.
</param>
</member>
<member name="M:ChartDirector.Layer.getXIndexOf(System.Double,System.Double)">
<summary>
Gets the data point index at the specified x data value.
</summary>
<param name="xValue">
The x data value used to look for the data points in order to get the data point index of the nearest data point.
</param>
<param name="tolerance">
The tolerance allowed for for data points that are not exactly at the specified xValue.
</param>
</member>
<member name="M:ChartDirector.Layer.getXPosition(System.Int32)">
<summary>
Gets the x positional value of a data point, as measured on the primary x-axis.
</summary>
<param name="i">
The data point index of the data point. The first data point is 0; the nth data point is (n - 1).
</param>
</member>
<member name="M:ChartDirector.Layer.xZoneColor(System.Double,System.Int32,System.Int32)">
<summary>
Creates an x-zone color. An x-zone will change from one color to another depending on a threshold value on the x-axis.
</summary>
<param name="threshold">
The x value serving as the threshold for switching between two colors.
</param>
<param name="belowColor">
The color to use when the x-axis value of the pixel is smaller than the threshold.
</param>
<param name="aboveColor">
The color to use when the x-axis value of the pixel is greater than the threshold.
</param>
</member>
<member name="M:ChartDirector.Layer.yZoneColor(System.Double,System.Int32,System.Int32)">
<summary>
Creates a y-zone color. A y-zone will change from one color to another depending on a threshold value on the y-axis.
</summary>
<param name="threshold">
The y value serving as the threshold for switching between two colors.
</param>
<param name="belowColor">
The color to use when the y-axis value of the pixel is smaller than the threshold.
</param>
<param name="aboveColor">
The color to use when the y-axis value of the pixel is greater than the threshold.
</param>
</member>
<member name="M:ChartDirector.Layer.yZoneColor(System.Double,System.Int32,System.Int32,ChartDirector.Axis)">
<summary>
Creates a y-zone color. A y-zone will change from one color to another depending on a threshold value on the y-axis.
</summary>
<param name="threshold">
The y value serving as the threshold for switching between two colors.
</param>
<param name="belowColor">
The color to use when the y-axis value of the pixel is smaller than the threshold.
</param>
<param name="aboveColor">
The color to use when the y-axis value of the pixel is greater than the threshold.
</param>
<param name="yAxis">
The y-axis to use to determine the pixel coordinates of data values. The y-axis may be obtained using "XYChart.yAxis", "XYChart.yAxis2" or "XYChart.addAxis". The default is to use the primary y-axis.
</param>
</member>
<member name="M:ChartDirector.Layer.setDataLabelStyle">
<summary>
Enables data labels and sets their styles.
</summary>
</member>
<member name="M:ChartDirector.Layer.setDataLabelStyle(System.String)">
<summary>
Enables data labels and sets their styles.
</summary>
<param name="font">
The font used to draw the labels.
</param>
</member>
<member name="M:ChartDirector.Layer.setDataLabelStyle(System.String,System.Double)">
<summary>
Enables data labels and sets their styles.
</summary>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels.
</param>
</member>
<member name="M:ChartDirector.Layer.setDataLabelStyle(System.String,System.Double,System.Int32)">
<summary>
Enables data labels and sets their styles.
</summary>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels.
</param>
<param name="fontColor">
The color used to draw the labels.
</param>
</member>
<member name="M:ChartDirector.Layer.setDataLabelStyle(System.String,System.Double,System.Int32,System.Double)">
<summary>
Enables data labels and sets their styles.
</summary>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels.
</param>
<param name="fontColor">
The color used to draw the labels.
</param>
<param name="fontAngle">
The rotation angle of the labels.
</param>
</member>
<member name="M:ChartDirector.Layer.setDataLabelFormat(System.String)">
<summary>
Sets the data label format.
</summary>
<param name="formatString">
The format string.
</param>
</member>
<member name="M:ChartDirector.Layer.addCustomDataLabel(System.Int32,System.Int32,System.String)">
<summary>
Adds a custom data label to a data point.
</summary>
<param name="dataSet">
The data set index of the data point. The first data set is 0; the nth data set is (n - 1).
</param>
<param name="dataItem">
The data point index of the data point. The first data point is 0; the nth data point is (n - 1).
</param>
<param name="label">
A text string representing the data label. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.Layer.addCustomDataLabel(System.Int32,System.Int32,System.String,System.String)">
<summary>
Adds a custom data label to a data point.
</summary>
<param name="dataSet">
The data set index of the data point. The first data set is 0; the nth data set is (n - 1).
</param>
<param name="dataItem">
The data point index of the data point. The first data point is 0; the nth data point is (n - 1).
</param>
<param name="label">
A text string representing the data label. "Parameter Substitution and Formatting" is supported.
</param>
<param name="font">
The font used to draw the label.
</param>
</member>
<member name="M:ChartDirector.Layer.addCustomDataLabel(System.Int32,System.Int32,System.String,System.String,System.Double)">
<summary>
Adds a custom data label to a data point.
</summary>
<param name="dataSet">
The data set index of the data point. The first data set is 0; the nth data set is (n - 1).
</param>
<param name="dataItem">
The data point index of the data point. The first data point is 0; the nth data point is (n - 1).
</param>
<param name="label">
A text string representing the data label. "Parameter Substitution and Formatting" is supported.
</param>
<param name="font">
The font used to draw the label.
</param>
<param name="fontSize">
The font size used to draw the label.
</param>
</member>
<member name="M:ChartDirector.Layer.addCustomDataLabel(System.Int32,System.Int32,System.String,System.String,System.Double,System.Int32)">
<summary>
Adds a custom data label to a data point.
</summary>
<param name="dataSet">
The data set index of the data point. The first data set is 0; the nth data set is (n - 1).
</param>
<param name="dataItem">
The data point index of the data point. The first data point is 0; the nth data point is (n - 1).
</param>
<param name="label">
A text string representing the data label. "Parameter Substitution and Formatting" is supported.
</param>
<param name="font">
The font used to draw the label.
</param>
<param name="fontSize">
The font size used to draw the label.
</param>
<param name="fontColor">
The color used to draw the label.
</param>
</member>
<member name="M:ChartDirector.Layer.addCustomDataLabel(System.Int32,System.Int32,System.String,System.String,System.Double,System.Int32,System.Double)">
<summary>
Adds a custom data label to a data point.
</summary>
<param name="dataSet">
The data set index of the data point. The first data set is 0; the nth data set is (n - 1).
</param>
<param name="dataItem">
The data point index of the data point. The first data point is 0; the nth data point is (n - 1).
</param>
<param name="label">
A text string representing the data label. "Parameter Substitution and Formatting" is supported.
</param>
<param name="font">
The font used to draw the label.
</param>
<param name="fontSize">
The font size used to draw the label.
</param>
<param name="fontColor">
The color used to draw the label.
</param>
<param name="fontAngle">
The rotation angle of the label.
</param>
</member>
<member name="M:ChartDirector.Layer.setAggregateLabelStyle">
<summary>
Enables aggregate labels and sets their styles.
</summary>
</member>
<member name="M:ChartDirector.Layer.setAggregateLabelStyle(System.String)">
<summary>
Enables aggregate labels and sets their styles.
</summary>
<param name="font">
The font used to draw the labels.
</param>
</member>
<member name="M:ChartDirector.Layer.setAggregateLabelStyle(System.String,System.Double)">
<summary>
Enables aggregate labels and sets their styles.
</summary>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels.
</param>
</member>
<member name="M:ChartDirector.Layer.setAggregateLabelStyle(System.String,System.Double,System.Int32)">
<summary>
Enables aggregate labels and sets their styles.
</summary>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels.
</param>
<param name="fontColor">
The color used to draw the labels.
</param>
</member>
<member name="M:ChartDirector.Layer.setAggregateLabelStyle(System.String,System.Double,System.Int32,System.Double)">
<summary>
Enables aggregate labels and sets their styles.
</summary>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels.
</param>
<param name="fontColor">
The color used to draw the labels.
</param>
<param name="fontAngle">
The rotation angle of the labels.
</param>
</member>
<member name="M:ChartDirector.Layer.setAggregateLabelFormat(System.String)">
<summary>
Sets the aggregate label format.
</summary>
<param name="formatString">
The format string.
</param>
</member>
<member name="M:ChartDirector.Layer.addCustomAggregateLabel(System.Int32,System.String)">
<summary>
Adds a custom aggregate label to an aggregated object.
</summary>
<param name="dataItem">
The index of the aggregated object. The first aggregated object is 0, while the nth aggregated object is (n - 1).
</param>
<param name="label">
A text string representing the custom aggregate label. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.Layer.addCustomAggregateLabel(System.Int32,System.String,System.String)">
<summary>
Adds a custom aggregate label to an aggregated object.
</summary>
<param name="dataItem">
The index of the aggregated object. The first aggregated object is 0, while the nth aggregated object is (n - 1).
</param>
<param name="label">
A text string representing the custom aggregate label. "Parameter Substitution and Formatting" is supported.
</param>
<param name="font">
The font used to draw the labels.
</param>
</member>
<member name="M:ChartDirector.Layer.addCustomAggregateLabel(System.Int32,System.String,System.String,System.Double)">
<summary>
Adds a custom aggregate label to an aggregated object.
</summary>
<param name="dataItem">
The index of the aggregated object. The first aggregated object is 0, while the nth aggregated object is (n - 1).
</param>
<param name="label">
A text string representing the custom aggregate label. "Parameter Substitution and Formatting" is supported.
</param>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels.
</param>
</member>
<member name="M:ChartDirector.Layer.addCustomAggregateLabel(System.Int32,System.String,System.String,System.Double,System.Int32)">
<summary>
Adds a custom aggregate label to an aggregated object.
</summary>
<param name="dataItem">
The index of the aggregated object. The first aggregated object is 0, while the nth aggregated object is (n - 1).
</param>
<param name="label">
A text string representing the custom aggregate label. "Parameter Substitution and Formatting" is supported.
</param>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels.
</param>
<param name="fontColor">
The color used to draw the labels.
</param>
</member>
<member name="M:ChartDirector.Layer.addCustomAggregateLabel(System.Int32,System.String,System.String,System.Double,System.Int32,System.Double)">
<summary>
Adds a custom aggregate label to an aggregated object.
</summary>
<param name="dataItem">
The index of the aggregated object. The first aggregated object is 0, while the nth aggregated object is (n - 1).
</param>
<param name="label">
A text string representing the custom aggregate label. "Parameter Substitution and Formatting" is supported.
</param>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels.
</param>
<param name="fontColor">
The color used to draw the labels.
</param>
<param name="fontAngle">
The rotation angle of the labels.
</param>
</member>
<member name="M:ChartDirector.Layer.addCustomGroupLabel(System.Int32,System.Int32,System.String)">
<summary>
Adds a custom data group label to object representing the group.
</summary>
<param name="dataGroup">
The data group index of the data point. The first data group is 0; the nth data group is (n - 1).
</param>
<param name="dataItem">
The data point index of the data point. The first data point is 0; the nth data point is (n - 1).
</param>
<param name="label">
A text string representing the data label. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.Layer.addCustomGroupLabel(System.Int32,System.Int32,System.String,System.String)">
<summary>
Adds a custom data group label to object representing the group.
</summary>
<param name="dataGroup">
The data group index of the data point. The first data group is 0; the nth data group is (n - 1).
</param>
<param name="dataItem">
The data point index of the data point. The first data point is 0; the nth data point is (n - 1).
</param>
<param name="label">
A text string representing the data label. "Parameter Substitution and Formatting" is supported.
</param>
<param name="font">
The font used to draw the label.
</param>
</member>
<member name="M:ChartDirector.Layer.addCustomGroupLabel(System.Int32,System.Int32,System.String,System.String,System.Double)">
<summary>
Adds a custom data group label to object representing the group.
</summary>
<param name="dataGroup">
The data group index of the data point. The first data group is 0; the nth data group is (n - 1).
</param>
<param name="dataItem">
The data point index of the data point. The first data point is 0; the nth data point is (n - 1).
</param>
<param name="label">
A text string representing the data label. "Parameter Substitution and Formatting" is supported.
</param>
<param name="font">
The font used to draw the label.
</param>
<param name="fontSize">
The font size used to draw the label.
</param>
</member>
<member name="M:ChartDirector.Layer.addCustomGroupLabel(System.Int32,System.Int32,System.String,System.String,System.Double,System.Int32)">
<summary>
Adds a custom data group label to object representing the group.
</summary>
<param name="dataGroup">
The data group index of the data point. The first data group is 0; the nth data group is (n - 1).
</param>
<param name="dataItem">
The data point index of the data point. The first data point is 0; the nth data point is (n - 1).
</param>
<param name="label">
A text string representing the data label. "Parameter Substitution and Formatting" is supported.
</param>
<param name="font">
The font used to draw the label.
</param>
<param name="fontSize">
The font size used to draw the label.
</param>
<param name="fontColor">
The color used to draw the label.
</param>
</member>
<member name="M:ChartDirector.Layer.addCustomGroupLabel(System.Int32,System.Int32,System.String,System.String,System.Double,System.Int32,System.Double)">
<summary>
Adds a custom data group label to object representing the group.
</summary>
<param name="dataGroup">
The data group index of the data point. The first data group is 0; the nth data group is (n - 1).
</param>
<param name="dataItem">
The data point index of the data point. The first data point is 0; the nth data point is (n - 1).
</param>
<param name="label">
A text string representing the data label. "Parameter Substitution and Formatting" is supported.
</param>
<param name="font">
The font used to draw the label.
</param>
<param name="fontSize">
The font size used to draw the label.
</param>
<param name="fontColor">
The color used to draw the label.
</param>
<param name="fontAngle">
The rotation angle of the label.
</param>
</member>
<member name="M:ChartDirector.Layer.moveFront">
<summary>
Moves the layer in front of another layer.
</summary>
</member>
<member name="M:ChartDirector.Layer.moveFront(ChartDirector.Layer)">
<summary>
Moves the layer in front of another layer.
</summary>
<param name="layer">
The "Layer" for this layer to move in front of. The default value of null means the layer will be moved in front of all current layers.
</param>
</member>
<member name="M:ChartDirector.Layer.moveBack">
<summary>
Moves the layer behind another layer.
</summary>
</member>
<member name="M:ChartDirector.Layer.moveBack(ChartDirector.Layer)">
<summary>
Moves the layer behind another layer.
</summary>
<param name="layer">
The "Layer" for this layer to move behind. A null object means the layer will be moved behind all current layers.
</param>
</member>
<member name="M:ChartDirector.Layer.getImageCoor(System.Int32,System.Int32)">
<summary>
Gets the image map coordinates of a data point as represented in the layer as HTML image map attributes.
</summary>
<param name="dataSet">
The data set index of the data point. The first data set is 0; the nth data set is (n - 1).
</param>
<param name="dataItem">
The data point index of the data point. The first data point is 0; the nth data point is (n - 1).
</param>
</member>
<member name="M:ChartDirector.Layer.getImageCoor(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Gets the image map coordinates of a data point as represented in the layer as HTML image map attributes.
</summary>
<param name="dataSet">
The data set index of the data point. The first data set is 0; the nth data set is (n - 1).
</param>
<param name="dataItem">
The data point index of the data point. The first data point is 0; the nth data point is (n - 1).
</param>
<param name="offsetX">
An offset to be added to all x coordinates in the image map. This is useful if the current image will be shifted and inserted into another image. In this case, the image map will need to be shifted by the same offset.
</param>
<param name="offsetY">
An offset to be added to all y coordinates in the image map. See offsetX above for description.
</param>
</member>
<member name="M:ChartDirector.Layer.getImageCoor(System.Int32)">
<summary>
Gets the image map coordinates of a region containing all data points at the given x-position as HTML image map attributes.
</summary>
<param name="dataItem">
The x-position of the data points.
</param>
</member>
<member name="M:ChartDirector.Layer.getImageCoor(System.Int32,System.Int32,System.Int32)">
<summary>
Gets the image map coordinates of a region containing all data points at the given x-position as HTML image map attributes.
</summary>
<param name="dataItem">
The x-position of the data points.
</param>
<param name="offsetX">
An offset to be added to all x coordinates in the image map. This is useful if the current image will be shifted and inserted into another image. In this case, the image map will need to be shifted by the same offset.
</param>
<param name="offsetY">
An offset to be added to all y coordinates in the image map. See offsetX above for description.
</param>
</member>
<member name="M:ChartDirector.Layer.getImageCoor2(System.Int32)">
<summary>
Gets the image map coordinates of a region containing all data points at the given x-position as HTML image map attributes.
</summary>
<param name="dataItem">
The x-position of the data points.
</param>
</member>
<member name="M:ChartDirector.Layer.getImageCoor2(System.Int32,System.Int32,System.Int32)">
<summary>
Gets the image map coordinates of a region containing all data points at the given x-position as HTML image map attributes.
</summary>
<param name="dataItem">
The x-position of the data points.
</param>
<param name="offsetX">
An offset to be added to all x coordinates in the image map. This is useful if the current image will be shifted and inserted into another image. In this case, the image map will need to be shifted by the same offset.
</param>
<param name="offsetY">
An offset to be added to all y coordinates in the image map. See offsetX above for description.
</param>
</member>
<member name="M:ChartDirector.Layer.getHTMLImageMap(System.String)">
<summary>
Generates an HTML image map for all data points as represented on the layer.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
</member>
<member name="M:ChartDirector.Layer.getHTMLImageMap(System.String,System.String)">
<summary>
Generates an HTML image map for all data points as represented on the layer.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.Layer.getHTMLImageMap(System.String,System.String,System.String)">
<summary>
Generates an HTML image map for all data points as represented on the layer.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
<param name="extraAttr">
A text string to specify additional attributes to add to the &lt;area&gt; tag. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.Layer.getHTMLImageMap(System.String,System.String,System.String,System.Int32,System.Int32)">
<summary>
Generates an HTML image map for all data points as represented on the layer.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
<param name="extraAttr">
A text string to specify additional attributes to add to the &lt;area&gt; tag. "Parameter Substitution and Formatting" is supported.
</param>
<param name="offsetX">
An offset to be added to all x coordinates in the image map. This is useful if the current image will be shifted and inserted into another image. In this case, the image map will need to be shifted by the same offset.
</param>
<param name="offsetY">
An offset to be added to all y coordinates in the image map. See offsetX above for description.
</param>
</member>
<member name="M:ChartDirector.Layer.setHTMLImageMap(System.String)">
<summary>
Override the default arguments used when generating HTML image map for the layer.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.Layer.setHTMLImageMap(System.String,System.String)">
<summary>
Override the default arguments used when generating HTML image map for the layer.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.Layer.setHTMLImageMap(System.String,System.String,System.String)">
<summary>
Override the default arguments used when generating HTML image map for the layer.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
<param name="extraAttr">
A text string to specify additional attributes to add to the &lt;area&gt; tag. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.BarLayer.setBarGap(System.Double)">
<summary>
Sets the gap between the bars in a bar chart layer.
</summary>
<param name="barGap">
The portion of the space between the bars (or between bar groups for multi-bar layers).
</param>
</member>
<member name="M:ChartDirector.BarLayer.setBarGap(System.Double,System.Double)">
<summary>
Sets the gap between the bars in a bar chart layer.
</summary>
<param name="barGap">
The portion of the space between the bars (or between bar groups for multi-bar layers).
</param>
<param name="subBarGap">
This argument only applies to multi-bar charts. It is the portion of the space between the bars in a bar group.
</param>
</member>
<member name="M:ChartDirector.BarLayer.setBarWidth(System.Int32)">
<summary>
Sets the width of the bars.
</summary>
<param name="barWidth">
The width of the bars (or bar groups for multi-bar layers) in pixels.
</param>
</member>
<member name="M:ChartDirector.BarLayer.setBarWidth(System.Int32,System.Int32)">
<summary>
Sets the width of the bars.
</summary>
<param name="barWidth">
The width of the bars (or bar groups for multi-bar layers) in pixels.
</param>
<param name="subBarWidth">
This argument only applies to multi-bar charts. It is the width of the bars in a bar group in pixels.
</param>
</member>
<member name="M:ChartDirector.BarLayer.setOverlapRatio(System.Double)">
<summary>
Sets overlapping among bars in within a bar group in a multi-bar chart.
</summary>
<param name="overlapRatio">
The overlapping ratio between adjacent bars in a bar group. Should be between 0 to 1.
</param>
</member>
<member name="M:ChartDirector.BarLayer.setOverlapRatio(System.Double,System.Boolean)">
<summary>
Sets overlapping among bars in within a bar group in a multi-bar chart.
</summary>
<param name="overlapRatio">
The overlapping ratio between adjacent bars in a bar group. Should be between 0 to 1.
</param>
<param name="firstOnTop">
If this value is true, the first data set will be on top of the second data during overlapping, and the second data set will be on top of the third data set, and so on. If this value is false, then the overlapping order will be reversed.
</param>
</member>
<member name="M:ChartDirector.BarLayer.setRoundedCorners">
<summary>
Configures rounded corners for rectangular bars.
</summary>
</member>
<member name="M:ChartDirector.BarLayer.setRoundedCorners(System.Int32)">
<summary>
Configures rounded corners for rectangular bars.
</summary>
<param name="r1">
The first radius. See description above on how this radius value is used.
</param>
</member>
<member name="M:ChartDirector.BarLayer.setRoundedCorners(System.Int32,System.Int32)">
<summary>
Configures rounded corners for rectangular bars.
</summary>
<param name="r1">
The first radius. See description above on how this radius value is used.
</param>
<param name="r2">
The second radius. See description above on how this radius value is used.
</param>
</member>
<member name="M:ChartDirector.BarLayer.setRoundedCorners(System.Int32,System.Int32,System.Int32)">
<summary>
Configures rounded corners for rectangular bars.
</summary>
<param name="r1">
The first radius. See description above on how this radius value is used.
</param>
<param name="r2">
The second radius. See description above on how this radius value is used.
</param>
<param name="r3">
The third radius. See description above on how this radius value is used.
</param>
</member>
<member name="M:ChartDirector.BarLayer.setRoundedCorners(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Configures rounded corners for rectangular bars.
</summary>
<param name="r1">
The first radius. See description above on how this radius value is used.
</param>
<param name="r2">
The second radius. See description above on how this radius value is used.
</param>
<param name="r3">
The third radius. See description above on how this radius value is used.
</param>
<param name="r4">
The fourth radius. See description above on how this radius value is used.
</param>
</member>
<member name="M:ChartDirector.BarLayer.setBarShape(System.Int32)">
<summary>
Sets the shape of the bar(s) using built-in shapes.
</summary>
<param name="shape">
The bar shape to use. Please refer to "Shape Specification" on how shapes are specified.
</param>
</member>
<member name="M:ChartDirector.BarLayer.setBarShape(System.Int32,System.Int32)">
<summary>
Sets the shape of the bar(s) using built-in shapes.
</summary>
<param name="shape">
The bar shape to use. Please refer to "Shape Specification" on how shapes are specified.
</param>
<param name="dataGroup">
The index of the data group that the shape applies to. In a multi-stacked bar, the data sets that are stacked up into a single bar forms a data group. In a multi-bar chart, each data set is a data group by itself. -1 means the shape applies to all data groups.
</param>
</member>
<member name="M:ChartDirector.BarLayer.setBarShape(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the shape of the bar(s) using built-in shapes.
</summary>
<param name="shape">
The bar shape to use. Please refer to "Shape Specification" on how shapes are specified.
</param>
<param name="dataGroup">
The index of the data group that the shape applies to. In a multi-stacked bar, the data sets that are stacked up into a single bar forms a data group. In a multi-bar chart, each data set is a data group by itself. -1 means the shape applies to all data groups.
</param>
<param name="dataItem">
The index of the data points that the shape applies to. For example, if set to 3, the shape will only apply to the 4th bar (index starts from 0) in each data series. -1 means the shape applies to all data points.
</param>
</member>
<member name="M:ChartDirector.BarLayer.setBarShape(System.Int32[])">
<summary>
Sets the shape of the bar(s) to a custom shape defined using an array of (x, y) coordinates.
</summary>
<param name="shape">
The bar shape to use. Please refer to "Shape Specification" on how shapes are specified.
</param>
</member>
<member name="M:ChartDirector.BarLayer.setBarShape(System.Int32[],System.Int32)">
<summary>
Sets the shape of the bar(s) to a custom shape defined using an array of (x, y) coordinates.
</summary>
<param name="shape">
The bar shape to use. Please refer to "Shape Specification" on how shapes are specified.
</param>
<param name="dataGroup">
The index of the data group that the shape applies to. In a multi-stacked bar, the data sets that are stacked up into a single bar forms a data group. In a multi-bar chart, each data set is a data group by itself. -1 means the shape applies to all data groups.
</param>
</member>
<member name="M:ChartDirector.BarLayer.setBarShape(System.Int32[],System.Int32,System.Int32)">
<summary>
Sets the shape of the bar(s) to a custom shape defined using an array of (x, y) coordinates.
</summary>
<param name="shape">
The bar shape to use. Please refer to "Shape Specification" on how shapes are specified.
</param>
<param name="dataGroup">
The index of the data group that the shape applies to. In a multi-stacked bar, the data sets that are stacked up into a single bar forms a data group. In a multi-bar chart, each data set is a data group by itself. -1 means the shape applies to all data groups.
</param>
<param name="dataItem">
The index of the data points that the shape applies to. For example, if set to 3, the shape will only apply to the 4th bar (index starts from 0) in each data series. -1 means the shape applies to all data points.
</param>
</member>
<member name="M:ChartDirector.BarLayer.setBarShape2(System.Int32[])">
<summary>
Sets the shape of the bar(s) to a custom shape defined using an array of (x, y) coordinates.
</summary>
<param name="shape">
The bar shape to use. Please refer to "Shape Specification" on how shapes are specified.
</param>
</member>
<member name="M:ChartDirector.BarLayer.setBarShape2(System.Int32[],System.Int32)">
<summary>
Sets the shape of the bar(s) to a custom shape defined using an array of (x, y) coordinates.
</summary>
<param name="shape">
The bar shape to use. Please refer to "Shape Specification" on how shapes are specified.
</param>
<param name="dataGroup">
The index of the data group that the shape applies to. In a multi-stacked bar, the data sets that are stacked up into a single bar forms a data group. In a multi-bar chart, each data set is a data group by itself. -1 means the shape applies to all data groups.
</param>
</member>
<member name="M:ChartDirector.BarLayer.setBarShape2(System.Int32[],System.Int32,System.Int32)">
<summary>
Sets the shape of the bar(s) to a custom shape defined using an array of (x, y) coordinates.
</summary>
<param name="shape">
The bar shape to use. Please refer to "Shape Specification" on how shapes are specified.
</param>
<param name="dataGroup">
The index of the data group that the shape applies to. In a multi-stacked bar, the data sets that are stacked up into a single bar forms a data group. In a multi-bar chart, each data set is a data group by itself. -1 means the shape applies to all data groups.
</param>
<param name="dataItem">
The index of the data points that the shape applies to. For example, if set to 3, the shape will only apply to the 4th bar (index starts from 0) in each data series. -1 means the shape applies to all data points.
</param>
</member>
<member name="M:ChartDirector.BarLayer.setMinLabelSize(System.Int32)">
<summary>
Sets the minimum height (or width for horizontal bars) of the bar segments below which data labels will be hidden.
</summary>
<param name="size">
The minimum length of the bar segments in pixels, below which data labels will be hidden.
</param>
</member>
<member name="M:ChartDirector.BarLayer.setMinImageMapSize(System.Int32)">
<summary>
Sets the minimum height (or width if the x-axis and y-axis are swapped with "XYChart.swapXY") of the hot spots defined by the image map.
</summary>
<param name="size">
The minimum height (or width if the x-axis and y-axis are swapped with "XYChart.swapXY") of the hot spots defined by the image map.
</param>
</member>
<member name="M:ChartDirector.BarLayer.setIconSize(System.Int32)">
<summary>
Sets the size of the icon(s) to be used in legend box.
</summary>
<param name="height">
The height of the icon in pixels.
</param>
</member>
<member name="M:ChartDirector.BarLayer.setIconSize(System.Int32,System.Int32)">
<summary>
Sets the size of the icon(s) to be used in legend box.
</summary>
<param name="height">
The height of the icon in pixels.
</param>
<param name="width">
The width of the icon in pixels. -1 means the width is the same as the height.
</param>
</member>
<member name="M:ChartDirector.LineLayer.setFastLineMode">
<summary>
Enables or disables fast line mode.
</summary>
</member>
<member name="M:ChartDirector.LineLayer.setFastLineMode(System.Boolean)">
<summary>
Enables or disables fast line mode.
</summary>
<param name="b">
A true value enables fast line mode. A false value disables fast line mode.
</param>
</member>
<member name="M:ChartDirector.LineLayer.setSymbolScale(System.Double[])">
<summary>
Sets the size of the symbol for each data point (for creating bubble charts).
</summary>
<param name="zDataX">
The sizes of the symbols at the x-axis direction, expressed using the unit defined by the scaleTypeX argument.
</param>
</member>
<member name="M:ChartDirector.LineLayer.setSymbolScale(System.Double[],System.Int32)">
<summary>
Sets the size of the symbol for each data point (for creating bubble charts).
</summary>
<param name="zDataX">
The sizes of the symbols at the x-axis direction, expressed using the unit defined by the scaleTypeX argument.
</param>
<param name="scaleTypeX">
The unit for zDataX, which must be one of the predefined constants in the table above.
</param>
</member>
<member name="M:ChartDirector.LineLayer.setSymbolScale(System.Double[],System.Int32,System.Double[])">
<summary>
Sets the size of the symbol for each data point (for creating bubble charts).
</summary>
<param name="zDataX">
The sizes of the symbols at the x-axis direction, expressed using the unit defined by the scaleTypeX argument.
</param>
<param name="scaleTypeX">
The unit for zDataX, which must be one of the predefined constants in the table above.
</param>
<param name="zDataY">
The sizes of the symbols at the y-axis direction, expressed using the unit defined by the scaleTypeY argument. An empty array means the sizes at the y-axis direction are the means as the sizes at the x-axis direction.
</param>
</member>
<member name="M:ChartDirector.LineLayer.setSymbolScale(System.Double[],System.Int32,System.Double[],System.Int32)">
<summary>
Sets the size of the symbol for each data point (for creating bubble charts).
</summary>
<param name="zDataX">
The sizes of the symbols at the x-axis direction, expressed using the unit defined by the scaleTypeX argument.
</param>
<param name="scaleTypeX">
The unit for zDataX, which must be one of the predefined constants in the table above.
</param>
<param name="zDataY">
The sizes of the symbols at the y-axis direction, expressed using the unit defined by the scaleTypeY argument. An empty array means the sizes at the y-axis direction are the means as the sizes at the x-axis direction.
</param>
<param name="scaleTypeY">
The unit for zDataY, which must be one of the predefined constants in the table above.
</param>
</member>
<member name="M:ChartDirector.LineLayer.setGapColor(System.Int32)">
<summary>
Sets the color and style of the line used for jumping across "NoValue" data points.
</summary>
<param name="lineColor">
The line color of the line used for jumping across "NoValue" data points
</param>
</member>
<member name="M:ChartDirector.LineLayer.setGapColor(System.Int32,System.Int32)">
<summary>
Sets the color and style of the line used for jumping across "NoValue" data points.
</summary>
<param name="lineColor">
The line color of the line used for jumping across "NoValue" data points
</param>
<param name="lineWidth">
The line width of the line used for jumping across "NoValue" data points. -1 means the width will be the same as the line width of the line for drawing normal data points.
</param>
</member>
<member name="M:ChartDirector.LineLayer.setImageMapWidth(System.Int32)">
<summary>
Sets the effective width of the line used for producing image maps.
</summary>
<param name="width">
The effective width of the line used for producing image maps.
</param>
</member>
<member name="M:ChartDirector.LineLayer.getLine">
<summary>
Retrieves an opaque LineObj representing a line in the line layer. The opaque LineObj is to be used in "XYChart.addInterLineLayer" for adding coloring between lines.
</summary>
</member>
<member name="M:ChartDirector.LineLayer.getLine(System.Int32)">
<summary>
Retrieves an opaque LineObj representing a line in the line layer. The opaque LineObj is to be used in "XYChart.addInterLineLayer" for adding coloring between lines.
</summary>
<param name="dataSet">
The data set number for the line. The first data set is 0. The nth data set is (n - 1).
</param>
</member>
<member name="M:ChartDirector.SplineLayer.setMonotonicity(System.Int32)">
<summary>
Sets the monotonicity constraint when computing the spline curve.
</summary>
<param name="monotonicMode">
The monotonic constraint of the spline curve. Must be be one of the constants in the above table. If this method is never called for a spline layer, the default is MonotonicAuto.
</param>
</member>
<member name="M:ChartDirector.SplineLayer.setTension(System.Double)">
<summary>
Sets the tension to use when computing the spline curve.
</summary>
<param name="tension">
The tension of the spline, which should be between -1 and 1.
</param>
</member>
<member name="M:ChartDirector.StepLineLayer.setAlignment(System.Int32)">
<summary>
Sets the alignment of the steps relative to the data points.
</summary>
<param name="a">
The alignment of the steps relative to the data points. Must be one of the predefined constants "Left", "Center" or "Right".
</param>
</member>
<member name="M:ChartDirector.InterLineLayer.setGapColor(System.Int32)">
<summary>
Sets the color used to fill the area under "NoValue" data points.
</summary>
<param name="gapColor12">
The color used to fill the region under "NoValue" positions when value of the first line is greater of the value of the second line.
</param>
</member>
<member name="M:ChartDirector.InterLineLayer.setGapColor(System.Int32,System.Int32)">
<summary>
Sets the color used to fill the area under "NoValue" data points.
</summary>
<param name="gapColor12">
The color used to fill the region under "NoValue" positions when value of the first line is greater of the value of the second line.
</param>
<param name="gapColor21">
The color used to fill the region under "NoValue" positions when value of the second line is greater of the value of the first line. -1 means it is the same as gapColor12.
</param>
</member>
<member name="M:ChartDirector.TrendLayer.setRegressionType(System.Int32)">
<summary>
Sets the regression type to be used.
</summary>
<param name="regressionType">
Must be one of the constants "LinearRegression", "ConstrainedLinearRegression", "ExponentialRegression" and "LogarithmicRegression", or the return value of "Chart.PolynomialRegression". They represent linear regression, constrained linear regression, exponential regression, logarithmic regression, and polynomial regression of configurable degree.
</param>
</member>
<member name="M:ChartDirector.TrendLayer.addConfidenceBand(System.Double,System.Int32)">
<summary>
Adds a confidence band to the trend layer.
</summary>
<param name="confidence">
The confidence level - must be between 0 - 1.
</param>
<param name="upperFillColor">
The fill color for the upper side of the confidence band (the portion that is above the regression line).
</param>
</member>
<member name="M:ChartDirector.TrendLayer.addConfidenceBand(System.Double,System.Int32,System.Int32)">
<summary>
Adds a confidence band to the trend layer.
</summary>
<param name="confidence">
The confidence level - must be between 0 - 1.
</param>
<param name="upperFillColor">
The fill color for the upper side of the confidence band (the portion that is above the regression line).
</param>
<param name="upperEdgeColor">
The border color for the upper side of the confidence band (the portion that is above the regression line).
</param>
</member>
<member name="M:ChartDirector.TrendLayer.addConfidenceBand(System.Double,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a confidence band to the trend layer.
</summary>
<param name="confidence">
The confidence level - must be between 0 - 1.
</param>
<param name="upperFillColor">
The fill color for the upper side of the confidence band (the portion that is above the regression line).
</param>
<param name="upperEdgeColor">
The border color for the upper side of the confidence band (the portion that is above the regression line).
</param>
<param name="upperLineWidth">
The border width for the upper side of the confidence band (the portion that is above the regression line).
</param>
</member>
<member name="M:ChartDirector.TrendLayer.addConfidenceBand(System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a confidence band to the trend layer.
</summary>
<param name="confidence">
The confidence level - must be between 0 - 1.
</param>
<param name="upperFillColor">
The fill color for the upper side of the confidence band (the portion that is above the regression line).
</param>
<param name="upperEdgeColor">
The border color for the upper side of the confidence band (the portion that is above the regression line).
</param>
<param name="upperLineWidth">
The border width for the upper side of the confidence band (the portion that is above the regression line).
</param>
<param name="lowerFillColor">
The fill color for the lower side of the confidence band (the portion that is below the regression line). -1 means the color is the same as upperFillColor.
</param>
</member>
<member name="M:ChartDirector.TrendLayer.addConfidenceBand(System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a confidence band to the trend layer.
</summary>
<param name="confidence">
The confidence level - must be between 0 - 1.
</param>
<param name="upperFillColor">
The fill color for the upper side of the confidence band (the portion that is above the regression line).
</param>
<param name="upperEdgeColor">
The border color for the upper side of the confidence band (the portion that is above the regression line).
</param>
<param name="upperLineWidth">
The border width for the upper side of the confidence band (the portion that is above the regression line).
</param>
<param name="lowerFillColor">
The fill color for the lower side of the confidence band (the portion that is below the regression line). -1 means the color is the same as upperFillColor.
</param>
<param name="lowerEdgeColor">
The border color for the lower side of the confidence band (the portion that is below the regression line). -1 means the color is the same as upperEdgeColor.
</param>
</member>
<member name="M:ChartDirector.TrendLayer.addConfidenceBand(System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a confidence band to the trend layer.
</summary>
<param name="confidence">
The confidence level - must be between 0 - 1.
</param>
<param name="upperFillColor">
The fill color for the upper side of the confidence band (the portion that is above the regression line).
</param>
<param name="upperEdgeColor">
The border color for the upper side of the confidence band (the portion that is above the regression line).
</param>
<param name="upperLineWidth">
The border width for the upper side of the confidence band (the portion that is above the regression line).
</param>
<param name="lowerFillColor">
The fill color for the lower side of the confidence band (the portion that is below the regression line). -1 means the color is the same as upperFillColor.
</param>
<param name="lowerEdgeColor">
The border color for the lower side of the confidence band (the portion that is below the regression line). -1 means the color is the same as upperEdgeColor.
</param>
<param name="lowerLineWidth">
The border width for the lower side of the confidence band (the portion that is below the regression line). -1 means the color is the same as upperLineWidth.
</param>
</member>
<member name="M:ChartDirector.TrendLayer.addPredictionBand(System.Double,System.Int32)">
<summary>
Adds a prediction band to the trend layer.
</summary>
<param name="confidence">
The confidence level - must be between 0 - 1.
</param>
<param name="upperFillColor">
The fill color for the upper side of the prediction band (the portion that is above the regression line).
</param>
</member>
<member name="M:ChartDirector.TrendLayer.addPredictionBand(System.Double,System.Int32,System.Int32)">
<summary>
Adds a prediction band to the trend layer.
</summary>
<param name="confidence">
The confidence level - must be between 0 - 1.
</param>
<param name="upperFillColor">
The fill color for the upper side of the prediction band (the portion that is above the regression line).
</param>
<param name="upperEdgeColor">
The border color for the upper side of the prediction band (the portion that is above the regression line).
</param>
</member>
<member name="M:ChartDirector.TrendLayer.addPredictionBand(System.Double,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a prediction band to the trend layer.
</summary>
<param name="confidence">
The confidence level - must be between 0 - 1.
</param>
<param name="upperFillColor">
The fill color for the upper side of the prediction band (the portion that is above the regression line).
</param>
<param name="upperEdgeColor">
The border color for the upper side of the prediction band (the portion that is above the regression line).
</param>
<param name="upperLineWidth">
The border width for the upper side of the prediction band (the portion that is above the regression line).
</param>
</member>
<member name="M:ChartDirector.TrendLayer.addPredictionBand(System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a prediction band to the trend layer.
</summary>
<param name="confidence">
The confidence level - must be between 0 - 1.
</param>
<param name="upperFillColor">
The fill color for the upper side of the prediction band (the portion that is above the regression line).
</param>
<param name="upperEdgeColor">
The border color for the upper side of the prediction band (the portion that is above the regression line).
</param>
<param name="upperLineWidth">
The border width for the upper side of the prediction band (the portion that is above the regression line).
</param>
<param name="lowerFillColor">
The fill color for the lower side of the prediction band (the portion that is below the regression line). -1 means the color is the same as upperFillColor.
</param>
</member>
<member name="M:ChartDirector.TrendLayer.addPredictionBand(System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a prediction band to the trend layer.
</summary>
<param name="confidence">
The confidence level - must be between 0 - 1.
</param>
<param name="upperFillColor">
The fill color for the upper side of the prediction band (the portion that is above the regression line).
</param>
<param name="upperEdgeColor">
The border color for the upper side of the prediction band (the portion that is above the regression line).
</param>
<param name="upperLineWidth">
The border width for the upper side of the prediction band (the portion that is above the regression line).
</param>
<param name="lowerFillColor">
The fill color for the lower side of the prediction band (the portion that is below the regression line). -1 means the color is the same as upperFillColor.
</param>
<param name="lowerEdgeColor">
The border color for the lower side of the prediction band (the portion that is below the regression line). -1 means the color is the same as upperEdgeColor.
</param>
</member>
<member name="M:ChartDirector.TrendLayer.addPredictionBand(System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a prediction band to the trend layer.
</summary>
<param name="confidence">
The confidence level - must be between 0 - 1.
</param>
<param name="upperFillColor">
The fill color for the upper side of the prediction band (the portion that is above the regression line).
</param>
<param name="upperEdgeColor">
The border color for the upper side of the prediction band (the portion that is above the regression line).
</param>
<param name="upperLineWidth">
The border width for the upper side of the prediction band (the portion that is above the regression line).
</param>
<param name="lowerFillColor">
The fill color for the lower side of the prediction band (the portion that is below the regression line). -1 means the color is the same as upperFillColor.
</param>
<param name="lowerEdgeColor">
The border color for the lower side of the prediction band (the portion that is below the regression line). -1 means the color is the same as upperEdgeColor.
</param>
<param name="lowerLineWidth">
The border width for the lower side of the prediction band (the portion that is below the regression line). -1 means the color is the same as upperLineWidth.
</param>
</member>
<member name="M:ChartDirector.TrendLayer.getSlope">
<summary>
Gets the slope of the trend line. The method is only defined if the regression type is linear or constrained linear.
</summary>
</member>
<member name="M:ChartDirector.TrendLayer.getIntercept">
<summary>
Gets the y-axis intercept of the trend line. The method is only defined if the regression type is linear.
</summary>
</member>
<member name="M:ChartDirector.TrendLayer.getCoefficient(System.Int32)">
<summary>
Gets the coefficients of the regression function.
</summary>
<param name="i">
The index of the coefficient to get.
</param>
</member>
<member name="M:ChartDirector.TrendLayer.getCorrelation">
<summary>
Gets the correlation coefficient of the trend line.
</summary>
</member>
<member name="M:ChartDirector.TrendLayer.getStdError">
<summary>
Gets the standard error of the trend line.
</summary>
</member>
<member name="M:ChartDirector.TrendLayer.setImageMapWidth(System.Int32)">
<summary>
Sets the effective width of the line used for producing image maps.
</summary>
<param name="width">
The effective width of the line used for producing image maps.
</param>
</member>
<member name="M:ChartDirector.TrendLayer.getLine">
<summary>
Retrieves an opaque LineObj representing the trend line. The opaque LineObj is to be used in "XYChart.addInterLineLayer" for adding coloring between lines.
</summary>
</member>
<member name="M:ChartDirector.AreaLayer.setGapColor(System.Int32)">
<summary>
Sets the color used to fill the area under "NoValue" data points.
</summary>
<param name="fillColor">
The color used to fill the area region at "NoValue" data point positions.
</param>
</member>
<member name="M:ChartDirector.AreaLayer.setMinLabelSize(System.Int32)">
<summary>
Sets the minimum height (or width if the x-axis and y-axis are swapped with "XYChart.swapXY") of an area below which data labels will be hidden.
</summary>
<param name="size">
The minimum height (or width if the x-axis and y-axis are swapped with "XYChart.swapXY") of an area below which data labels will be hidden.
</param>
</member>
<member name="M:ChartDirector.BaseBoxLayer.setDataGap(System.Double)">
<summary>
Sets the symbol width by specifying the gap ratio between adjacent symbols.
</summary>
<param name="gap">
The gap between two adjacent symbols as the portion of the space between the midpoints of the elements. The gap must be in the range 0 - 1. A value of 0 (the default) means there is no gap between two adjacent symbols.
</param>
</member>
<member name="M:ChartDirector.BaseBoxLayer.setDataWidth(System.Int32)">
<summary>
Sets the symbol width by specifying the pixel width of the symbols.
</summary>
<param name="width">
The width of the symbols in pixels.
</param>
</member>
<member name="M:ChartDirector.BaseBoxLayer.setRoundedCorners">
<summary>
Configures rounded corners for the boxes. This method currently is only supported by the "BoxWhiskerLayer".
</summary>
</member>
<member name="M:ChartDirector.BaseBoxLayer.setRoundedCorners(System.Int32)">
<summary>
Configures rounded corners for the boxes. This method currently is only supported by the "BoxWhiskerLayer".
</summary>
<param name="r1">
The first radius. See description above on how this radius value is used.
</param>
</member>
<member name="M:ChartDirector.BaseBoxLayer.setRoundedCorners(System.Int32,System.Int32)">
<summary>
Configures rounded corners for the boxes. This method currently is only supported by the "BoxWhiskerLayer".
</summary>
<param name="r1">
The first radius. See description above on how this radius value is used.
</param>
<param name="r2">
The second radius. See description above on how this radius value is used.
</param>
</member>
<member name="M:ChartDirector.BaseBoxLayer.setRoundedCorners(System.Int32,System.Int32,System.Int32)">
<summary>
Configures rounded corners for the boxes. This method currently is only supported by the "BoxWhiskerLayer".
</summary>
<param name="r1">
The first radius. See description above on how this radius value is used.
</param>
<param name="r2">
The second radius. See description above on how this radius value is used.
</param>
<param name="r3">
The third radius. See description above on how this radius value is used.
</param>
</member>
<member name="M:ChartDirector.BaseBoxLayer.setRoundedCorners(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Configures rounded corners for the boxes. This method currently is only supported by the "BoxWhiskerLayer".
</summary>
<param name="r1">
The first radius. See description above on how this radius value is used.
</param>
<param name="r2">
The second radius. See description above on how this radius value is used.
</param>
<param name="r3">
The third radius. See description above on how this radius value is used.
</param>
<param name="r4">
The fourth radius. See description above on how this radius value is used.
</param>
</member>
<member name="M:ChartDirector.BaseBoxLayer.setMinImageMapSize(System.Int32)">
<summary>
Sets the minimum height (or width if the x-axis and y-axis are swapped with "XYChart.swapXY") of the hot spots defined by the image map.
</summary>
<param name="size">
The minimum height (or width if the x-axis and y-axis are swapped with "XYChart.swapXY") of the hot spots defined by the image map.
</param>
</member>
<member name="M:ChartDirector.HLOCLayer.setColorMethod(System.Int32,System.Int32)">
<summary>
Sets the coloring method for the HLOC symbols.
</summary>
<param name="colorMethod">
The method to color the HLOC layer. Please refer to "XYChart.addHLOCLayer3" for the supported coloring methods.
</param>
<param name="riseColor">
The color to be used on an "up" day.
</param>
</member>
<member name="M:ChartDirector.HLOCLayer.setColorMethod(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the coloring method for the HLOC symbols.
</summary>
<param name="colorMethod">
The method to color the HLOC layer. Please refer to "XYChart.addHLOCLayer3" for the supported coloring methods.
</param>
<param name="riseColor">
The color to be used on an "up" day.
</param>
<param name="fallColor">
The color to be used on a "down" day. -1 means it is the same as the riseColor.
</param>
</member>
<member name="M:ChartDirector.HLOCLayer.setColorMethod(System.Int32,System.Int32,System.Int32,System.Double)">
<summary>
Sets the coloring method for the HLOC symbols.
</summary>
<param name="colorMethod">
The method to color the HLOC layer. Please refer to "XYChart.addHLOCLayer3" for the supported coloring methods.
</param>
<param name="riseColor">
The color to be used on an "up" day.
</param>
<param name="fallColor">
The color to be used on a "down" day. -1 means it is the same as the riseColor.
</param>
<param name="leadValue">
The lead value to act as the closing pricing before the first day, so as to determine if the first day is an "up" or "down" day.
</param>
</member>
<member name="M:ChartDirector.CandleStickLayer.setColors(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Configures the colors for candlesticks.
</summary>
<param name="upFillColor">
The fill color for "up" trading sessions.
</param>
<param name="upLineColor">
The line color for "up" trading sessions.
</param>
<param name="downFillColor">
The fill color for "down" trading sessions.
</param>
<param name="downLineColor">
The line color for "down" trading sessions.
</param>
</member>
<member name="M:ChartDirector.CandleStickLayer.setExtraColors(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Configures additional colors for candlesticks.
</summary>
<param name="upDownFillColor">
The fill color for "up/down" days.
</param>
<param name="upDownLineColor">
The line color for "up/down" days.
</param>
<param name="downDownFillColor">
The fill color for "down/down" days.
</param>
<param name="downDownLineColor">
The line color for "down/down" days.
</param>
</member>
<member name="M:ChartDirector.CandleStickLayer.setExtraColors(System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
<summary>
Configures additional colors for candlesticks.
</summary>
<param name="upDownFillColor">
The fill color for "up/down" days.
</param>
<param name="upDownLineColor">
The line color for "up/down" days.
</param>
<param name="downDownFillColor">
The fill color for "down/down" days.
</param>
<param name="downDownLineColor">
The line color for "down/down" days.
</param>
<param name="leadValue">
The closing price before the first trading session, which is used to determine if the first trading session is "up" or "down" according to the alternative definition.
</param>
</member>
<member name="M:ChartDirector.BoxWhiskerLayer.setBoxColor(System.Int32,System.Int32)">
<summary>
Sets the color for a single box.
</summary>
<param name="item">
The index of the box to change color. The first box is 0, while the Nth box is N - 1.
</param>
<param name="boxColor">
The color to use to fill the box.
</param>
</member>
<member name="M:ChartDirector.BoxWhiskerLayer.setBoxColors(System.Int32[])">
<summary>
Sets the colors for all boxes.
</summary>
<param name="colors">
An array of colors to be used as the color of the boxes.
</param>
</member>
<member name="M:ChartDirector.BoxWhiskerLayer.setBoxColors(System.Int32[],System.String[])">
<summary>
Sets the colors for all boxes.
</summary>
<param name="colors">
An array of colors to be used as the color of the boxes.
</param>
<param name="names">
An array of names to be used in the legend box, if one is configured for the chart.
</param>
</member>
<member name="M:ChartDirector.BoxWhiskerLayer.setWhiskerBrightness(System.Double)">
<summary>
Sets the whisker colors as darken or brightened fill colors of the boxes for BoxWhiskerLayer in multi-color mode.
</summary>
<param name="whiskerBrightness">
The brightness factor. A value less than 1 means darkening. A value larger than 1 means brightening. A zero value means black.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataName(System.String)">
<summary>
Sets the name of the data set.
</summary>
<param name="name">
The name of the data set.
</param>
</member>
<member name="M:ChartDirector.DataSet.getDataName">
<summary>
Gets the name of the data set.
</summary>
</member>
<member name="M:ChartDirector.DataSet.setDataColor(System.Int32)">
<summary>
Sets the colors used to draw the data set.
</summary>
<param name="dataColor">
The main color used to draw the data set.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataColor(System.Int32,System.Int32)">
<summary>
Sets the colors used to draw the data set.
</summary>
<param name="dataColor">
The main color used to draw the data set.
</param>
<param name="edgeColor">
The color used to draw the edges or borders of the data set, if any. -1 means that the edges are drawn using the default border color of the layer (defined using "Layer.setBorderColor").
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataColor(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the colors used to draw the data set.
</summary>
<param name="dataColor">
The main color used to draw the data set.
</param>
<param name="edgeColor">
The color used to draw the edges or borders of the data set, if any. -1 means that the edges are drawn using the default border color of the layer (defined using "Layer.setBorderColor").
</param>
<param name="shadowColor">
The color to use to draw 3D shadows of the data set, if any. -1 means the shadow color will be a "darker" version of the dataColor, created by reducing the RGB intensities of the dataColor in half.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataColor(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the colors used to draw the data set.
</summary>
<param name="dataColor">
The main color used to draw the data set.
</param>
<param name="edgeColor">
The color used to draw the edges or borders of the data set, if any. -1 means that the edges are drawn using the default border color of the layer (defined using "Layer.setBorderColor").
</param>
<param name="shadowColor">
The color to use to draw 3D shadows of the data set, if any. -1 means the shadow color will be a "darker" version of the dataColor, created by reducing the RGB intensities of the dataColor in half.
</param>
<param name="shadowEdgeColor">
The color to use to draw edges of the 3D shadows of the data set, if any. -1 means the shadow color will be a "darker" version of the edgeColor, created by by reducing the RGB intensities of the edgeColor in half.
</param>
</member>
<member name="M:ChartDirector.DataSet.getDataColor">
<summary>
Gets the main color used to draw the data set.
</summary>
</member>
<member name="M:ChartDirector.DataSet.setDataSymbol(System.Int32)">
<summary>
Uses one of the built-in symbols as the graphics symbol to plot the data points.
</summary>
<param name="symbol">
One of the predefined shape constants representing the symbol shape. See "Shape Specification" for the available built-in shapes.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataSymbol(System.Int32,System.Int32)">
<summary>
Uses one of the built-in symbols as the graphics symbol to plot the data points.
</summary>
<param name="symbol">
One of the predefined shape constants representing the symbol shape. See "Shape Specification" for the available built-in shapes.
</param>
<param name="size">
The width and height of the symbol in pixels.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataSymbol(System.Int32,System.Int32,System.Int32)">
<summary>
Uses one of the built-in symbols as the graphics symbol to plot the data points.
</summary>
<param name="symbol">
One of the predefined shape constants representing the symbol shape. See "Shape Specification" for the available built-in shapes.
</param>
<param name="size">
The width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means the color of the data set will be used.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataSymbol(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Uses one of the built-in symbols as the graphics symbol to plot the data points.
</summary>
<param name="symbol">
One of the predefined shape constants representing the symbol shape. See "Shape Specification" for the available built-in shapes.
</param>
<param name="size">
The width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means the color of the data set will be used.
</param>
<param name="edgeColor">
The edge color used to draw the edge of the symbol. -1 means the edge color of the data set will be used.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataSymbol(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Uses one of the built-in symbols as the graphics symbol to plot the data points.
</summary>
<param name="symbol">
One of the predefined shape constants representing the symbol shape. See "Shape Specification" for the available built-in shapes.
</param>
<param name="size">
The width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means the color of the data set will be used.
</param>
<param name="edgeColor">
The edge color used to draw the edge of the symbol. -1 means the edge color of the data set will be used.
</param>
<param name="lineWidth">
The line width used for drawing the symbols.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataSymbol(System.String)">
<summary>
Load an image from a file and use it as the graphics symbol to plot the data points.
</summary>
<param name="image">
The filename of the image file. The image type is determined based on file extension, which must be png, jpg/jpeg, gif or wbmp/wmp.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataSymbol2(System.String)">
<summary>
Load an image from a file and use it as the graphics symbol to plot the data points.
</summary>
<param name="image">
The filename of the image file. The image type is determined based on file extension, which must be png, jpg/jpeg, gif or wbmp/wmp.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataSymbol(ChartDirector.DrawArea)">
<summary>
Uses a "DrawArea" object as the graphics symbol to plot the data points.
</summary>
<param name="obj">
A "DrawArea" object to be used as the symbol.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataSymbol3(ChartDirector.DrawArea)">
<summary>
Uses a "DrawArea" object as the graphics symbol to plot the data points.
</summary>
<param name="obj">
A "DrawArea" object to be used as the symbol.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataSymbol(System.Int32[])">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataSymbol(System.Int32[],System.Int32)">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
<param name="size">
The nominal width and height of the symbol in pixels.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataSymbol(System.Int32[],System.Int32,System.Int32)">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
<param name="size">
The nominal width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means the color of the data set will be used.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataSymbol(System.Int32[],System.Int32,System.Int32,System.Int32)">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
<param name="size">
The nominal width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means the color of the data set will be used.
</param>
<param name="edgeColor">
The edge color used to draw the edge of the symbol. -1 means the edge color of the data set will be used.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataSymbol4(System.Int32[])">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataSymbol4(System.Int32[],System.Int32)">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
<param name="size">
The nominal width and height of the symbol in pixels.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataSymbol4(System.Int32[],System.Int32,System.Int32)">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
<param name="size">
The nominal width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means the color of the data set will be used.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataSymbol4(System.Int32[],System.Int32,System.Int32,System.Int32)">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
<param name="size">
The nominal width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means the color of the data set will be used.
</param>
<param name="edgeColor">
The edge color used to draw the edge of the symbol. -1 means the edge color of the data set will be used.
</param>
</member>
<member name="M:ChartDirector.DataSet.setSymbolOffset(System.Int32,System.Int32)">
<summary>
Offset the symbols in the x and y directions in pixel unit.
</summary>
<param name="xOffset">
The x offset in pixels. A positive value mean shifting to the right.
</param>
<param name="yOffset">
The y offset in pixels. A positive value mean shifting to the bottom.
</param>
</member>
<member name="M:ChartDirector.DataSet.getLegendIcon">
<summary>
Gets the CDML representation of the legend icon for the data set.
</summary>
</member>
<member name="M:ChartDirector.DataSet.setLineWidth(System.Int32)">
<summary>
Sets the line width of lines when drawing the data set.
</summary>
<param name="w">
The width of the line in pixels.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataLabelStyle">
<summary>
Enables data labels and sets their styles.
</summary>
</member>
<member name="M:ChartDirector.DataSet.setDataLabelStyle(System.String)">
<summary>
Enables data labels and sets their styles.
</summary>
<param name="font">
The font used to draw the labels.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataLabelStyle(System.String,System.Double)">
<summary>
Enables data labels and sets their styles.
</summary>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataLabelStyle(System.String,System.Double,System.Int32)">
<summary>
Enables data labels and sets their styles.
</summary>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels.
</param>
<param name="fontColor">
The color used to draw the labels.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataLabelStyle(System.String,System.Double,System.Int32,System.Double)">
<summary>
Enables data labels and sets their styles.
</summary>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels.
</param>
<param name="fontColor">
The color used to draw the labels.
</param>
<param name="fontAngle">
The rotation angle of the labels.
</param>
</member>
<member name="M:ChartDirector.DataSet.setDataLabelFormat(System.String)">
<summary>
Sets the data label format for the data set.
</summary>
<param name="formatString">
The format string.
</param>
</member>
<member name="M:ChartDirector.DataSet.setUseYAxis(ChartDirector.Axis)">
<summary>
Determine the y-axis to use when drawing the data set.
</summary>
<param name="a">
The y-axis to use when drawing the data set.
</param>
</member>
<member name="M:ChartDirector.DataSet.setUseYAxis">
<summary>
Determine if the primary or secondary y-axis should be used when drawing the data set.
</summary>
</member>
<member name="M:ChartDirector.DataSet.setUseYAxis(System.Boolean)">
<summary>
Determine if the primary or secondary y-axis should be used when drawing the data set.
</summary>
<param name="b">
A true value means the secondary y-axis will be used. A false value means the primary y-axis will be used.
</param>
</member>
<member name="M:ChartDirector.DataSet.setUseYAxis2">
<summary>
Determine if the primary or secondary y-axis should be used when drawing the data set.
</summary>
</member>
<member name="M:ChartDirector.DataSet.setUseYAxis2(System.Boolean)">
<summary>
Determine if the primary or secondary y-axis should be used when drawing the data set.
</summary>
<param name="b">
A true value means the secondary y-axis will be used. A false value means the primary y-axis will be used.
</param>
</member>
<member name="M:ChartDirector.DataSet.getUseYAxis">
<summary>
Gets the y-axis to use when drawing the data set.
</summary>
</member>
<member name="M:ChartDirector.DataSet.getValue(System.Int32)">
<summary>
Gets the value of a data point.
</summary>
<param name="i">
The data point index of the data point. The first data point is 0; the nth data point is (n - 1).
</param>
</member>
<member name="M:ChartDirector.DataSet.getPosition(System.Int32)">
<summary>
Gets the positional value of a data point.
</summary>
<param name="i">
The data point index of the data point. The first data point is 0; the nth data point is (n - 1).
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.setPlotRegion(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the position of the plot region.
</summary>
<param name="cx">
The x pixel coordinate of the point on the image at which the center of the plot region is located.
</param>
<param name="cy">
The y pixel coordinate of the point on the image at which the center of the plot region is located.
</param>
<param name="xWidth">
The length of the x-dimension of the plot region in pixels.
</param>
<param name="yDepth">
The length of the y-dimension of the plot region in pixels.
</param>
<param name="zHeight">
The length of the z-dimension of the plot region in pixels.
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.setViewAngle(System.Double)">
<summary>
Sets the 3D view angles.
</summary>
<param name="elevation">
The elevation angle in degrees.
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.setViewAngle(System.Double,System.Double)">
<summary>
Sets the 3D view angles.
</summary>
<param name="elevation">
The elevation angle in degrees.
</param>
<param name="rotation">
The rotation angle in degrees.
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.setViewAngle(System.Double,System.Double,System.Double)">
<summary>
Sets the 3D view angles.
</summary>
<param name="elevation">
The elevation angle in degrees.
</param>
<param name="rotation">
The rotation angle in degrees.
</param>
<param name="twist">
The twist angle in degrees.
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.setPerspective(System.Double)">
<summary>
Sets the strength of the perspective effect.
</summary>
<param name="perspective">
The strength of the perspective effect. It approximately represents the maximum percentage magnification of the plot region, which is the same as the maximum percentage reduction. A value of 0 means no perspective effect. This value is usually between 0 to 100. If this method is never called, the default is 12.
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.xAxis">
<summary>
Retrieves the x-axis of the ThreeDChart object.
</summary>
</member>
<member name="M:ChartDirector.ThreeDChart.yAxis">
<summary>
Retrieves the y-axis of the ThreeDChart object.
</summary>
</member>
<member name="M:ChartDirector.ThreeDChart.zAxis">
<summary>
Retrieves the z-axis of the ThreeDChart object.
</summary>
</member>
<member name="M:ChartDirector.ThreeDChart.setColorAxis(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the position, length and orientation of the color axis (color legend).
</summary>
<param name="x">
The x-coordinate of the reference point used to position the color axis.
</param>
<param name="y">
The y-coordinate of the reference point used to position the color axis.
</param>
<param name="alignment">
The alignment of the color axis with respect to the reference point. For example, a value of "TopLeft" means the reference point is the top- left corner of the color axis. See "Alignment Specification" for supported alignment types..
</param>
<param name="length">
The length of the color axis in pixels.
</param>
<param name="orientation">
The orientation of the color axis. A value of "Top"/"Bottom" means the axis is horizontal, and the axis labels are at top/bottom side of the axis. A value of "Left"/"Right" means the axis is vertical, and the axis labels are at the left/right side of the axis.
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.colorAxis">
<summary>
Gets the "ColorAxis" object representing the color axis (color legend).
</summary>
</member>
<member name="M:ChartDirector.ThreeDChart.setWallVisibility(System.Boolean,System.Boolean,System.Boolean)">
<summary>
Shows or hides the plot region walls.
</summary>
<param name="xyVisible">
A true value means the xy wall is visible. A false value means the xy wall is hidden.
</param>
<param name="yzVisible">
A true value means the yz wall is visible. A false value means the yz wall is hidden.
</param>
<param name="zxVisible">
A true value means the zx wall is visible. A false value means the zx wall is hidden.
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.setWallColor(System.Int32)">
<summary>
Sets the color of the plot region walls.
</summary>
<param name="xyColor">
The color of the xy wall.
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.setWallColor(System.Int32,System.Int32)">
<summary>
Sets the color of the plot region walls.
</summary>
<param name="xyColor">
The color of the xy wall.
</param>
<param name="yzColor">
The color of the yz wall. -1 means it is the same as xyColor.
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.setWallColor(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the color of the plot region walls.
</summary>
<param name="xyColor">
The color of the xy wall.
</param>
<param name="yzColor">
The color of the yz wall. -1 means it is the same as xyColor.
</param>
<param name="zxColor">
The color of the zx wall. -1 means it is the same as xyColor.
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.setWallColor(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the color of the plot region walls.
</summary>
<param name="xyColor">
The color of the xy wall.
</param>
<param name="yzColor">
The color of the yz wall. -1 means it is the same as xyColor.
</param>
<param name="zxColor">
The color of the zx wall. -1 means it is the same as xyColor.
</param>
<param name="borderColor">
The color of the wall border. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.setWallThickness(System.Int32)">
<summary>
Sets the thickness of the plot region walls.
</summary>
<param name="xyThickness">
The thickness of the xy wall in pixels.
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.setWallThickness(System.Int32,System.Int32)">
<summary>
Sets the thickness of the plot region walls.
</summary>
<param name="xyThickness">
The thickness of the xy wall in pixels.
</param>
<param name="yzThickness">
The thickness of the yz wall in pixels. -1 means it is the same as xyThickness.
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.setWallThickness(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the thickness of the plot region walls.
</summary>
<param name="xyThickness">
The thickness of the xy wall in pixels.
</param>
<param name="yzThickness">
The thickness of the yz wall in pixels. -1 means it is the same as xyThickness.
</param>
<param name="zxThickness">
The thickness of the zx wall in pixels. -1 means it is the same as xyThickness.
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.setWallGrid(System.Int32)">
<summary>
Sets the grid line colors on plot region walls.
</summary>
<param name="majorXGridColor">
The color of the major x-axis grid lines on the walls.
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.setWallGrid(System.Int32,System.Int32)">
<summary>
Sets the grid line colors on plot region walls.
</summary>
<param name="majorXGridColor">
The color of the major x-axis grid lines on the walls.
</param>
<param name="majorYGridColor">
The color of the major y-axis grid lines on the walls. -1 means it is the same as the majorXGridColor.
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.setWallGrid(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the grid line colors on plot region walls.
</summary>
<param name="majorXGridColor">
The color of the major x-axis grid lines on the walls.
</param>
<param name="majorYGridColor">
The color of the major y-axis grid lines on the walls. -1 means it is the same as the majorXGridColor.
</param>
<param name="majorZGridColor">
The color of the major z-axis grid lines on the walls. -1 means it is the same as the majorXGridColor.
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.setWallGrid(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the grid line colors on plot region walls.
</summary>
<param name="majorXGridColor">
The color of the major x-axis grid lines on the walls.
</param>
<param name="majorYGridColor">
The color of the major y-axis grid lines on the walls. -1 means it is the same as the majorXGridColor.
</param>
<param name="majorZGridColor">
The color of the major z-axis grid lines on the walls. -1 means it is the same as the majorXGridColor.
</param>
<param name="minorXGridColor">
The color of the minor x-axis grid lines on the walls. -1 means it is the same as the majorXGridColor.
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.setWallGrid(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the grid line colors on plot region walls.
</summary>
<param name="majorXGridColor">
The color of the major x-axis grid lines on the walls.
</param>
<param name="majorYGridColor">
The color of the major y-axis grid lines on the walls. -1 means it is the same as the majorXGridColor.
</param>
<param name="majorZGridColor">
The color of the major z-axis grid lines on the walls. -1 means it is the same as the majorXGridColor.
</param>
<param name="minorXGridColor">
The color of the minor x-axis grid lines on the walls. -1 means it is the same as the majorXGridColor.
</param>
<param name="minorYGridColor">
The color of the minor y-axis grid lines on the walls. -1 means it is the same as the majorYGridColor.
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.setWallGrid(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the grid line colors on plot region walls.
</summary>
<param name="majorXGridColor">
The color of the major x-axis grid lines on the walls.
</param>
<param name="majorYGridColor">
The color of the major y-axis grid lines on the walls. -1 means it is the same as the majorXGridColor.
</param>
<param name="majorZGridColor">
The color of the major z-axis grid lines on the walls. -1 means it is the same as the majorXGridColor.
</param>
<param name="minorXGridColor">
The color of the minor x-axis grid lines on the walls. -1 means it is the same as the majorXGridColor.
</param>
<param name="minorYGridColor">
The color of the minor y-axis grid lines on the walls. -1 means it is the same as the majorYGridColor.
</param>
<param name="minorZGridColor">
The color of the minor z-axis grid lines on the walls. -1 means it is the same as the majorZGridColor.
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.setZAxisPos(System.Int32)">
<summary>
Sets the position of the z-axis.
</summary>
<param name="pos">
The position of the z-axis, which must be either "Left" or "Right".
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.getXCoor(System.Double,System.Double,System.Double)">
<summary>
Gets the x pixel coordinate of a point given its x, y and z data values.
</summary>
<param name="x">
The x data value of the point.
</param>
<param name="y">
The y data value of the point.
</param>
<param name="z">
The z data value of the point.
</param>
</member>
<member name="M:ChartDirector.ThreeDChart.getYCoor(System.Double,System.Double,System.Double)">
<summary>
Gets the y pixel coordinate of a point given its x, y and z data values.
</summary>
<param name="x">
The x data value of the point.
</param>
<param name="y">
The y data value of the point.
</param>
<param name="z">
The z data value of the point.
</param>
</member>
<member name="M:ChartDirector.SurfaceChart.#ctor(System.Int32,System.Int32)">
<summary>
Creates a new "SurfaceChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
</member>
<member name="M:ChartDirector.SurfaceChart.#ctor(System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "SurfaceChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
</member>
<member name="M:ChartDirector.SurfaceChart.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "SurfaceChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
<param name="edgeColor">
The edge color of the chart.
</param>
</member>
<member name="M:ChartDirector.SurfaceChart.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "SurfaceChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
<param name="edgeColor">
The edge color of the chart.
</param>
<param name="raisedEffect">
The 3D border width. For positive values, the border will appear raised. For negative values, the border will appear depressed. A zero value means the border will appear flat.
</param>
</member>
<member name="M:ChartDirector.SurfaceChart.setData(System.Double[],System.Double[],System.Double[])">
<summary>
Sets the data for the surface chart.
</summary>
<param name="xData">
An array of numbers representing the x data series.
</param>
<param name="yData">
An array of numbers representing the y data series.
</param>
<param name="zData">
An array of numbers representing the z data series.
</param>
</member>
<member name="M:ChartDirector.SurfaceChart.setInterpolation(System.Int32)">
<summary>
Enables and sets the degree and method of interpolation of the data points.
</summary>
<param name="xSamples">
The number of samples on the x-dimension to interpolate to.
</param>
</member>
<member name="M:ChartDirector.SurfaceChart.setInterpolation(System.Int32,System.Int32)">
<summary>
Enables and sets the degree and method of interpolation of the data points.
</summary>
<param name="xSamples">
The number of samples on the x-dimension to interpolate to.
</param>
<param name="ySamples">
The number of samples on the y-dimension to interpolate to. -1 means it is the same as xSamples.
</param>
</member>
<member name="M:ChartDirector.SurfaceChart.setInterpolation(System.Int32,System.Int32,System.Boolean)">
<summary>
Enables and sets the degree and method of interpolation of the data points.
</summary>
<param name="xSamples">
The number of samples on the x-dimension to interpolate to.
</param>
<param name="ySamples">
The number of samples on the y-dimension to interpolate to. -1 means it is the same as xSamples.
</param>
<param name="isSmooth">
A true value means to use spline surface interpolation. A false value means to use bilinear/linear interpolation.
</param>
</member>
<member name="M:ChartDirector.SurfaceChart.setShadingMode(System.Int32)">
<summary>
Sets the shading mode for the surface.
</summary>
<param name="shadingMode">
The shading mode, which must be one of the above constants.
</param>
</member>
<member name="M:ChartDirector.SurfaceChart.setShadingMode(System.Int32,System.Int32)">
<summary>
Sets the shading mode for the surface.
</summary>
<param name="shadingMode">
The shading mode, which must be one of the above constants.
</param>
<param name="wireWidth">
The wire width for use with wireframe shading modes.
</param>
</member>
<member name="M:ChartDirector.SurfaceChart.setLighting(System.Double,System.Double,System.Double,System.Double)">
<summary>
Sets the Phong lighting parameters for the front side of the surface.
</summary>
<param name="ambientIntensity">
The ambient reflection coefficient of the Phong lighting model.
</param>
<param name="diffuseIntensity">
The diffuse reflection coefficient of the Phong lighting model.
</param>
<param name="specularIntensity">
The specular reflection coefficient of the Phong lighting model.
</param>
<param name="shininess">
The shininess coefficient of the Phong lighting model.
</param>
</member>
<member name="M:ChartDirector.SurfaceChart.setBackSideBrightness(System.Double)">
<summary>
Sets the back side brightness as a ratio of the front side brightness.
</summary>
<param name="brightness">
The ratio of the back side brightness to the front side brightness.
</param>
</member>
<member name="M:ChartDirector.SurfaceChart.setBackSideLighting(System.Double,System.Double,System.Double,System.Double)">
<summary>
Sets the Phong lighting parameters for the back side of the surface.
</summary>
<param name="ambientIntensity">
The ambient reflection coefficient of the Phong lighting model.
</param>
<param name="diffuseIntensity">
The diffuse reflection coefficient of the Phong lighting model.
</param>
<param name="specularIntensity">
The specular reflection coefficient of the Phong lighting model.
</param>
<param name="shininess">
The shininess coefficient of the Phong lighting model.
</param>
</member>
<member name="M:ChartDirector.SurfaceChart.setBackSideColor(System.Int32)">
<summary>
Sets the color of the back side of the surface.
</summary>
<param name="color">
The color used for the back side.
</param>
</member>
<member name="M:ChartDirector.SurfaceChart.setSurfaceAxisGrid(System.Int32)">
<summary>
Sets the colors of the axis grid lines on the surface.
</summary>
<param name="majorXGridColor">
The color of the major x-axis grid lines on the surface.
</param>
</member>
<member name="M:ChartDirector.SurfaceChart.setSurfaceAxisGrid(System.Int32,System.Int32)">
<summary>
Sets the colors of the axis grid lines on the surface.
</summary>
<param name="majorXGridColor">
The color of the major x-axis grid lines on the surface.
</param>
<param name="majorYGridColor">
The color of the major y-axis grid lines on the surface. -1 means it is the same as the majorXGridColor.
</param>
</member>
<member name="M:ChartDirector.SurfaceChart.setSurfaceAxisGrid(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the colors of the axis grid lines on the surface.
</summary>
<param name="majorXGridColor">
The color of the major x-axis grid lines on the surface.
</param>
<param name="majorYGridColor">
The color of the major y-axis grid lines on the surface. -1 means it is the same as the majorXGridColor.
</param>
<param name="minorXGridColor">
The color of the minor x-axis grid lines on the surface. -1 means it is the same as the majorXGridColor.
</param>
</member>
<member name="M:ChartDirector.SurfaceChart.setSurfaceAxisGrid(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the colors of the axis grid lines on the surface.
</summary>
<param name="majorXGridColor">
The color of the major x-axis grid lines on the surface.
</param>
<param name="majorYGridColor">
The color of the major y-axis grid lines on the surface. -1 means it is the same as the majorXGridColor.
</param>
<param name="minorXGridColor">
The color of the minor x-axis grid lines on the surface. -1 means it is the same as the majorXGridColor.
</param>
<param name="minorYGridColor">
The color of the minor y-axis grid lines on the surface. -1 means it is the same as the majorYGridColor.
</param>
</member>
<member name="M:ChartDirector.SurfaceChart.setSurfaceDataGrid(System.Int32)">
<summary>
Sets the colors of the data grid lines on the surface.
</summary>
<param name="xGridColor">
The color of the x data grid lines.
</param>
</member>
<member name="M:ChartDirector.SurfaceChart.setSurfaceDataGrid(System.Int32,System.Int32)">
<summary>
Sets the colors of the data grid lines on the surface.
</summary>
<param name="xGridColor">
The color of the x data grid lines.
</param>
<param name="yGridColor">
The color of the y data grid lines. -1 means it is the same as the yGridColor.
</param>
</member>
<member name="M:ChartDirector.SurfaceChart.setContourColor(System.Int32)">
<summary>
Sets the colors of the contour lines on the surface.
</summary>
<param name="contourColor">
The color of the major contour lines.
</param>
</member>
<member name="M:ChartDirector.SurfaceChart.setContourColor(System.Int32,System.Int32)">
<summary>
Sets the colors of the contour lines on the surface.
</summary>
<param name="contourColor">
The color of the major contour lines.
</param>
<param name="minorContourColor">
The color of the minor contour lines. -1 means it is the same as the contourColor.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterChart.#ctor(System.Int32,System.Int32)">
<summary>
Creates a new "ThreeDScatterChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterChart.#ctor(System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "ThreeDScatterChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterChart.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "ThreeDScatterChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
<param name="edgeColor">
The edge color of the chart.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterChart.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "ThreeDScatterChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
<param name="edgeColor">
The edge color of the chart.
</param>
<param name="raisedEffect">
The 3D border width. For positive values, the border will appear raised. For negative values, the border will appear depressed. A zero value means the border will appear flat.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterChart.addScatterGroup(System.Double[],System.Double[],System.Double[])">
<summary>
Adds a group of scatter symbols to the ThreeDScatterChart.
</summary>
<param name="xData">
An array of numbers representing the x values of the data points.
</param>
<param name="yData">
An array of numbers representing the y values of the data points.
</param>
<param name="zData">
An array of numbers representing the z values of the data points.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterChart.addScatterGroup(System.Double[],System.Double[],System.Double[],System.String)">
<summary>
Adds a group of scatter symbols to the ThreeDScatterChart.
</summary>
<param name="xData">
An array of numbers representing the x values of the data points.
</param>
<param name="yData">
An array of numbers representing the y values of the data points.
</param>
<param name="zData">
An array of numbers representing the z values of the data points.
</param>
<param name="name">
The name of the symbol group. The name will be used in the legend box, if one is available. An empty string means the symbol group has no name.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterChart.addScatterGroup(System.Double[],System.Double[],System.Double[],System.String,System.Int32)">
<summary>
Adds a group of scatter symbols to the ThreeDScatterChart.
</summary>
<param name="xData">
An array of numbers representing the x values of the data points.
</param>
<param name="yData">
An array of numbers representing the y values of the data points.
</param>
<param name="zData">
An array of numbers representing the z values of the data points.
</param>
<param name="name">
The name of the symbol group. The name will be used in the legend box, if one is available. An empty string means the symbol group has no name.
</param>
<param name="symbol">
One of the predefined symbol constants to specify the symbol to use. (See "Shape Specification" for available built-in shapes.)
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterChart.addScatterGroup(System.Double[],System.Double[],System.Double[],System.String,System.Int32,System.Int32)">
<summary>
Adds a group of scatter symbols to the ThreeDScatterChart.
</summary>
<param name="xData">
An array of numbers representing the x values of the data points.
</param>
<param name="yData">
An array of numbers representing the y values of the data points.
</param>
<param name="zData">
An array of numbers representing the z values of the data points.
</param>
<param name="name">
The name of the symbol group. The name will be used in the legend box, if one is available. An empty string means the symbol group has no name.
</param>
<param name="symbol">
One of the predefined symbol constants to specify the symbol to use. (See "Shape Specification" for available built-in shapes.)
</param>
<param name="symbolSize">
The width and height of the symbol in pixels.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterChart.addScatterGroup(System.Double[],System.Double[],System.Double[],System.String,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a group of scatter symbols to the ThreeDScatterChart.
</summary>
<param name="xData">
An array of numbers representing the x values of the data points.
</param>
<param name="yData">
An array of numbers representing the y values of the data points.
</param>
<param name="zData">
An array of numbers representing the z values of the data points.
</param>
<param name="name">
The name of the symbol group. The name will be used in the legend box, if one is available. An empty string means the symbol group has no name.
</param>
<param name="symbol">
One of the predefined symbol constants to specify the symbol to use. (See "Shape Specification" for available built-in shapes.)
</param>
<param name="symbolSize">
The width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means that the color is automatically selected from the palette. "SameAsMainColor" means the color is based on the z value of the symbol as according to the "ColorAxis" (accessible via "ThreeDChart.colorAxis").
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterChart.addScatterGroup(System.Double[],System.Double[],System.Double[],System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a group of scatter symbols to the ThreeDScatterChart.
</summary>
<param name="xData">
An array of numbers representing the x values of the data points.
</param>
<param name="yData">
An array of numbers representing the y values of the data points.
</param>
<param name="zData">
An array of numbers representing the z values of the data points.
</param>
<param name="name">
The name of the symbol group. The name will be used in the legend box, if one is available. An empty string means the symbol group has no name.
</param>
<param name="symbol">
One of the predefined symbol constants to specify the symbol to use. (See "Shape Specification" for available built-in shapes.)
</param>
<param name="symbolSize">
The width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means that the color is automatically selected from the palette. "SameAsMainColor" means the color is based on the z value of the symbol as according to the "ColorAxis" (accessible via "ThreeDChart.colorAxis").
</param>
<param name="edgeColor">
The edge color used to draw the edge of the symbol. -1 means using "LineColor" as the edge color.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setDataSymbol(System.Int32)">
<summary>
Uses one of the built-in symbols as the graphics symbol to plot the data points.
</summary>
<param name="symbol">
One of the predefined shape constants representing the symbol shape. See "Shape Specification" for the available built-in shapes.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setDataSymbol(System.Int32,System.Int32)">
<summary>
Uses one of the built-in symbols as the graphics symbol to plot the data points.
</summary>
<param name="symbol">
One of the predefined shape constants representing the symbol shape. See "Shape Specification" for the available built-in shapes.
</param>
<param name="size">
The width and height of the symbol in pixels.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setDataSymbol(System.Int32,System.Int32,System.Int32)">
<summary>
Uses one of the built-in symbols as the graphics symbol to plot the data points.
</summary>
<param name="symbol">
One of the predefined shape constants representing the symbol shape. See "Shape Specification" for the available built-in shapes.
</param>
<param name="size">
The width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means that the color is automatically selected from  the palette. "SameAsMainColor" means the color is based on the z value of the  symbol as according to the "ColorAxis" (accessible via  "ThreeDChart.colorAxis").
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setDataSymbol(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Uses one of the built-in symbols as the graphics symbol to plot the data points.
</summary>
<param name="symbol">
One of the predefined shape constants representing the symbol shape. See "Shape Specification" for the available built-in shapes.
</param>
<param name="size">
The width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means that the color is automatically selected from  the palette. "SameAsMainColor" means the color is based on the z value of the  symbol as according to the "ColorAxis" (accessible via  "ThreeDChart.colorAxis").
</param>
<param name="edgeColor">
The edge color used to draw the edge of the symbol. -1 means using "LineColor" as the edge color.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setDataSymbol(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Uses one of the built-in symbols as the graphics symbol to plot the data points.
</summary>
<param name="symbol">
One of the predefined shape constants representing the symbol shape. See "Shape Specification" for the available built-in shapes.
</param>
<param name="size">
The width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means that the color is automatically selected from  the palette. "SameAsMainColor" means the color is based on the z value of the  symbol as according to the "ColorAxis" (accessible via  "ThreeDChart.colorAxis").
</param>
<param name="edgeColor">
The edge color used to draw the edge of the symbol. -1 means using "LineColor" as the edge color.
</param>
<param name="lineWidth">
The line width used for drawing the symbols.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setDataSymbol(System.String)">
<summary>
Load an image from a file and use it as the graphics symbol to plot the data points.
</summary>
<param name="image">
The filename of the image file. The image type is determined based on file extension, which must be png, jpg/jpeg, gif or wbmp/wmp.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setDataSymbol2(System.String)">
<summary>
Load an image from a file and use it as the graphics symbol to plot the data points.
</summary>
<param name="image">
The filename of the image file. The image type is determined based on file extension, which must be png, jpg/jpeg, gif or wbmp/wmp.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setDataSymbol(ChartDirector.DrawArea)">
<summary>
Uses a "DrawArea" object as the graphics symbol to plot the data points.
</summary>
<param name="obj">
A "DrawArea" object to be used as the symbol.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setDataSymbol3(ChartDirector.DrawArea)">
<summary>
Uses a "DrawArea" object as the graphics symbol to plot the data points.
</summary>
<param name="obj">
A "DrawArea" object to be used as the symbol.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setDataSymbol(System.Int32[])">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setDataSymbol(System.Int32[],System.Int32)">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
<param name="size">
The nominal width and height of the symbol in pixels.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setDataSymbol(System.Int32[],System.Int32,System.Int32)">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
<param name="size">
The nominal width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means that the color is automatically selected from  the palette. "SameAsMainColor" means the color is based on the z value of the  symbol as according to the "ColorAxis" (accessible via  "ThreeDChart.colorAxis").
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setDataSymbol(System.Int32[],System.Int32,System.Int32,System.Int32)">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
<param name="size">
The nominal width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means that the color is automatically selected from  the palette. "SameAsMainColor" means the color is based on the z value of the  symbol as according to the "ColorAxis" (accessible via  "ThreeDChart.colorAxis").
</param>
<param name="edgeColor">
The edge color used to draw the edge of the symbol. -1 means using "LineColor" as the edge color.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setDataSymbol4(System.Int32[])">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setDataSymbol4(System.Int32[],System.Int32)">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
<param name="size">
The nominal width and height of the symbol in pixels.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setDataSymbol4(System.Int32[],System.Int32,System.Int32)">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
<param name="size">
The nominal width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means that the color is automatically selected from  the palette. "SameAsMainColor" means the color is based on the z value of the  symbol as according to the "ColorAxis" (accessible via  "ThreeDChart.colorAxis").
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setDataSymbol4(System.Int32[],System.Int32,System.Int32,System.Int32)">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
<param name="size">
The nominal width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means that the color is automatically selected from  the palette. "SameAsMainColor" means the color is based on the z value of the  symbol as according to the "ColorAxis" (accessible via  "ThreeDChart.colorAxis").
</param>
<param name="edgeColor">
The edge color used to draw the edge of the symbol. -1 means using "LineColor" as the edge color.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setSymbolOffset(System.Int32,System.Int32)">
<summary>
Offset the symbols in the x and y directions in pixel unit.
</summary>
<param name="xOffset">
The x offset in pixels. A positive value mean shifting to the right.
</param>
<param name="yOffset">
The y offset in pixels. A positive value mean shifting to the bottom.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setDropLine(System.Int32)">
<summary>
Sets the drop line color and width.
</summary>
<param name="dropLineColor">
The color of the drop line.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setDropLine(System.Int32,System.Int32)">
<summary>
Sets the drop line color and width.
</summary>
<param name="dropLineColor">
The color of the drop line.
</param>
<param name="dropLineWidth">
The width of the drop line.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setLegendIcon(System.Int32)">
<summary>
Sets the size and color of the legend icon.
</summary>
<param name="width">
The width of the legend icon in pixels.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setLegendIcon(System.Int32,System.Int32)">
<summary>
Sets the size and color of the legend icon.
</summary>
<param name="width">
The width of the legend icon in pixels.
</param>
<param name="height">
The height of the legend icon in pixels. -1 means the height is the same as the width.
</param>
</member>
<member name="M:ChartDirector.ThreeDScatterGroup.setLegendIcon(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the size and color of the legend icon.
</summary>
<param name="width">
The width of the legend icon in pixels.
</param>
<param name="height">
The height of the legend icon in pixels. -1 means the height is the same as the width.
</param>
<param name="color">
The color of the legend icon. -1 means the color is the same as the symbol color at the mid-point of the "ColorAxis".
</param>
</member>
<member name="M:ChartDirector.PolarChart.#ctor(System.Int32,System.Int32)">
<summary>
Creates a new "PolarChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
</member>
<member name="M:ChartDirector.PolarChart.#ctor(System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "PolarChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
</member>
<member name="M:ChartDirector.PolarChart.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "PolarChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
<param name="edgeColor">
The edge color of the chart.
</param>
</member>
<member name="M:ChartDirector.PolarChart.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "PolarChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
<param name="edgeColor">
The edge color of the chart.
</param>
<param name="raisedEffect">
The 3D border width. For positive values, the border will appear raised. For negative values, the border will appear depressed. A zero value means the border will appear flat.
</param>
</member>
<member name="M:ChartDirector.PolarChart.setPlotArea(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the position, background colors, border color and border width of the polar plot area.
</summary>
<param name="x">
The x coordinate of the center of the polar plot area.
</param>
<param name="y">
The y coordinate of the center of the polar plot area.
</param>
<param name="r">
The radius of the polar plot area in pixels.
</param>
</member>
<member name="M:ChartDirector.PolarChart.setPlotArea(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the position, background colors, border color and border width of the polar plot area.
</summary>
<param name="x">
The x coordinate of the center of the polar plot area.
</param>
<param name="y">
The y coordinate of the center of the polar plot area.
</param>
<param name="r">
The radius of the polar plot area in pixels.
</param>
<param name="bgColor">
The background color of the polar plot area.
</param>
</member>
<member name="M:ChartDirector.PolarChart.setPlotArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the position, background colors, border color and border width of the polar plot area.
</summary>
<param name="x">
The x coordinate of the center of the polar plot area.
</param>
<param name="y">
The y coordinate of the center of the polar plot area.
</param>
<param name="r">
The radius of the polar plot area in pixels.
</param>
<param name="bgColor">
The background color of the polar plot area.
</param>
<param name="edgeColor">
The border color of the polar plot area.
</param>
</member>
<member name="M:ChartDirector.PolarChart.setPlotArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the position, background colors, border color and border width of the polar plot area.
</summary>
<param name="x">
The x coordinate of the center of the polar plot area.
</param>
<param name="y">
The y coordinate of the center of the polar plot area.
</param>
<param name="r">
The radius of the polar plot area in pixels.
</param>
<param name="bgColor">
The background color of the polar plot area.
</param>
<param name="edgeColor">
The border color of the polar plot area.
</param>
<param name="edgeWidth">
The border width of the polar plot area. The border width is only used if the polar plot area is using a polygon grid (see "PolarChart.setGridStyle"). If circular grid is used, the border width is always 1.
</param>
</member>
<member name="M:ChartDirector.PolarChart.setPlotAreaBg(System.Int32)">
<summary>
Sets alternating background colors for the polar plot area.
</summary>
<param name="bgColor1">
The first background color.
</param>
</member>
<member name="M:ChartDirector.PolarChart.setPlotAreaBg(System.Int32,System.Int32)">
<summary>
Sets alternating background colors for the polar plot area.
</summary>
<param name="bgColor1">
The first background color.
</param>
<param name="bgColor2">
The second background color. -1 means it is the same as the first background color.
</param>
</member>
<member name="M:ChartDirector.PolarChart.setPlotAreaBg(System.Int32,System.Int32,System.Boolean)">
<summary>
Sets alternating background colors for the polar plot area.
</summary>
<param name="bgColor1">
The first background color.
</param>
<param name="bgColor2">
The second background color. -1 means it is the same as the first background color.
</param>
<param name="altRings">
A true value means the background colors alternate in the radial direction, resulting in concentric circles. A false value means the background colors alternates in the angular direction, resulting in alternating sectors.
</param>
</member>
<member name="M:ChartDirector.PolarChart.setGridColor">
<summary>
Sets the grid colors and widths of the polar plot area.
</summary>
</member>
<member name="M:ChartDirector.PolarChart.setGridColor(System.Int32)">
<summary>
Sets the grid colors and widths of the polar plot area.
</summary>
<param name="rGridColor">
The color of grid lines in the radial direction (from the center outwards).
</param>
</member>
<member name="M:ChartDirector.PolarChart.setGridColor(System.Int32,System.Int32)">
<summary>
Sets the grid colors and widths of the polar plot area.
</summary>
<param name="rGridColor">
The color of grid lines in the radial direction (from the center outwards).
</param>
<param name="rGridWidth">
The line width for grid lines in the radial direction (from the center outwards).
</param>
</member>
<member name="M:ChartDirector.PolarChart.setGridColor(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the grid colors and widths of the polar plot area.
</summary>
<param name="rGridColor">
The color of grid lines in the radial direction (from the center outwards).
</param>
<param name="rGridWidth">
The line width for grid lines in the radial direction (from the center outwards).
</param>
<param name="aGridColor">
The color of grid lines in the angular direction (concentric circles around the center).
</param>
</member>
<member name="M:ChartDirector.PolarChart.setGridColor(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the grid colors and widths of the polar plot area.
</summary>
<param name="rGridColor">
The color of grid lines in the radial direction (from the center outwards).
</param>
<param name="rGridWidth">
The line width for grid lines in the radial direction (from the center outwards).
</param>
<param name="aGridColor">
The color of grid lines in the angular direction (concentric circles around the center).
</param>
<param name="aGridWidth">
The line width of grid lines in the angular direction (concentric circles around the center) The line width is only used if the polar plot area is using a polygon grid (see "PolarChart.setGridStyle"). If circular grid is used, the line width is always 1.
</param>
</member>
<member name="M:ChartDirector.PolarChart.setGridStyle(System.Boolean)">
<summary>
Configure whether to use circular grids or polygon grids, and whether the grid lines are on top of the polar plot area or are at the back.
</summary>
<param name="polygonGrid">
A true value means polygonal grid will be used. A false value means circular grid will be used.
</param>
</member>
<member name="M:ChartDirector.PolarChart.setGridStyle(System.Boolean,System.Boolean)">
<summary>
Configure whether to use circular grids or polygon grids, and whether the grid lines are on top of the polar plot area or are at the back.
</summary>
<param name="polygonGrid">
A true value means polygonal grid will be used. A false value means circular grid will be used.
</param>
<param name="gridOnTop">
A true value means the grid lines will be on top of the polar plot area. A false value means the grid lines will be at the bottom of the polar plot area.
</param>
</member>
<member name="M:ChartDirector.PolarChart.setStartAngle(System.Double)">
<summary>
Sets the angle of the radial axis, and the layout direction of radial grid lines.
</summary>
<param name="startAngle">
The angle of the radial axis in degrees. The upward pointing direction is 0 degree, with angle measured in the clockwise direction.
</param>
</member>
<member name="M:ChartDirector.PolarChart.setStartAngle(System.Double,System.Boolean)">
<summary>
Sets the angle of the radial axis, and the layout direction of radial grid lines.
</summary>
<param name="startAngle">
The angle of the radial axis in degrees. The upward pointing direction is 0 degree, with angle measured in the clockwise direction.
</param>
<param name="clockwise">
A true value means the radial grid line will be laid out in the clockwise direction. A false value means the radial grid lines will be laid out in the counter-clockwise direction.
</param>
</member>
<member name="M:ChartDirector.PolarChart.angularAxis">
<summary>
Gets the "AngularAxis" object representing the angular axis of the polar chart.
</summary>
</member>
<member name="M:ChartDirector.PolarChart.radialAxis">
<summary>
Gets the "RadialAxis" object representing the radial axis of the polar chart.
</summary>
</member>
<member name="M:ChartDirector.PolarChart.getXCoor(System.Double,System.Double)">
<summary>
Gets the x pixel coordinate of a point given its radial and angular coordinates.
</summary>
<param name="r">
The radial coordinate of the point.
</param>
<param name="a">
The angular coordinate of the point.
</param>
</member>
<member name="M:ChartDirector.PolarChart.getYCoor(System.Double,System.Double)">
<summary>
Gets the y pixel coordinate of a point given its radial and angular coordinates.
</summary>
<param name="r">
The radial coordinate of the point.
</param>
<param name="a">
The angular coordinate of the point.
</param>
</member>
<member name="M:ChartDirector.PolarChart.addLineLayer(System.Double[])">
<summary>
Adds a polar line layer to the polar chart.
</summary>
<param name="data">
An array of numbers representing the data points in the layer.
</param>
</member>
<member name="M:ChartDirector.PolarChart.addLineLayer(System.Double[],System.Int32)">
<summary>
Adds a polar line layer to the polar chart.
</summary>
<param name="data">
An array of numbers representing the data points in the layer.
</param>
<param name="color">
The color to draw the line. -1 means that the color is automatically selected from the palette.
</param>
</member>
<member name="M:ChartDirector.PolarChart.addLineLayer(System.Double[],System.Int32,System.String)">
<summary>
Adds a polar line layer to the polar chart.
</summary>
<param name="data">
An array of numbers representing the data points in the layer.
</param>
<param name="color">
The color to draw the line. -1 means that the color is automatically selected from the palette.
</param>
<param name="name">
The name of the layer. The name will be used in the legend box, if one is available. An empty string means the layer has no name.
</param>
</member>
<member name="M:ChartDirector.PolarChart.addAreaLayer(System.Double[])">
<summary>
Adds a polar area layer to the polar chart.
</summary>
<param name="data">
An array of numbers representing the data points in the layer.
</param>
</member>
<member name="M:ChartDirector.PolarChart.addAreaLayer(System.Double[],System.Int32)">
<summary>
Adds a polar area layer to the polar chart.
</summary>
<param name="data">
An array of numbers representing the data points in the layer.
</param>
<param name="color">
The color to draw the area. -1 means that the color is automatically selected from the palette.
</param>
</member>
<member name="M:ChartDirector.PolarChart.addAreaLayer(System.Double[],System.Int32,System.String)">
<summary>
Adds a polar area layer to the polar chart.
</summary>
<param name="data">
An array of numbers representing the data points in the layer.
</param>
<param name="color">
The color to draw the area. -1 means that the color is automatically selected from the palette.
</param>
<param name="name">
The name of the layer. The name will be used in the legend box, if one is available. An empty string means the layer has no name.
</param>
</member>
<member name="M:ChartDirector.PolarChart.addSplineLineLayer(System.Double[])">
<summary>
Adds a polar spline line layer to the polar chart.
</summary>
<param name="data">
An array of numbers representing the data points in the layer.
</param>
</member>
<member name="M:ChartDirector.PolarChart.addSplineLineLayer(System.Double[],System.Int32)">
<summary>
Adds a polar spline line layer to the polar chart.
</summary>
<param name="data">
An array of numbers representing the data points in the layer.
</param>
<param name="color">
The color to draw the spline line. -1 means that the color is automatically selected from the palette.
</param>
</member>
<member name="M:ChartDirector.PolarChart.addSplineLineLayer(System.Double[],System.Int32,System.String)">
<summary>
Adds a polar spline line layer to the polar chart.
</summary>
<param name="data">
An array of numbers representing the data points in the layer.
</param>
<param name="color">
The color to draw the spline line. -1 means that the color is automatically selected from the palette.
</param>
<param name="name">
The name of the layer. The name will be used in the legend box, if one is available. An empty string means the layer has no name.
</param>
</member>
<member name="M:ChartDirector.PolarChart.addSplineAreaLayer(System.Double[])">
<summary>
Adds a polar spline area layer to the polar chart.
</summary>
<param name="data">
An array of numbers representing the data points in the layer.
</param>
</member>
<member name="M:ChartDirector.PolarChart.addSplineAreaLayer(System.Double[],System.Int32)">
<summary>
Adds a polar spline area layer to the polar chart.
</summary>
<param name="data">
An array of numbers representing the data points in the layer.
</param>
<param name="color">
The color to draw the spline area. -1 means that the color is automatically selected from the palette.
</param>
</member>
<member name="M:ChartDirector.PolarChart.addSplineAreaLayer(System.Double[],System.Int32,System.String)">
<summary>
Adds a polar spline area layer to the polar chart.
</summary>
<param name="data">
An array of numbers representing the data points in the layer.
</param>
<param name="color">
The color to draw the spline area. -1 means that the color is automatically selected from the palette.
</param>
<param name="name">
The name of the layer. The name will be used in the legend box, if one is available. An empty string means the layer has no name.
</param>
</member>
<member name="M:ChartDirector.PolarChart.addVectorLayer(System.Double[],System.Double[],System.Double[],System.Double[])">
<summary>
Adds a vector layer to the chart.
</summary>
<param name="rData">
An array of numbers representing the radial coordinates for the reference points of the vectors.
</param>
<param name="aData">
An array of numbers representing the angular coordinates for the reference points of the vectors.
</param>
<param name="lengths">
An array of numbers representing either the lengths of the vectors or the radial coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
<param name="directions">
An array of numbers representing either the directions of the vectors or the angular coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
</member>
<member name="M:ChartDirector.PolarChart.addVectorLayer(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32)">
<summary>
Adds a vector layer to the chart.
</summary>
<param name="rData">
An array of numbers representing the radial coordinates for the reference points of the vectors.
</param>
<param name="aData">
An array of numbers representing the angular coordinates for the reference points of the vectors.
</param>
<param name="lengths">
An array of numbers representing either the lengths of the vectors or the radial coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
<param name="directions">
An array of numbers representing either the directions of the vectors or the angular coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
<param name="lengthScale">
The method to specify vector lengths and directions, which must be one of the predefined constants in the table above.
</param>
</member>
<member name="M:ChartDirector.PolarChart.addVectorLayer(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32,System.Int32)">
<summary>
Adds a vector layer to the chart.
</summary>
<param name="rData">
An array of numbers representing the radial coordinates for the reference points of the vectors.
</param>
<param name="aData">
An array of numbers representing the angular coordinates for the reference points of the vectors.
</param>
<param name="lengths">
An array of numbers representing either the lengths of the vectors or the radial coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
<param name="directions">
An array of numbers representing either the directions of the vectors or the angular coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
<param name="lengthScale">
The method to specify vector lengths and directions, which must be one of the predefined constants in the table above.
</param>
<param name="color">
The color to draw the data points. -1 means that the color is automatically selected from the palette.
</param>
</member>
<member name="M:ChartDirector.PolarChart.addVectorLayer(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32,System.Int32,System.String)">
<summary>
Adds a vector layer to the chart.
</summary>
<param name="rData">
An array of numbers representing the radial coordinates for the reference points of the vectors.
</param>
<param name="aData">
An array of numbers representing the angular coordinates for the reference points of the vectors.
</param>
<param name="lengths">
An array of numbers representing either the lengths of the vectors or the radial coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
<param name="directions">
An array of numbers representing either the directions of the vectors or the angular coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
<param name="lengthScale">
The method to specify vector lengths and directions, which must be one of the predefined constants in the table above.
</param>
<param name="color">
The color to draw the data points. -1 means that the color is automatically selected from the palette.
</param>
<param name="name">
The name of the layer. The name will be used in the legend box, if one is available. An empty string means the layer has no name.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setAngles(System.Double[])">
<summary>
Sets the angular coordinates of the data points.
</summary>
<param name="angles">
An array of numbers representing the angular coordinates of the data points.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setBorderColor(System.Int32)">
<summary>
Sets the border color for drawing the data on the layer.
</summary>
<param name="edgeColor">
The border color.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setLineWidth(System.Int32)">
<summary>
Sets the line width of lines when drawing the data on the layer.
</summary>
<param name="w">
The width of the line in pixels.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setDataSymbol(System.Int32)">
<summary>
Uses one of the built-in symbols as the graphics symbol to plot the data points.
</summary>
<param name="symbol">
One of the predefined shape constants representing the symbol shape. See "Shape Specification" for the available built-in shapes.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setDataSymbol(System.Int32,System.Int32)">
<summary>
Uses one of the built-in symbols as the graphics symbol to plot the data points.
</summary>
<param name="symbol">
One of the predefined shape constants representing the symbol shape. See "Shape Specification" for the available built-in shapes.
</param>
<param name="size">
The width and height of the symbol in pixels.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setDataSymbol(System.Int32,System.Int32,System.Int32)">
<summary>
Uses one of the built-in symbols as the graphics symbol to plot the data points.
</summary>
<param name="symbol">
One of the predefined shape constants representing the symbol shape. See "Shape Specification" for the available built-in shapes.
</param>
<param name="size">
The width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means the color of the data representation will be used.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setDataSymbol(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Uses one of the built-in symbols as the graphics symbol to plot the data points.
</summary>
<param name="symbol">
One of the predefined shape constants representing the symbol shape. See "Shape Specification" for the available built-in shapes.
</param>
<param name="size">
The width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means the color of the data representation will be used.
</param>
<param name="edgeColor">
The edge color used to draw the edge of the symbol. -1 means the border color of the data representation will be used.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setDataSymbol(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Uses one of the built-in symbols as the graphics symbol to plot the data points.
</summary>
<param name="symbol">
One of the predefined shape constants representing the symbol shape. See "Shape Specification" for the available built-in shapes.
</param>
<param name="size">
The width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means the color of the data representation will be used.
</param>
<param name="edgeColor">
The edge color used to draw the edge of the symbol. -1 means the border color of the data representation will be used.
</param>
<param name="lineWidth">
The line width used for drawing the symbols.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setDataSymbol(System.String)">
<summary>
Load an image from a file and use it as the graphics symbol to plot the data points.
</summary>
<param name="image">
The filename of the image file. The image type is determined based on file extension, which must be png, jpg/jpeg, gif or wbmp/wmp.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setDataSymbol2(System.String)">
<summary>
Load an image from a file and use it as the graphics symbol to plot the data points.
</summary>
<param name="image">
The filename of the image file. The image type is determined based on file extension, which must be png, jpg/jpeg, gif or wbmp/wmp.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setDataSymbol(ChartDirector.DrawArea)">
<summary>
Uses a "DrawArea" object as the graphics symbol to plot the data points.
</summary>
<param name="obj">
A "DrawArea" object to be used as the symbol.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setDataSymbol3(ChartDirector.DrawArea)">
<summary>
Uses a "DrawArea" object as the graphics symbol to plot the data points.
</summary>
<param name="obj">
A "DrawArea" object to be used as the symbol.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setDataSymbol(System.Int32[])">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setDataSymbol(System.Int32[],System.Int32)">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
<param name="size">
The nominal width and height of the symbol in pixels.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setDataSymbol(System.Int32[],System.Int32,System.Int32)">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
<param name="size">
The nominal width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means the color of the data representation will be used.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setDataSymbol(System.Int32[],System.Int32,System.Int32,System.Int32)">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
<param name="size">
The nominal width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means the color of the data representation will be used.
</param>
<param name="edgeColor">
The edge color used to draw the edge of the symbol. -1 means the border color of the data representation will be used.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setDataSymbol4(System.Int32[])">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setDataSymbol4(System.Int32[],System.Int32)">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
<param name="size">
The nominal width and height of the symbol in pixels.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setDataSymbol4(System.Int32[],System.Int32,System.Int32)">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
<param name="size">
The nominal width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means the color of the data representation will be used.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setDataSymbol4(System.Int32[],System.Int32,System.Int32,System.Int32)">
<summary>
Uses a custom polygon as the graphics symbol to plot the data points.
</summary>
<param name="polygon">
An array of integers representing the coordinates the polygon vertices. See "Shape Specification" on how the custom shape is defined.
</param>
<param name="size">
The nominal width and height of the symbol in pixels.
</param>
<param name="fillColor">
The color used to fill the symbol. -1 means the color of the data representation will be used.
</param>
<param name="edgeColor">
The edge color used to draw the edge of the symbol. -1 means the border color of the data representation will be used.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setSymbolOffset(System.Int32,System.Int32)">
<summary>
Offset the symbols in the x and y directions in pixel unit.
</summary>
<param name="xOffset">
The x offset in pixels. A positive value mean shifting to the right.
</param>
<param name="yOffset">
The y offset in pixels. A positive value mean shifting to the bottom.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setSymbolScale(System.Double[])">
<summary>
Sets the size of the symbol for each data point (for creating bubble charts).
</summary>
<param name="zData">
The sizes of the symbols, expressed using the unit defined by the scaleType argument.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setSymbolScale(System.Double[],System.Int32)">
<summary>
Sets the size of the symbol for each data point (for creating bubble charts).
</summary>
<param name="zData">
The sizes of the symbols, expressed using the unit defined by the scaleType argument.
</param>
<param name="scaleType">
The unit for zData, which must be one of the predefined constants in the table above.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setDataLabelStyle">
<summary>
Enables data labels and sets their styles.
</summary>
</member>
<member name="M:ChartDirector.PolarLayer.setDataLabelStyle(System.String)">
<summary>
Enables data labels and sets their styles.
</summary>
<param name="font">
The font used to draw the labels.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setDataLabelStyle(System.String,System.Double)">
<summary>
Enables data labels and sets their styles.
</summary>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setDataLabelStyle(System.String,System.Double,System.Int32)">
<summary>
Enables data labels and sets their styles.
</summary>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels.
</param>
<param name="fontColor">
The color used to draw the labels.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setDataLabelStyle(System.String,System.Double,System.Int32,System.Double)">
<summary>
Enables data labels and sets their styles.
</summary>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels.
</param>
<param name="fontColor">
The color used to draw the labels.
</param>
<param name="fontAngle">
The rotation angle of the labels.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setDataLabelFormat(System.String)">
<summary>
Sets the data label format.
</summary>
<param name="formatString">
The format string.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.addCustomDataLabel(System.Int32,System.String)">
<summary>
Adds a custom data label to a data point.
</summary>
<param name="i">
The data point index of the data point. The first data point is 0; the nth data point is (n - 1).
</param>
<param name="label">
A text string representing the data label. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.addCustomDataLabel(System.Int32,System.String,System.String)">
<summary>
Adds a custom data label to a data point.
</summary>
<param name="i">
The data point index of the data point. The first data point is 0; the nth data point is (n - 1).
</param>
<param name="label">
A text string representing the data label. "Parameter Substitution and Formatting" is supported.
</param>
<param name="font">
The font used to draw the label.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.addCustomDataLabel(System.Int32,System.String,System.String,System.Double)">
<summary>
Adds a custom data label to a data point.
</summary>
<param name="i">
The data point index of the data point. The first data point is 0; the nth data point is (n - 1).
</param>
<param name="label">
A text string representing the data label. "Parameter Substitution and Formatting" is supported.
</param>
<param name="font">
The font used to draw the label.
</param>
<param name="fontSize">
The font size used to draw the label.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.addCustomDataLabel(System.Int32,System.String,System.String,System.Double,System.Int32)">
<summary>
Adds a custom data label to a data point.
</summary>
<param name="i">
The data point index of the data point. The first data point is 0; the nth data point is (n - 1).
</param>
<param name="label">
A text string representing the data label. "Parameter Substitution and Formatting" is supported.
</param>
<param name="font">
The font used to draw the label.
</param>
<param name="fontSize">
The font size used to draw the label.
</param>
<param name="fontColor">
The color used to draw the label.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.addCustomDataLabel(System.Int32,System.String,System.String,System.Double,System.Int32,System.Double)">
<summary>
Adds a custom data label to a data point.
</summary>
<param name="i">
The data point index of the data point. The first data point is 0; the nth data point is (n - 1).
</param>
<param name="label">
A text string representing the data label. "Parameter Substitution and Formatting" is supported.
</param>
<param name="font">
The font used to draw the label.
</param>
<param name="fontSize">
The font size used to draw the label.
</param>
<param name="fontColor">
The color used to draw the label.
</param>
<param name="fontAngle">
The rotation angle of the label.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setImageMapWidth(System.Int32)">
<summary>
Sets the effective size of a data point for producing image maps.
</summary>
<param name="width">
The effective width and height of the data point for the purpose of producing image maps.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.getImageCoor(System.Int32)">
<summary>
Gets the image map coordinates of a data point.
</summary>
<param name="dataItem">
The data point index of the data point. The first data point is 0; the nth data point is (n - 1).
</param>
</member>
<member name="M:ChartDirector.PolarLayer.getImageCoor(System.Int32,System.Int32,System.Int32)">
<summary>
Gets the image map coordinates of a data point.
</summary>
<param name="dataItem">
The data point index of the data point. The first data point is 0; the nth data point is (n - 1).
</param>
<param name="offsetX">
An offset to be added to all x coordinates in the image map. This is useful if the current image will be shifted and inserted into another image. In this case, the image map will need to be shifted by the same offset.
</param>
<param name="offsetY">
An offset to be added to all y coordinates in the image map. See offsetX above for description.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.getHTMLImageMap(System.String)">
<summary>
Generates an HTML image map for all data points on the layer.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.getHTMLImageMap(System.String,System.String)">
<summary>
Generates an HTML image map for all data points on the layer.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.getHTMLImageMap(System.String,System.String,System.String)">
<summary>
Generates an HTML image map for all data points on the layer.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
<param name="extraAttr">
A text string to specify additional attributes to add to the &lt;area&gt; tag. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.getHTMLImageMap(System.String,System.String,System.String,System.Int32,System.Int32)">
<summary>
Generates an HTML image map for all data points on the layer.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported. Use an empty string if no href attribute is needed.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
<param name="extraAttr">
A text string to specify additional attributes to add to the &lt;area&gt; tag. "Parameter Substitution and Formatting" is supported.
</param>
<param name="offsetX">
An offset to be added to all x coordinates in the image map. This is useful if the current image will be shifted and inserted into another image. In this case, the image map will need to be shifted by the same offset.
</param>
<param name="offsetY">
An offset to be added to all y coordinates in the image map. See offsetX above for description.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setHTMLImageMap(System.String)">
<summary>
Override the default arguments used when generating HTML image map for the layer.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setHTMLImageMap(System.String,System.String)">
<summary>
Override the default arguments used when generating HTML image map for the layer.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.PolarLayer.setHTMLImageMap(System.String,System.String,System.String)">
<summary>
Override the default arguments used when generating HTML image map for the layer.
</summary>
<param name="url">
The URL to be used in the "href" attribute of the image map. "Parameter Substitution and Formatting" is supported.
</param>
<param name="queryFormat">
A text string representing the template of the query parameters to be appended to the URL. "Parameter Substitution and Formatting" is supported.
</param>
<param name="extraAttr">
A text string to specify additional attributes to add to the &lt;area&gt; tag. "Parameter Substitution and Formatting" is supported.
</param>
</member>
<member name="M:ChartDirector.PolarLineLayer.setCloseLoop(System.Boolean)">
<summary>
Specifies whether the polar line should form a close loop (joining the last point to the first point) or not.
</summary>
<param name="b">
A true value means the polar line should form a close loop. A false value means the polar line should not form a close loop.
</param>
</member>
<member name="M:ChartDirector.PolarLineLayer.setGapColor(System.Int32)">
<summary>
Sets the color and style of the line used for jumping across "NoValue" data points.
</summary>
<param name="lineColor">
The line color of the line used for jumping across "NoValue" data points
</param>
</member>
<member name="M:ChartDirector.PolarLineLayer.setGapColor(System.Int32,System.Int32)">
<summary>
Sets the color and style of the line used for jumping across "NoValue" data points.
</summary>
<param name="lineColor">
The line color of the line used for jumping across "NoValue" data points
</param>
<param name="lineWidth">
The line width of the line used for jumping across "NoValue" data points. -1 means the width will be the same as the line width of the line for drawing normal data points.
</param>
</member>
<member name="M:ChartDirector.PolarSplineLineLayer.setTension(System.Double)">
<summary>
Sets the tension to use when computing the spline curve.
</summary>
<param name="tension">
The tension of the spline, which should be between -1 and 1.
</param>
</member>
<member name="M:ChartDirector.PolarSplineAreaLayer.setTension(System.Double)">
<summary>
Sets the tension to use when computing the spline curve.
</summary>
<param name="tension">
The tension of the spline, which should be between -1 and 1.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.#ctor(System.Int32,System.Int32)">
<summary>
Creates a new "PyramidChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.#ctor(System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "PyramidChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "PyramidChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
<param name="edgeColor">
The edge color of the chart.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "PyramidChart" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
<param name="edgeColor">
The edge color of the chart.
</param>
<param name="raisedEffect">
The 3D border width. For positive values, the border will appear raised. For negative values, the border will appear depressed. A zero value means the border will appear flat.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setPyramidSize(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the position and size of the pyramid in a pyramid chart.
</summary>
<param name="cx">
The x-coordinate of the center of the pyramid. The center of the pyramid is the midpoint of the vertical axis of the pyramid.
</param>
<param name="cy">
The y-coordinate of the center of the pyramid. The center of the pyramid is the midpoint of the vertical axis of the pyramid.
</param>
<param name="radius">
For a square pyramid, it is the length of the square. For a pyramid with other regular polygonal base, it is the radius of the circumcircle of the base.
</param>
<param name="height">
The height of the pyramid.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setConeSize(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the position and size of the cone in a cone chart.
</summary>
<param name="cx">
The x-coordinate of the center of the cone. The center of the cone is the midpoint of the vertical axis of the cone.
</param>
<param name="cy">
The y-coordinate of the center of the cone. The center of the cone is the midpoint of the vertical axis of the cone.
</param>
<param name="radius">
The radius of the base of the cone.
</param>
<param name="height">
The height of the cone.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setFunnelSize(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the position and size of the funnel in a funnel chart.
</summary>
<param name="cx">
The x-coordinate of the center of the funnel. The center of the funnel is the midpoint of the vertical axis of the funnel.
</param>
<param name="cy">
The y-coordinate of the center of the funnel. The center of the funnel is the midpoint of the vertical axis of the funnel.
</param>
<param name="radius">
The radius of the mouth of the funnel.
</param>
<param name="height">
The height of the funnel, inclusive of the tube.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setFunnelSize(System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
<summary>
Sets the position and size of the funnel in a funnel chart.
</summary>
<param name="cx">
The x-coordinate of the center of the funnel. The center of the funnel is the midpoint of the vertical axis of the funnel.
</param>
<param name="cy">
The y-coordinate of the center of the funnel. The center of the funnel is the midpoint of the vertical axis of the funnel.
</param>
<param name="radius">
The radius of the mouth of the funnel.
</param>
<param name="height">
The height of the funnel, inclusive of the tube.
</param>
<param name="tubeRadius">
The radius of the tube, as a ratio to the radius of the mouth of the funnel.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setFunnelSize(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
<summary>
Sets the position and size of the funnel in a funnel chart.
</summary>
<param name="cx">
The x-coordinate of the center of the funnel. The center of the funnel is the midpoint of the vertical axis of the funnel.
</param>
<param name="cy">
The y-coordinate of the center of the funnel. The center of the funnel is the midpoint of the vertical axis of the funnel.
</param>
<param name="radius">
The radius of the mouth of the funnel.
</param>
<param name="height">
The height of the funnel, inclusive of the tube.
</param>
<param name="tubeRadius">
The radius of the tube, as a ratio to the radius of the mouth of the funnel.
</param>
<param name="tubeHeight">
The height (length) of the tube, as a ratio to the total height of the funnel. It must be between 0 to 1.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setViewAngle(System.Double)">
<summary>
Sets the 3D view angles.
</summary>
<param name="elevation">
The elevation angle in degrees.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setViewAngle(System.Double,System.Double)">
<summary>
Sets the 3D view angles.
</summary>
<param name="elevation">
The elevation angle in degrees.
</param>
<param name="rotation">
The rotation angle in degrees.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setViewAngle(System.Double,System.Double,System.Double)">
<summary>
Sets the 3D view angles.
</summary>
<param name="elevation">
The elevation angle in degrees.
</param>
<param name="rotation">
The rotation angle in degrees.
</param>
<param name="twist">
The twist angle in degrees.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setPyramidSides(System.Int32)">
<summary>
Sets the number of sides of the base polygon in a pyramid chart.
</summary>
<param name="noOfSides">
The number of sides of the base polygon in a pyramid chart.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setCenterLabel">
<summary>
Adds labels to the center of the pyramid layers.
</summary>
</member>
<member name="M:ChartDirector.PyramidChart.setCenterLabel(System.String)">
<summary>
Adds labels to the center of the pyramid layers.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setCenterLabel(System.String,System.String)">
<summary>
Adds labels to the center of the pyramid layers.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
<param name="font">
The font style. "{skip}" means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setCenterLabel(System.String,System.String,System.Double)">
<summary>
Adds labels to the center of the pyramid layers.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
<param name="font">
The font style. "{skip}" means to keep the existing value unchanged.
</param>
<param name="fontSize">
The font size in points. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setCenterLabel(System.String,System.String,System.Double,System.Int32)">
<summary>
Adds labels to the center of the pyramid layers.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
<param name="font">
The font style. "{skip}" means to keep the existing value unchanged.
</param>
<param name="fontSize">
The font size in points. -1 means to keep the existing value unchanged.
</param>
<param name="fontColor">
The font color. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setRightLabel">
<summary>
Adds labels to the right of the pyramid layers.
</summary>
</member>
<member name="M:ChartDirector.PyramidChart.setRightLabel(System.String)">
<summary>
Adds labels to the right of the pyramid layers.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setRightLabel(System.String,System.String)">
<summary>
Adds labels to the right of the pyramid layers.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
<param name="font">
The font style. "{skip}" means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setRightLabel(System.String,System.String,System.Double)">
<summary>
Adds labels to the right of the pyramid layers.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
<param name="font">
The font style. "{skip}" means to keep the existing value unchanged.
</param>
<param name="fontSize">
The font size in points. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setRightLabel(System.String,System.String,System.Double,System.Int32)">
<summary>
Adds labels to the right of the pyramid layers.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
<param name="font">
The font style. "{skip}" means to keep the existing value unchanged.
</param>
<param name="fontSize">
The font size in points. -1 means to keep the existing value unchanged.
</param>
<param name="fontColor">
The font color. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setLeftLabel">
<summary>
Adds labels to the left of the pyramid layers.
</summary>
</member>
<member name="M:ChartDirector.PyramidChart.setLeftLabel(System.String)">
<summary>
Adds labels to the left of the pyramid layers.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setLeftLabel(System.String,System.String)">
<summary>
Adds labels to the left of the pyramid layers.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
<param name="font">
The font style. "{skip}" means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setLeftLabel(System.String,System.String,System.Double)">
<summary>
Adds labels to the left of the pyramid layers.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
<param name="font">
The font style. "{skip}" means to keep the existing value unchanged.
</param>
<param name="fontSize">
The font size in points. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setLeftLabel(System.String,System.String,System.Double,System.Int32)">
<summary>
Adds labels to the left of the pyramid layers.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
<param name="font">
The font style. "{skip}" means to keep the existing value unchanged.
</param>
<param name="fontSize">
The font size in points. -1 means to keep the existing value unchanged.
</param>
<param name="fontColor">
The font color. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setJoinLine(System.Int32)">
<summary>
Sets the color and line width of the join lines that join the pyramid layers with the left and right labels.
</summary>
<param name="color">
The color of the join line. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setJoinLine(System.Int32,System.Int32)">
<summary>
Sets the color and line width of the join lines that join the pyramid layers with the left and right labels.
</summary>
<param name="color">
The color of the join line. -1 means to keep the existing value unchanged.
</param>
<param name="width">
The width of the line join. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setJoinLineGap(System.Int32)">
<summary>
Sets the gaps of the join lines that join the pyramid layers with the left and right labels.
</summary>
<param name="pyramidGap">
The gap in pixels between the starting point of the join line and the pyramid layer edge.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setJoinLineGap(System.Int32,System.Int32)">
<summary>
Sets the gaps of the join lines that join the pyramid layers with the left and right labels.
</summary>
<param name="pyramidGap">
The gap in pixels between the starting point of the join line and the pyramid layer edge.
</param>
<param name="pyramidMargin">
The distance in pixels between the ending point of the join line and the pyramid bounding box.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setJoinLineGap(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the gaps of the join lines that join the pyramid layers with the left and right labels.
</summary>
<param name="pyramidGap">
The gap in pixels between the starting point of the join line and the pyramid layer edge.
</param>
<param name="pyramidMargin">
The distance in pixels between the ending point of the join line and the pyramid bounding box.
</param>
<param name="textGap">
The gap in pixels between the label text box and the ending point of the join line.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setGradientShading(System.Double,System.Double)">
<summary>
Sets gradient shading mode.
</summary>
<param name="startBrightness">
The brightness at the starting point.
</param>
<param name="endBrightness">
The brightness at the ending point.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setLighting">
<summary>
Sets Phong lighting mode.
</summary>
</member>
<member name="M:ChartDirector.PyramidChart.setLighting(System.Double,System.Double,System.Double,System.Double)">
<summary>
Sets Phong lighting mode.
</summary>
<param name="ambientIntensity">
The ambient reflection coefficient of the Phong lighting model.
</param>
<param name="diffuseIntensity">
The diffuse reflection coefficient of the Phong lighting model.
</param>
<param name="specularIntensity">
The specular reflection coefficient of the Phong lighting model.
</param>
<param name="shininess">
The shininess coefficient of the Phong lighting model.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setLayerGap(System.Double)">
<summary>
Sets the gaps between pyramid layers.
</summary>
<param name="layerGap">
The gap between layers as a ratio to the height of the pyramid. The gap must be greater than or equals 0. The sum of all gaps must be less than 1.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setLayerBorder(System.Int32)">
<summary>
Sets the color and line width of the layer border.
</summary>
<param name="color">
The color of the layer border. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setLayerBorder(System.Int32,System.Int32)">
<summary>
Sets the color and line width of the layer border.
</summary>
<param name="color">
The color of the layer border. -1 means to keep the existing value unchanged.
</param>
<param name="width">
The width of the layer border. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setData(System.Double[])">
<summary>
Sets the data used to draw the pyramid chart.
</summary>
<param name="data">
An array of numbers representing the data values.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.setData(System.Double[],System.String[])">
<summary>
Sets the data used to draw the pyramid chart.
</summary>
<param name="data">
An array of numbers representing the data values.
</param>
<param name="labels">
An array of text strings representing the labels of the layers. An empty array means no layer label.
</param>
</member>
<member name="M:ChartDirector.PyramidChart.getLayer(System.Int32)">
<summary>
Retrieves the "PyramidLayer" object representing a single pyramid layer in the pyramid chart.
</summary>
<param name="layerNo">
The layer number of the pyramid layer to retrieve, starting from 0. The first pyramid layer is 0. The nth pyramid layer is (n-1).
</param>
</member>
<member name="M:ChartDirector.PyramidLayer.setCenterLabel">
<summary>
Adds a label to the center of the pyramid layer.
</summary>
</member>
<member name="M:ChartDirector.PyramidLayer.setCenterLabel(System.String)">
<summary>
Adds a label to the center of the pyramid layer.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidLayer.setCenterLabel(System.String,System.String)">
<summary>
Adds a label to the center of the pyramid layer.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
<param name="font">
The font style. "{skip}" means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidLayer.setCenterLabel(System.String,System.String,System.Double)">
<summary>
Adds a label to the center of the pyramid layer.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
<param name="font">
The font style. "{skip}" means to keep the existing value unchanged.
</param>
<param name="fontSize">
The font size in points. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidLayer.setCenterLabel(System.String,System.String,System.Double,System.Int32)">
<summary>
Adds a label to the center of the pyramid layer.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
<param name="font">
The font style. "{skip}" means to keep the existing value unchanged.
</param>
<param name="fontSize">
The font size in points. -1 means to keep the existing value unchanged.
</param>
<param name="fontColor">
The font color. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidLayer.setRightLabel">
<summary>
Adds a label to the right of the pyramid layer.
</summary>
</member>
<member name="M:ChartDirector.PyramidLayer.setRightLabel(System.String)">
<summary>
Adds a label to the right of the pyramid layer.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidLayer.setRightLabel(System.String,System.String)">
<summary>
Adds a label to the right of the pyramid layer.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
<param name="font">
The font style. "{skip}" means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidLayer.setRightLabel(System.String,System.String,System.Double)">
<summary>
Adds a label to the right of the pyramid layer.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
<param name="font">
The font style. "{skip}" means to keep the existing value unchanged.
</param>
<param name="fontSize">
The font size in points. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidLayer.setRightLabel(System.String,System.String,System.Double,System.Int32)">
<summary>
Adds a label to the right of the pyramid layer.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
<param name="font">
The font style. "{skip}" means to keep the existing value unchanged.
</param>
<param name="fontSize">
The font size in points. -1 means to keep the existing value unchanged.
</param>
<param name="fontColor">
The font color. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidLayer.setLeftLabel">
<summary>
Adds a label to the left of the pyramid layer.
</summary>
</member>
<member name="M:ChartDirector.PyramidLayer.setLeftLabel(System.String)">
<summary>
Adds a label to the left of the pyramid layer.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidLayer.setLeftLabel(System.String,System.String)">
<summary>
Adds a label to the left of the pyramid layer.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
<param name="font">
The font style. "{skip}" means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidLayer.setLeftLabel(System.String,System.String,System.Double)">
<summary>
Adds a label to the left of the pyramid layer.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
<param name="font">
The font style. "{skip}" means to keep the existing value unchanged.
</param>
<param name="fontSize">
The font size in points. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidLayer.setLeftLabel(System.String,System.String,System.Double,System.Int32)">
<summary>
Adds a label to the left of the pyramid layer.
</summary>
<param name="template">
The label template. "{skip}" means to keep the existing value unchanged.
</param>
<param name="font">
The font style. "{skip}" means to keep the existing value unchanged.
</param>
<param name="fontSize">
The font size in points. -1 means to keep the existing value unchanged.
</param>
<param name="fontColor">
The font color. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidLayer.setJoinLine(System.Int32)">
<summary>
Sets the color and line width of the join line that joins the pyramid layer with the left and right labels.
</summary>
<param name="color">
The color of the join line. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidLayer.setJoinLine(System.Int32,System.Int32)">
<summary>
Sets the color and line width of the join line that joins the pyramid layer with the left and right labels.
</summary>
<param name="color">
The color of the join line. -1 means to keep the existing value unchanged.
</param>
<param name="width">
The width of the line join. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidLayer.setJoinLineGap(System.Int32)">
<summary>
Sets the gaps of the join line that joins the pyramid layer with the left and right labels.
</summary>
<param name="pyramidGap">
The gap in pixels between the starting point of the join line and the pyramid layer edge.
</param>
</member>
<member name="M:ChartDirector.PyramidLayer.setJoinLineGap(System.Int32,System.Int32)">
<summary>
Sets the gaps of the join line that joins the pyramid layer with the left and right labels.
</summary>
<param name="pyramidGap">
The gap in pixels between the starting point of the join line and the pyramid layer edge.
</param>
<param name="pyramidMargin">
The distance in pixels between the ending point of the join line and the pyramid bounding box.
</param>
</member>
<member name="M:ChartDirector.PyramidLayer.setJoinLineGap(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the gaps of the join line that joins the pyramid layer with the left and right labels.
</summary>
<param name="pyramidGap">
The gap in pixels between the starting point of the join line and the pyramid layer edge.
</param>
<param name="pyramidMargin">
The distance in pixels between the ending point of the join line and the pyramid bounding box.
</param>
<param name="textGap">
The gap in pixels between the label text box and the ending point of the join line.
</param>
</member>
<member name="M:ChartDirector.PyramidLayer.setColor(System.Int32)">
<summary>
Sets the color of the pyramid layer.
</summary>
<param name="color">
The color of the pyramid layer.
</param>
</member>
<member name="M:ChartDirector.PyramidLayer.setLayerGap(System.Double)">
<summary>
Sets the gap between this pyramid layer and the next pyramid layer.
</summary>
<param name="layerGap">
The gap between layers as a ratio to the height of the pyramid. The gap must be greater than or equals 0. The sum of all gaps must be less than 1.
</param>
</member>
<member name="M:ChartDirector.PyramidLayer.setLayerBorder(System.Int32)">
<summary>
Sets the color and line width of the layer border.
</summary>
<param name="color">
The color of the layer border. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.PyramidLayer.setLayerBorder(System.Int32,System.Int32)">
<summary>
Sets the color and line width of the layer border.
</summary>
<param name="color">
The color of the layer border. -1 means to keep the existing value unchanged.
</param>
<param name="width">
The width of the layer border. -1 means to keep the existing value unchanged.
</param>
</member>
<member name="M:ChartDirector.DrawArea.#ctor">
<summary>
Creates a DrawArea object.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.setSize(System.Int32,System.Int32)">
<summary>
Sets the size and background color of the drawing surface.
</summary>
<param name="width">
The width of the drawing surface in pixels.
</param>
<param name="height">
The height of the drawing surface in pixels.
</param>
</member>
<member name="M:ChartDirector.DrawArea.setSize(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the size and background color of the drawing surface.
</summary>
<param name="width">
The width of the drawing surface in pixels.
</param>
<param name="height">
The height of the drawing surface in pixels.
</param>
<param name="bgColor">
The background color of the drawing surface.
</param>
</member>
<member name="M:ChartDirector.DrawArea.resize(System.Int32,System.Int32)">
<summary>
Resize the drawing surface.
</summary>
<param name="newWidth">
The new width of the drawing surface in pixels.
</param>
<param name="newHeight">
The new height of the drawing surface in pixels.
</param>
</member>
<member name="M:ChartDirector.DrawArea.resize(System.Int32,System.Int32,System.Int32)">
<summary>
Resize the drawing surface.
</summary>
<param name="newWidth">
The new width of the drawing surface in pixels.
</param>
<param name="newHeight">
The new height of the drawing surface in pixels.
</param>
<param name="filter">
The filter to use for "re-sampling".
</param>
</member>
<member name="M:ChartDirector.DrawArea.resize(System.Int32,System.Int32,System.Int32,System.Double)">
<summary>
Resize the drawing surface.
</summary>
<param name="newWidth">
The new width of the drawing surface in pixels.
</param>
<param name="newHeight">
The new height of the drawing surface in pixels.
</param>
<param name="filter">
The filter to use for "re-sampling".
</param>
<param name="blur">
The blur factor to use for "re-sampling".
</param>
</member>
<member name="M:ChartDirector.DrawArea.getWidth">
<summary>
Gets the width of the drawing surface.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.getHeight">
<summary>
Gets the height of the drawing surface.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.setClipRect(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the clip rectangle.
</summary>
<param name="left">
The x coordinate of the left side of the clip rectangle.
</param>
<param name="top">
The y coordinate of the top side of the clip rectangle.
</param>
<param name="right">
The x coordinate of the right side of the clip rectangle.
</param>
<param name="bottom">
The y coordinate of the bottom side of the clip rectangle.
</param>
</member>
<member name="M:ChartDirector.DrawArea.setBgColor(System.Int32)">
<summary>
Sets the background color of the image.
</summary>
<param name="c">
The background color of the image.
</param>
</member>
<member name="M:ChartDirector.DrawArea.move(System.Double,System.Double)">
<summary>
Moves the drawing surface.
</summary>
<param name="xOffset">
The pixel offset to move towards the left.
</param>
<param name="yOffset">
The pixel offset to move towards the bottom.
</param>
</member>
<member name="M:ChartDirector.DrawArea.move(System.Double,System.Double,System.Int32)">
<summary>
Moves the drawing surface.
</summary>
<param name="xOffset">
The pixel offset to move towards the left.
</param>
<param name="yOffset">
The pixel offset to move towards the bottom.
</param>
<param name="bgColor">
The background color used to fill the space left after moving.
</param>
</member>
<member name="M:ChartDirector.DrawArea.move(System.Double,System.Double,System.Int32,System.Int32)">
<summary>
Moves the drawing surface.
</summary>
<param name="xOffset">
The pixel offset to move towards the left.
</param>
<param name="yOffset">
The pixel offset to move towards the bottom.
</param>
<param name="bgColor">
The background color used to fill the space left after moving.
</param>
<param name="filter">
The filter to use for "re-sampling". (Only applies for fractional pixel offsets.)
</param>
</member>
<member name="M:ChartDirector.DrawArea.move(System.Double,System.Double,System.Int32,System.Int32,System.Double)">
<summary>
Moves the drawing surface.
</summary>
<param name="xOffset">
The pixel offset to move towards the left.
</param>
<param name="yOffset">
The pixel offset to move towards the bottom.
</param>
<param name="bgColor">
The background color used to fill the space left after moving.
</param>
<param name="filter">
The filter to use for "re-sampling". (Only applies for fractional pixel offsets.)
</param>
<param name="blur">
The blur factor to use for "re-sampling". (Only applies for fractional pixel offsets.)
</param>
</member>
<member name="M:ChartDirector.DrawArea.rotate(System.Double)">
<summary>
Rotate the drawing surface.
</summary>
<param name="angle">
The rotation angle measured clockwise in degrees.
</param>
</member>
<member name="M:ChartDirector.DrawArea.rotate(System.Double,System.Int32)">
<summary>
Rotate the drawing surface.
</summary>
<param name="angle">
The rotation angle measured clockwise in degrees.
</param>
<param name="bgColor">
The background color used to fill the space left after rotation.
</param>
</member>
<member name="M:ChartDirector.DrawArea.rotate(System.Double,System.Int32,System.Double)">
<summary>
Rotate the drawing surface.
</summary>
<param name="angle">
The rotation angle measured clockwise in degrees.
</param>
<param name="bgColor">
The background color used to fill the space left after rotation.
</param>
<param name="cx">
The x coordinate of the center of rotation. -1 means rotating about the center of the drawing surface.
</param>
</member>
<member name="M:ChartDirector.DrawArea.rotate(System.Double,System.Int32,System.Double,System.Double)">
<summary>
Rotate the drawing surface.
</summary>
<param name="angle">
The rotation angle measured clockwise in degrees.
</param>
<param name="bgColor">
The background color used to fill the space left after rotation.
</param>
<param name="cx">
The x coordinate of the center of rotation. -1 means rotating about the center of the drawing surface.
</param>
<param name="cy">
The y coordinate of the center of rotation. -1 means rotating about the center of the drawing surface.
</param>
</member>
<member name="M:ChartDirector.DrawArea.rotate(System.Double,System.Int32,System.Double,System.Double,System.Int32)">
<summary>
Rotate the drawing surface.
</summary>
<param name="angle">
The rotation angle measured clockwise in degrees.
</param>
<param name="bgColor">
The background color used to fill the space left after rotation.
</param>
<param name="cx">
The x coordinate of the center of rotation. -1 means rotating about the center of the drawing surface.
</param>
<param name="cy">
The y coordinate of the center of rotation. -1 means rotating about the center of the drawing surface.
</param>
<param name="filter">
The filter to use for "re-sampling".
</param>
</member>
<member name="M:ChartDirector.DrawArea.rotate(System.Double,System.Int32,System.Double,System.Double,System.Int32,System.Double)">
<summary>
Rotate the drawing surface.
</summary>
<param name="angle">
The rotation angle measured clockwise in degrees.
</param>
<param name="bgColor">
The background color used to fill the space left after rotation.
</param>
<param name="cx">
The x coordinate of the center of rotation. -1 means rotating about the center of the drawing surface.
</param>
<param name="cy">
The y coordinate of the center of rotation. -1 means rotating about the center of the drawing surface.
</param>
<param name="filter">
The filter to use for "re-sampling".
</param>
<param name="blur">
The blur factor to use for "re-sampling".
</param>
</member>
<member name="M:ChartDirector.DrawArea.hFlip">
<summary>
Flip the drawing surface along the central horizontal line.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.vFlip">
<summary>
Flip the drawing surface along the central vertical line.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.clone(ChartDirector.DrawArea,System.Int32,System.Int32,System.Int32)">
<summary>
Copy the current DrawArea object to another DrawArea object, with optional resizing.
</summary>
<param name="d">
The destination DrawArea object where the current DrawArea is copied to.
</param>
<param name="x">
The x coordinate of a reference point in the destination DrawArea object.
</param>
<param name="y">
The y coordinate of a reference point in the destination DrawArea object.
</param>
<param name="align">
The alignment of the current DrawArea relative to the reference point. See "Alignment Specification" for supported alignment types.
</param>
</member>
<member name="M:ChartDirector.DrawArea.clone(ChartDirector.DrawArea,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Copy the current DrawArea object to another DrawArea object, with optional resizing.
</summary>
<param name="d">
The destination DrawArea object where the current DrawArea is copied to.
</param>
<param name="x">
The x coordinate of a reference point in the destination DrawArea object.
</param>
<param name="y">
The y coordinate of a reference point in the destination DrawArea object.
</param>
<param name="align">
The alignment of the current DrawArea relative to the reference point. See "Alignment Specification" for supported alignment types.
</param>
<param name="newWidth">
The new width to which the current DrawArea will be resized to before copying. -1 means no resizing.
</param>
</member>
<member name="M:ChartDirector.DrawArea.clone(ChartDirector.DrawArea,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Copy the current DrawArea object to another DrawArea object, with optional resizing.
</summary>
<param name="d">
The destination DrawArea object where the current DrawArea is copied to.
</param>
<param name="x">
The x coordinate of a reference point in the destination DrawArea object.
</param>
<param name="y">
The y coordinate of a reference point in the destination DrawArea object.
</param>
<param name="align">
The alignment of the current DrawArea relative to the reference point. See "Alignment Specification" for supported alignment types.
</param>
<param name="newWidth">
The new width to which the current DrawArea will be resized to before copying. -1 means no resizing.
</param>
<param name="newHeight">
The new height to which the current DrawArea will be resized to before copying. -1 means no resizing.
</param>
</member>
<member name="M:ChartDirector.DrawArea.clone(ChartDirector.DrawArea,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Copy the current DrawArea object to another DrawArea object, with optional resizing.
</summary>
<param name="d">
The destination DrawArea object where the current DrawArea is copied to.
</param>
<param name="x">
The x coordinate of a reference point in the destination DrawArea object.
</param>
<param name="y">
The y coordinate of a reference point in the destination DrawArea object.
</param>
<param name="align">
The alignment of the current DrawArea relative to the reference point. See "Alignment Specification" for supported alignment types.
</param>
<param name="newWidth">
The new width to which the current DrawArea will be resized to before copying. -1 means no resizing.
</param>
<param name="newHeight">
The new height to which the current DrawArea will be resized to before copying. -1 means no resizing.
</param>
<param name="filter">
The filter to use for "re-sampling". (Only applies if there is resizing.)
</param>
</member>
<member name="M:ChartDirector.DrawArea.clone(ChartDirector.DrawArea,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
<summary>
Copy the current DrawArea object to another DrawArea object, with optional resizing.
</summary>
<param name="d">
The destination DrawArea object where the current DrawArea is copied to.
</param>
<param name="x">
The x coordinate of a reference point in the destination DrawArea object.
</param>
<param name="y">
The y coordinate of a reference point in the destination DrawArea object.
</param>
<param name="align">
The alignment of the current DrawArea relative to the reference point. See "Alignment Specification" for supported alignment types.
</param>
<param name="newWidth">
The new width to which the current DrawArea will be resized to before copying. -1 means no resizing.
</param>
<param name="newHeight">
The new height to which the current DrawArea will be resized to before copying. -1 means no resizing.
</param>
<param name="filter">
The filter to use for "re-sampling". (Only applies if there is resizing.)
</param>
<param name="blur">
The blur factor to use for "re-sampling". (Only applies if there is resizing.)
</param>
</member>
<member name="M:ChartDirector.DrawArea.pixel(System.Int32,System.Int32,System.Int32)">
<summary>
Draw a pixel.
</summary>
<param name="x">
The x coordinate of the pixel.
</param>
<param name="y">
The y coordinate of the pixel.
</param>
<param name="c">
The color of the pixel.
</param>
</member>
<member name="M:ChartDirector.DrawArea.getPixel(System.Int32,System.Int32)">
<summary>
Gets the color of a pixel.
</summary>
<param name="x">
The x coordinate of the pixel.
</param>
<param name="y">
The y coordinate of the pixel.
</param>
</member>
<member name="M:ChartDirector.DrawArea.line(System.Double,System.Double,System.Double,System.Double,System.Int32)">
<summary>
Draw a straight line.
</summary>
<param name="x1">
The x coordinate of the first end-point of the line.
</param>
<param name="y1">
The y coordinate of the first end-point of the line.
</param>
<param name="x2">
The x coordinate of the second end-point of the line.
</param>
<param name="y2">
The y coordinate of the second end-point of the line.
</param>
<param name="c">
The color of the line.
</param>
</member>
<member name="M:ChartDirector.DrawArea.line(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
<summary>
Draw a straight line.
</summary>
<param name="x1">
The x coordinate of the first end-point of the line.
</param>
<param name="y1">
The y coordinate of the first end-point of the line.
</param>
<param name="x2">
The x coordinate of the second end-point of the line.
</param>
<param name="y2">
The y coordinate of the second end-point of the line.
</param>
<param name="c">
The color of the line.
</param>
<param name="lineWidth">
The line width (thickness).
</param>
</member>
<member name="M:ChartDirector.DrawArea.hline(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Draws a horizontal line.
</summary>
<param name="x1">
The x coordinate of the first end-point of the line.
</param>
<param name="x2">
The x coordinate of the second end-point of the line.
</param>
<param name="y">
The y coordinate of the line.
</param>
<param name="c">
The color of the line.
</param>
</member>
<member name="M:ChartDirector.DrawArea.vline(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Draws a vertical line.
</summary>
<param name="y1">
The y coordinate of the first end-point of the line.
</param>
<param name="y2">
The y coordinate of the second end-point of the line.
</param>
<param name="x">
The x coordinate of the line.
</param>
<param name="c">
The color of the line.
</param>
</member>
<member name="M:ChartDirector.DrawArea.arc(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
<summary>
Draws a circular or elliptical arc.
</summary>
<param name="cx">
The x coordinate of the center of the circle or ellipse.
</param>
<param name="cy">
The y coordinate of the center of the circle or ellipse.
</param>
<param name="rx">
The horizontal radius of the circle or ellipse.
</param>
<param name="ry">
The vertical radius of the circle or ellipse.
</param>
<param name="a1">
The start angle of the arc in degrees. The angle is measured clockwise, with 0 degree being the upward pointing direction.
</param>
<param name="a2">
The end angle of the arc in degrees. The angle is measured clockwise, with 0 degree being the upward pointing direction.
</param>
<param name="c">
The color of the arc.
</param>
</member>
<member name="M:ChartDirector.DrawArea.rect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Draws a rectangle.
</summary>
<param name="x1">
The x coordinate of one corner of the rectangle.
</param>
<param name="y1">
The y coordinate of one corner of the rectangle.
</param>
<param name="x2">
The x coordinate of the opposite corner of the rectangle.
</param>
<param name="y2">
The y coordinate of the opposite corner of the rectangle.
</param>
<param name="edgeColor">
The border color. To disable border, set the edgeColor the same as the fillColor.
</param>
<param name="fillColor">
The fill color. To disable filling, set the fillColor to Transparent.
</param>
</member>
<member name="M:ChartDirector.DrawArea.rect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Draws a rectangle.
</summary>
<param name="x1">
The x coordinate of one corner of the rectangle.
</param>
<param name="y1">
The y coordinate of one corner of the rectangle.
</param>
<param name="x2">
The x coordinate of the opposite corner of the rectangle.
</param>
<param name="y2">
The y coordinate of the opposite corner of the rectangle.
</param>
<param name="edgeColor">
The border color. To disable border, set the edgeColor the same as the fillColor.
</param>
<param name="fillColor">
The fill color. To disable filling, set the fillColor to Transparent.
</param>
<param name="raisedEffect">
The 3D border width. For positive values, the border will appear raised. For negative values, the border will appear depressed. A zero value means the border will appear flat. This argument can also be used to specify "Chart.glassEffect", "Chart.softLighting", "Chart.cylinderEffect" or "Chart.flatBorder" effects.
</param>
</member>
<member name="M:ChartDirector.DrawArea.polygon(System.Object[],System.Int32,System.Int32)">
<summary>
Draws a polygon.
</summary>
<param name="points">
An array of points representing the vertices of a polygon. A single point is an array containing two numbers, representing the x and y coordinates.
</param>
<param name="edgeColor">
The border color. To disable border, set the edgeColor the same as the fillColor.
</param>
<param name="fillColor">
The fill color. To disable filling, set the fillColor to Transparent.
</param>
</member>
<member name="M:ChartDirector.DrawArea.surface(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Draws a parallelogram.
</summary>
<param name="x1">
The x coordinate of the first end-point of one line of the parallelogram.
</param>
<param name="y1">
The y coordinate of the first end-point of one line of the parallelogram.
</param>
<param name="x2">
The x coordinate of the second end-point of one line of the parallelogram.
</param>
<param name="y2">
The y coordinate of the second end-point of one line of the parallelogram.
</param>
<param name="depthX">
The x displacement of the line segment that is parallel to the line segment above.
</param>
<param name="depthY">
The y displacement of the line segment that is parallel to the line segment above.
</param>
<param name="edgeColor">
The border color. To disable border, set the edgeColor the same as the fillColor.
</param>
<param name="fillColor">
The fill color. To disable filling, set the fillColor to Transparent.
</param>
</member>
<member name="M:ChartDirector.DrawArea.sector(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32)">
<summary>
Draws a circular or elliptical sector.
</summary>
<param name="cx">
The x coordinate of the center of the circle or ellipse.
</param>
<param name="cy">
The y coordinate of the center of the circle or ellipse.
</param>
<param name="rx">
The horizontal radius of the circle or ellipse.
</param>
<param name="ry">
The vertical radius of the circle or ellipse.
</param>
<param name="a1">
The start angle of the sector in degrees. The angle is measured clockwise, with 0 degree being the upward pointing direction.
</param>
<param name="a2">
The end angle of the sector in degrees. The angle is measured clockwise, with 0 degree being the upward pointing direction.
</param>
<param name="edgeColor">
The border color. To disable border, set the edgeColor the same as the fillColor.
</param>
<param name="fillColor">
The fill color. To disable filling, set the fillColor to Transparent.
</param>
</member>
<member name="M:ChartDirector.DrawArea.cylinder(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Draws a cylinder surface as the area spanned by moving an arc.
</summary>
<param name="cx">
The x coordinate of the center of the circle or ellipse for the arc.
</param>
<param name="cy">
The y coordinate of the center of the circle or ellipse for the arc.
</param>
<param name="rx">
The horizontal radius of the circle or ellipse.
</param>
<param name="ry">
The vertical radius of the circle or ellipse.
</param>
<param name="a1">
The start angle of the arc. The angle is measured clockwise, with 0 degree being the upward pointing direction.
</param>
<param name="a2">
The end angle of the arc. The angle is measured clockwise, with 0 degree being the upward pointing direction.
</param>
<param name="depthX">
The x displacement representing the motion of the arc to span the cylinder.
</param>
<param name="depthY">
The y displacement representing the motion of the arc to span the cylinder.
</param>
<param name="edgeColor">
The border color. To disable border, set the edgeColor the same as the fillColor.
</param>
<param name="fillColor">
The fill color. To disable filling, set the fillColor to Transparent.
</param>
</member>
<member name="M:ChartDirector.DrawArea.circle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Draws a circle or an ellipse.
</summary>
<param name="cx">
The x coordinate of the center of the circle or ellipse.
</param>
<param name="cy">
The y coordinate of the center of the circle or ellipse.
</param>
<param name="rx">
The horizontal radius of the circle or ellipse.
</param>
<param name="ry">
The vertical radius of the circle or ellipse.
</param>
<param name="edgeColor">
The border color. To disable border, set the edgeColor the same as the fillColor.
</param>
<param name="fillColor">
The fill color. To disable filling, set the fillColor to Transparent.
</param>
</member>
<member name="M:ChartDirector.DrawArea.fill(System.Int32,System.Int32,System.Int32)">
<summary>
Flood fill a region using the specified color.
</summary>
<param name="x">
The x coordinate one pixel inside the region to be filled.
</param>
<param name="y">
The y coordinate one pixel inside the region to be filled.
</param>
<param name="color">
The color used to fill the region.
</param>
</member>
<member name="M:ChartDirector.DrawArea.fill(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Fill a region using the specified color, where the region is bounded by a given border color.
</summary>
<param name="x">
The x coordinate one pixel inside the region to be filled.
</param>
<param name="y">
The y coordinate one pixel inside the region to be filled.
</param>
<param name="color">
The color used to fill the region.
</param>
<param name="borderColor">
The color of the border that bounds the region.
</param>
</member>
<member name="M:ChartDirector.DrawArea.fill2(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Fill a region using the specified color, where the region is bounded by a given border color.
</summary>
<param name="x">
The x coordinate one pixel inside the region to be filled.
</param>
<param name="y">
The y coordinate one pixel inside the region to be filled.
</param>
<param name="color">
The color used to fill the region.
</param>
<param name="borderColor">
The color of the border that bounds the region.
</param>
</member>
<member name="M:ChartDirector.DrawArea.text(System.String,System.String,System.Double,System.Int32,System.Int32,System.Int32)">
<summary>
Draws text. This method is a simplified version of the "DrawArea.text2" method.
</summary>
<param name="str">
A string representing the text to be drawn. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font name. See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size in points.
</param>
<param name="x">
The x coordinate of the top-left corner of the text.
</param>
<param name="y">
The y coordinate of the top-left corner of the text.
</param>
<param name="color">
The color of the text.
</param>
</member>
<member name="M:ChartDirector.DrawArea.text(System.String,System.String,System.Int32,System.Double,System.Double,System.Double,System.Boolean,System.Int32,System.Int32,System.Int32)">
<summary>
Draws text.
</summary>
<param name="str">
A string representing the text to be drawn. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font name. See "Font Specification" for details on various font attributes.
</param>
<param name="fontIndex">
The font index in case the font name refers to a font collection. An index of 0 means the first font.
</param>
<param name="fontHeight">
The font height in points.
</param>
<param name="fontWidth">
The font width in points.
</param>
<param name="angle">
The rotation angle of the text. The angle is measured in degrees in clockwise direction.
</param>
<param name="vertical">
A true value means the text is layout vertically (from top to bottom). A false value means the is layout horizontally (from left to right).
</param>
<param name="x">
The x coordinate of a reference point to align the text.
</param>
<param name="y">
The y coordinate of a reference point to align the text.
</param>
<param name="color">
The color of the text.
</param>
</member>
<member name="M:ChartDirector.DrawArea.text(System.String,System.String,System.Int32,System.Double,System.Double,System.Double,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Draws text.
</summary>
<param name="str">
A string representing the text to be drawn. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font name. See "Font Specification" for details on various font attributes.
</param>
<param name="fontIndex">
The font index in case the font name refers to a font collection. An index of 0 means the first font.
</param>
<param name="fontHeight">
The font height in points.
</param>
<param name="fontWidth">
The font width in points.
</param>
<param name="angle">
The rotation angle of the text. The angle is measured in degrees in clockwise direction.
</param>
<param name="vertical">
A true value means the text is layout vertically (from top to bottom). A false value means the is layout horizontally (from left to right).
</param>
<param name="x">
The x coordinate of a reference point to align the text.
</param>
<param name="y">
The y coordinate of a reference point to align the text.
</param>
<param name="color">
The color of the text.
</param>
<param name="alignment">
The position of the text relative to the reference point. See "Alignment Specification" for supported alignment types.
</param>
</member>
<member name="M:ChartDirector.DrawArea.text2(System.String,System.String,System.Int32,System.Double,System.Double,System.Double,System.Boolean,System.Int32,System.Int32,System.Int32)">
<summary>
Draws text.
</summary>
<param name="str">
A string representing the text to be drawn. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font name. See "Font Specification" for details on various font attributes.
</param>
<param name="fontIndex">
The font index in case the font name refers to a font collection. An index of 0 means the first font.
</param>
<param name="fontHeight">
The font height in points.
</param>
<param name="fontWidth">
The font width in points.
</param>
<param name="angle">
The rotation angle of the text. The angle is measured in degrees in clockwise direction.
</param>
<param name="vertical">
A true value means the text is layout vertically (from top to bottom). A false value means the is layout horizontally (from left to right).
</param>
<param name="x">
The x coordinate of a reference point to align the text.
</param>
<param name="y">
The y coordinate of a reference point to align the text.
</param>
<param name="color">
The color of the text.
</param>
</member>
<member name="M:ChartDirector.DrawArea.text2(System.String,System.String,System.Int32,System.Double,System.Double,System.Double,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Draws text.
</summary>
<param name="str">
A string representing the text to be drawn. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font name. See "Font Specification" for details on various font attributes.
</param>
<param name="fontIndex">
The font index in case the font name refers to a font collection. An index of 0 means the first font.
</param>
<param name="fontHeight">
The font height in points.
</param>
<param name="fontWidth">
The font width in points.
</param>
<param name="angle">
The rotation angle of the text. The angle is measured in degrees in clockwise direction.
</param>
<param name="vertical">
A true value means the text is layout vertically (from top to bottom). A false value means the is layout horizontally (from left to right).
</param>
<param name="x">
The x coordinate of a reference point to align the text.
</param>
<param name="y">
The y coordinate of a reference point to align the text.
</param>
<param name="color">
The color of the text.
</param>
<param name="alignment">
The position of the text relative to the reference point. See "Alignment Specification" for supported alignment types.
</param>
</member>
<member name="M:ChartDirector.DrawArea.text(System.String,System.String,System.Double)">
<summary>
Creates a "TTFText" object representing a text block. This method is a simplified version of the "DrawArea.text4" method.
</summary>
<param name="str">
A string representing the text to be drawn. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font name. See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size in points.
</param>
</member>
<member name="M:ChartDirector.DrawArea.text3(System.String,System.String,System.Double)">
<summary>
Creates a "TTFText" object representing a text block. This method is a simplified version of the "DrawArea.text4" method.
</summary>
<param name="str">
A string representing the text to be drawn. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font name. See "Font Specification" for details on various font attributes.
</param>
<param name="fontSize">
The font size in points.
</param>
</member>
<member name="M:ChartDirector.DrawArea.text(System.String,System.String,System.Int32,System.Double,System.Double,System.Double,System.Boolean)">
<summary>
Creates a "TTFText" object representing a text block.
</summary>
<param name="text">
A string representing the text to be drawn. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font name. See "Font Specification" for details on various font attributes.
</param>
<param name="fontIndex">
The font index in case the font name refers to a font collection. An index of 0 means the first font.
</param>
<param name="fontHeight">
The font height in points.
</param>
<param name="fontWidth">
The font width in points.
</param>
<param name="angle">
The rotation angle of the text.
</param>
<param name="vertical">
A true value means the text is layout vertically (from top to bottom). A false value means the is layout horizontally (from left to right).
</param>
</member>
<member name="M:ChartDirector.DrawArea.text4(System.String,System.String,System.Int32,System.Double,System.Double,System.Double,System.Boolean)">
<summary>
Creates a "TTFText" object representing a text block.
</summary>
<param name="text">
A string representing the text to be drawn. See "ChartDirector Mark Up Language" on how to embed special tags in the text for sophisticated formatting.
</param>
<param name="font">
The font name. See "Font Specification" for details on various font attributes.
</param>
<param name="fontIndex">
The font index in case the font name refers to a font collection. An index of 0 means the first font.
</param>
<param name="fontHeight">
The font height in points.
</param>
<param name="fontWidth">
The font width in points.
</param>
<param name="angle">
The rotation angle of the text.
</param>
<param name="vertical">
A true value means the text is layout vertically (from top to bottom). A false value means the is layout horizontally (from left to right).
</param>
</member>
<member name="M:ChartDirector.DrawArea.setDefaultFonts(System.String)">
<summary>
Sets the defaults for normal, bold, italic and bold-italic fonts.
</summary>
<param name="normal">
The default normal font. This is the same as the first font in the font table.
</param>
</member>
<member name="M:ChartDirector.DrawArea.setDefaultFonts(System.String,System.String)">
<summary>
Sets the defaults for normal, bold, italic and bold-italic fonts.
</summary>
<param name="normal">
The default normal font. This is the same as the first font in the font table.
</param>
<param name="bold">
The default bold font. This is the same as the second font in the font table. An empty string means the default is unchanged.
</param>
</member>
<member name="M:ChartDirector.DrawArea.setDefaultFonts(System.String,System.String,System.String)">
<summary>
Sets the defaults for normal, bold, italic and bold-italic fonts.
</summary>
<param name="normal">
The default normal font. This is the same as the first font in the font table.
</param>
<param name="bold">
The default bold font. This is the same as the second font in the font table. An empty string means the default is unchanged.
</param>
<param name="italic">
The default italic font. This is the same as the third font in the font table. An empty string means the default is unchanged.
</param>
</member>
<member name="M:ChartDirector.DrawArea.setDefaultFonts(System.String,System.String,System.String,System.String)">
<summary>
Sets the defaults for normal, bold, italic and bold-italic fonts.
</summary>
<param name="normal">
The default normal font. This is the same as the first font in the font table.
</param>
<param name="bold">
The default bold font. This is the same as the second font in the font table. An empty string means the default is unchanged.
</param>
<param name="italic">
The default italic font. This is the same as the third font in the font table. An empty string means the default is unchanged.
</param>
<param name="boldItalic">
The default bold-italic font. This is the same as the fourth font in the font table. An empty string means the default is unchanged.
</param>
</member>
<member name="M:ChartDirector.DrawArea.setFontTable(System.Int32,System.String)">
<summary>
Sets an entry in the font table to the specified font name.
</summary>
<param name="index">
An index to the font table, starting from 0.
</param>
<param name="font">
The font name to be put into the font table.
</param>
</member>
<member name="M:ChartDirector.DrawArea.merge(ChartDirector.DrawArea,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Copy another DrawArea to the current DrawArea.
</summary>
<param name="d">
A DrawArea object representing the source.
</param>
<param name="x">
The x coordinate of a reference point in the current DrawArea.
</param>
<param name="y">
The y coordinate of a reference point in the current DrawArea.
</param>
<param name="align">
The alignment of the source DrawArea relative to the reference point. See "Alignment Specification" for supported alignment types.
</param>
<param name="transparency">
Specify the transparency level when copying the other DrawArea to the current DrawArea. A value of 0 means non-transparent. A value of 255 means totally transparent.
</param>
</member>
<member name="M:ChartDirector.DrawArea.tile(ChartDirector.DrawArea,System.Int32)">
<summary>
Copy another DrawArea to the current DrawArea as a wallpaper.
</summary>
<param name="d">
A DrawArea object representing the source.
</param>
<param name="transparency">
Specify the transparency level when copying the other DrawArea to the current DrawArea. A value of 0 means non-transparent. A value of 255 means totally transparent.
</param>
</member>
<member name="M:ChartDirector.DrawArea.setSearchPath(System.String)">
<summary>
Sets the file system search path for loading image files.
</summary>
<param name="path">
A list of directories, separated with semi- colons
</param>
</member>
<member name="M:ChartDirector.DrawArea.load(System.String)">
<summary>
Load an image file into the current DrawArea.
</summary>
<param name="filename">
The filename of the image to be loaded.
</param>
</member>
<member name="M:ChartDirector.DrawArea.loadPNG(System.String)">
<summary>
Load a PNG image into the current DrawArea.
</summary>
<param name="filename">
The filename of the image to be loaded.
</param>
</member>
<member name="M:ChartDirector.DrawArea.loadGIF(System.String)">
<summary>
Load a GIF image into the current DrawArea.
</summary>
<param name="filename">
The filename of the image to be loaded.
</param>
</member>
<member name="M:ChartDirector.DrawArea.loadJPG(System.String)">
<summary>
Load a JPG image into the current DrawArea.
</summary>
<param name="filename">
The filename of the image to be loaded.
</param>
</member>
<member name="M:ChartDirector.DrawArea.loadWMP(System.String)">
<summary>
Load a WAP bitmap image into the current DrawArea.
</summary>
<param name="filename">
The filename of the image to be loaded.
</param>
</member>
<member name="M:ChartDirector.DrawArea.rAffineTransform(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
<summary>
Perform reverse affine transformation on the drawing surface.
</summary>
<param name="a">
The parameter 'a' in the coordinate transformation formula "xSrc = a * xDest + b * yDest + c".
</param>
<param name="b">
The parameter 'b' in the coordinate transformation formula "xSrc = a * xDest + b * yDest + c".
</param>
<param name="c">
The parameter 'c' in the coordinate transformation formula "xSrc = a * xDest + b * yDest + c".
</param>
<param name="d">
The parameter 'd' in the coordinate transformation formula "ySrc = d * xDest + e * yDest + f".
</param>
<param name="e">
The parameter 'e' in the coordinate transformation formula "ySrc = d * xDest + e * yDest + f".
</param>
<param name="f">
The parameter 'f' in the coordinate transformation formula "ySrc = d * xDest + e * yDest + f".
</param>
</member>
<member name="M:ChartDirector.DrawArea.rAffineTransform(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
<summary>
Perform reverse affine transformation on the drawing surface.
</summary>
<param name="a">
The parameter 'a' in the coordinate transformation formula "xSrc = a * xDest + b * yDest + c".
</param>
<param name="b">
The parameter 'b' in the coordinate transformation formula "xSrc = a * xDest + b * yDest + c".
</param>
<param name="c">
The parameter 'c' in the coordinate transformation formula "xSrc = a * xDest + b * yDest + c".
</param>
<param name="d">
The parameter 'd' in the coordinate transformation formula "ySrc = d * xDest + e * yDest + f".
</param>
<param name="e">
The parameter 'e' in the coordinate transformation formula "ySrc = d * xDest + e * yDest + f".
</param>
<param name="f">
The parameter 'f' in the coordinate transformation formula "ySrc = d * xDest + e * yDest + f".
</param>
<param name="bgColor">
The background color used to fill destination pixels that are not mapped to any source pixels.
</param>
</member>
<member name="M:ChartDirector.DrawArea.rAffineTransform(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
<summary>
Perform reverse affine transformation on the drawing surface.
</summary>
<param name="a">
The parameter 'a' in the coordinate transformation formula "xSrc = a * xDest + b * yDest + c".
</param>
<param name="b">
The parameter 'b' in the coordinate transformation formula "xSrc = a * xDest + b * yDest + c".
</param>
<param name="c">
The parameter 'c' in the coordinate transformation formula "xSrc = a * xDest + b * yDest + c".
</param>
<param name="d">
The parameter 'd' in the coordinate transformation formula "ySrc = d * xDest + e * yDest + f".
</param>
<param name="e">
The parameter 'e' in the coordinate transformation formula "ySrc = d * xDest + e * yDest + f".
</param>
<param name="f">
The parameter 'f' in the coordinate transformation formula "ySrc = d * xDest + e * yDest + f".
</param>
<param name="bgColor">
The background color used to fill destination pixels that are not mapped to any source pixels.
</param>
<param name="filter">
The filter to use for "re-sampling".
</param>
</member>
<member name="M:ChartDirector.DrawArea.rAffineTransform(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double)">
<summary>
Perform reverse affine transformation on the drawing surface.
</summary>
<param name="a">
The parameter 'a' in the coordinate transformation formula "xSrc = a * xDest + b * yDest + c".
</param>
<param name="b">
The parameter 'b' in the coordinate transformation formula "xSrc = a * xDest + b * yDest + c".
</param>
<param name="c">
The parameter 'c' in the coordinate transformation formula "xSrc = a * xDest + b * yDest + c".
</param>
<param name="d">
The parameter 'd' in the coordinate transformation formula "ySrc = d * xDest + e * yDest + f".
</param>
<param name="e">
The parameter 'e' in the coordinate transformation formula "ySrc = d * xDest + e * yDest + f".
</param>
<param name="f">
The parameter 'f' in the coordinate transformation formula "ySrc = d * xDest + e * yDest + f".
</param>
<param name="bgColor">
The background color used to fill destination pixels that are not mapped to any source pixels.
</param>
<param name="filter">
The filter to use for "re-sampling".
</param>
<param name="blur">
The blur factor to use for "re-sampling".
</param>
</member>
<member name="M:ChartDirector.DrawArea.affineTransform(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
<summary>
Perform affine transformation on the drawing surface.
</summary>
<param name="a">
The parameter 'a' in the coordinate transformation formula "xDest = a * xSrc + b * ySrc + c".
</param>
<param name="b">
The parameter 'b' in the coordinate transformation formula "xDest = a * xSrc + b * ySrc + c".
</param>
<param name="c">
The parameter 'c' in the coordinate transformation formula "xDest = a * xSrc + b * ySrc + c".
</param>
<param name="d">
The parameter 'd' in the coordinate transformation formula "yDest = d * xSrc + e * ySrc + f".
</param>
<param name="e">
The parameter 'e' in the coordinate transformation formula "yDest = d * xSrc + e * ySrc + f".
</param>
<param name="f">
The parameter 'f' in the coordinate transformation formula "yDest = d * xSrc + e * ySrc + f".
</param>
</member>
<member name="M:ChartDirector.DrawArea.affineTransform(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
<summary>
Perform affine transformation on the drawing surface.
</summary>
<param name="a">
The parameter 'a' in the coordinate transformation formula "xDest = a * xSrc + b * ySrc + c".
</param>
<param name="b">
The parameter 'b' in the coordinate transformation formula "xDest = a * xSrc + b * ySrc + c".
</param>
<param name="c">
The parameter 'c' in the coordinate transformation formula "xDest = a * xSrc + b * ySrc + c".
</param>
<param name="d">
The parameter 'd' in the coordinate transformation formula "yDest = d * xSrc + e * ySrc + f".
</param>
<param name="e">
The parameter 'e' in the coordinate transformation formula "yDest = d * xSrc + e * ySrc + f".
</param>
<param name="f">
The parameter 'f' in the coordinate transformation formula "yDest = d * xSrc + e * ySrc + f".
</param>
<param name="bgColor">
The background color used to fill destination pixels that are not mapped to any source pixels.
</param>
</member>
<member name="M:ChartDirector.DrawArea.affineTransform(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
<summary>
Perform affine transformation on the drawing surface.
</summary>
<param name="a">
The parameter 'a' in the coordinate transformation formula "xDest = a * xSrc + b * ySrc + c".
</param>
<param name="b">
The parameter 'b' in the coordinate transformation formula "xDest = a * xSrc + b * ySrc + c".
</param>
<param name="c">
The parameter 'c' in the coordinate transformation formula "xDest = a * xSrc + b * ySrc + c".
</param>
<param name="d">
The parameter 'd' in the coordinate transformation formula "yDest = d * xSrc + e * ySrc + f".
</param>
<param name="e">
The parameter 'e' in the coordinate transformation formula "yDest = d * xSrc + e * ySrc + f".
</param>
<param name="f">
The parameter 'f' in the coordinate transformation formula "yDest = d * xSrc + e * ySrc + f".
</param>
<param name="bgColor">
The background color used to fill destination pixels that are not mapped to any source pixels.
</param>
<param name="filter">
The filter to use for "re-sampling".
</param>
</member>
<member name="M:ChartDirector.DrawArea.affineTransform(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double)">
<summary>
Perform affine transformation on the drawing surface.
</summary>
<param name="a">
The parameter 'a' in the coordinate transformation formula "xDest = a * xSrc + b * ySrc + c".
</param>
<param name="b">
The parameter 'b' in the coordinate transformation formula "xDest = a * xSrc + b * ySrc + c".
</param>
<param name="c">
The parameter 'c' in the coordinate transformation formula "xDest = a * xSrc + b * ySrc + c".
</param>
<param name="d">
The parameter 'd' in the coordinate transformation formula "yDest = d * xSrc + e * ySrc + f".
</param>
<param name="e">
The parameter 'e' in the coordinate transformation formula "yDest = d * xSrc + e * ySrc + f".
</param>
<param name="f">
The parameter 'f' in the coordinate transformation formula "yDest = d * xSrc + e * ySrc + f".
</param>
<param name="bgColor">
The background color used to fill destination pixels that are not mapped to any source pixels.
</param>
<param name="filter">
The filter to use for "re-sampling".
</param>
<param name="blur">
The blur factor to use for "re-sampling".
</param>
</member>
<member name="M:ChartDirector.DrawArea.sphereTransform(System.Int32,System.Int32)">
<summary>
Wraps the drawing surface onto a sphere or ellipsoid.
</summary>
<param name="xDiameter">
The horizontal diameter of the sphere or ellipsoid in pixels.
</param>
<param name="yDiameter">
The vertical diameter of the sphere or ellipsoid in pixels.
</param>
</member>
<member name="M:ChartDirector.DrawArea.sphereTransform(System.Int32,System.Int32,System.Int32)">
<summary>
Wraps the drawing surface onto a sphere or ellipsoid.
</summary>
<param name="xDiameter">
The horizontal diameter of the sphere or ellipsoid in pixels.
</param>
<param name="yDiameter">
The vertical diameter of the sphere or ellipsoid in pixels.
</param>
<param name="bgColor">
The background color used to fill the space left after transformation.
</param>
</member>
<member name="M:ChartDirector.DrawArea.sphereTransform(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Wraps the drawing surface onto a sphere or ellipsoid.
</summary>
<param name="xDiameter">
The horizontal diameter of the sphere or ellipsoid in pixels.
</param>
<param name="yDiameter">
The vertical diameter of the sphere or ellipsoid in pixels.
</param>
<param name="bgColor">
The background color used to fill the space left after transformation.
</param>
<param name="filter">
The filter to use for "re-sampling".
</param>
</member>
<member name="M:ChartDirector.DrawArea.sphereTransform(System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
<summary>
Wraps the drawing surface onto a sphere or ellipsoid.
</summary>
<param name="xDiameter">
The horizontal diameter of the sphere or ellipsoid in pixels.
</param>
<param name="yDiameter">
The vertical diameter of the sphere or ellipsoid in pixels.
</param>
<param name="bgColor">
The background color used to fill the space left after transformation.
</param>
<param name="filter">
The filter to use for "re-sampling".
</param>
<param name="blur">
The blur factor to use for "re-sampling".
</param>
</member>
<member name="M:ChartDirector.DrawArea.hCylinderTransform(System.Int32)">
<summary>
Wraps the drawing surface onto a horizontal cylinder.
</summary>
<param name="yDiameter">
The diameter of the cylinder in pixels.
</param>
</member>
<member name="M:ChartDirector.DrawArea.hCylinderTransform(System.Int32,System.Int32)">
<summary>
Wraps the drawing surface onto a horizontal cylinder.
</summary>
<param name="yDiameter">
The diameter of the cylinder in pixels.
</param>
<param name="bgColor">
The background color used to fill the space left after transformation.
</param>
</member>
<member name="M:ChartDirector.DrawArea.hCylinderTransform(System.Int32,System.Int32,System.Int32)">
<summary>
Wraps the drawing surface onto a horizontal cylinder.
</summary>
<param name="yDiameter">
The diameter of the cylinder in pixels.
</param>
<param name="bgColor">
The background color used to fill the space left after transformation.
</param>
<param name="filter">
The filter to use for "re-sampling".
</param>
</member>
<member name="M:ChartDirector.DrawArea.hCylinderTransform(System.Int32,System.Int32,System.Int32,System.Double)">
<summary>
Wraps the drawing surface onto a horizontal cylinder.
</summary>
<param name="yDiameter">
The diameter of the cylinder in pixels.
</param>
<param name="bgColor">
The background color used to fill the space left after transformation.
</param>
<param name="filter">
The filter to use for "re-sampling".
</param>
<param name="blur">
The blur factor to use for "re-sampling".
</param>
</member>
<member name="M:ChartDirector.DrawArea.vCylinderTransform(System.Int32)">
<summary>
Wraps the drawing surface onto a vertical cylinder.
</summary>
<param name="xDiameter">
The diameter of the cylinder in pixels.
</param>
</member>
<member name="M:ChartDirector.DrawArea.vCylinderTransform(System.Int32,System.Int32)">
<summary>
Wraps the drawing surface onto a vertical cylinder.
</summary>
<param name="xDiameter">
The diameter of the cylinder in pixels.
</param>
<param name="bgColor">
The background color used to fill the space left after transformation.
</param>
</member>
<member name="M:ChartDirector.DrawArea.vCylinderTransform(System.Int32,System.Int32,System.Int32)">
<summary>
Wraps the drawing surface onto a vertical cylinder.
</summary>
<param name="xDiameter">
The diameter of the cylinder in pixels.
</param>
<param name="bgColor">
The background color used to fill the space left after transformation.
</param>
<param name="filter">
The filter to use for "re-sampling".
</param>
</member>
<member name="M:ChartDirector.DrawArea.vCylinderTransform(System.Int32,System.Int32,System.Int32,System.Double)">
<summary>
Wraps the drawing surface onto a vertical cylinder.
</summary>
<param name="xDiameter">
The diameter of the cylinder in pixels.
</param>
<param name="bgColor">
The background color used to fill the space left after transformation.
</param>
<param name="filter">
The filter to use for "re-sampling".
</param>
<param name="blur">
The blur factor to use for "re-sampling".
</param>
</member>
<member name="M:ChartDirector.DrawArea.hTriangleTransform">
<summary>
Wraps the drawing surface onto a horizontal triangle pointing leftwards.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.hTriangleTransform(System.Int32)">
<summary>
Wraps the drawing surface onto a horizontal triangle pointing leftwards.
</summary>
<param name="tWidth">
The width of the triangle in pixels.
</param>
</member>
<member name="M:ChartDirector.DrawArea.hTriangleTransform(System.Int32,System.Int32)">
<summary>
Wraps the drawing surface onto a horizontal triangle pointing leftwards.
</summary>
<param name="tWidth">
The width of the triangle in pixels.
</param>
<param name="bgColor">
The background color used to fill the space left after transformation.
</param>
</member>
<member name="M:ChartDirector.DrawArea.hTriangleTransform(System.Int32,System.Int32,System.Int32)">
<summary>
Wraps the drawing surface onto a horizontal triangle pointing leftwards.
</summary>
<param name="tWidth">
The width of the triangle in pixels.
</param>
<param name="bgColor">
The background color used to fill the space left after transformation.
</param>
<param name="filter">
The filter to use for "re-sampling".
</param>
</member>
<member name="M:ChartDirector.DrawArea.hTriangleTransform(System.Int32,System.Int32,System.Int32,System.Double)">
<summary>
Wraps the drawing surface onto a horizontal triangle pointing leftwards.
</summary>
<param name="tWidth">
The width of the triangle in pixels.
</param>
<param name="bgColor">
The background color used to fill the space left after transformation.
</param>
<param name="filter">
The filter to use for "re-sampling".
</param>
<param name="blur">
The blur factor to use for "re-sampling".
</param>
</member>
<member name="M:ChartDirector.DrawArea.vTriangleTransform">
<summary>
Wraps the drawing surface onto a vertical triangle pointing upwards.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.vTriangleTransform(System.Int32)">
<summary>
Wraps the drawing surface onto a vertical triangle pointing upwards.
</summary>
<param name="tHeight">
The height of the triangle in pixels.
</param>
</member>
<member name="M:ChartDirector.DrawArea.vTriangleTransform(System.Int32,System.Int32)">
<summary>
Wraps the drawing surface onto a vertical triangle pointing upwards.
</summary>
<param name="tHeight">
The height of the triangle in pixels.
</param>
<param name="bgColor">
The background color used to fill the space left after transformation.
</param>
</member>
<member name="M:ChartDirector.DrawArea.vTriangleTransform(System.Int32,System.Int32,System.Int32)">
<summary>
Wraps the drawing surface onto a vertical triangle pointing upwards.
</summary>
<param name="tHeight">
The height of the triangle in pixels.
</param>
<param name="bgColor">
The background color used to fill the space left after transformation.
</param>
<param name="filter">
The filter to use for "re-sampling".
</param>
</member>
<member name="M:ChartDirector.DrawArea.vTriangleTransform(System.Int32,System.Int32,System.Int32,System.Double)">
<summary>
Wraps the drawing surface onto a vertical triangle pointing upwards.
</summary>
<param name="tHeight">
The height of the triangle in pixels.
</param>
<param name="bgColor">
The background color used to fill the space left after transformation.
</param>
<param name="filter">
The filter to use for "re-sampling".
</param>
<param name="blur">
The blur factor to use for "re-sampling".
</param>
</member>
<member name="M:ChartDirector.DrawArea.shearTransform(System.Double)">
<summary>
Shear the drawing surface.
</summary>
<param name="xShear">
The number of pixels to shear leftwards.
</param>
</member>
<member name="M:ChartDirector.DrawArea.shearTransform(System.Double,System.Double)">
<summary>
Shear the drawing surface.
</summary>
<param name="xShear">
The number of pixels to shear leftwards.
</param>
<param name="yShear">
The number of pixels to shear downwards.
</param>
</member>
<member name="M:ChartDirector.DrawArea.shearTransform(System.Double,System.Double,System.Int32)">
<summary>
Shear the drawing surface.
</summary>
<param name="xShear">
The number of pixels to shear leftwards.
</param>
<param name="yShear">
The number of pixels to shear downwards.
</param>
<param name="bgColor">
The background color used to fill the space left after transformation.
</param>
</member>
<member name="M:ChartDirector.DrawArea.shearTransform(System.Double,System.Double,System.Int32,System.Int32)">
<summary>
Shear the drawing surface.
</summary>
<param name="xShear">
The number of pixels to shear leftwards.
</param>
<param name="yShear">
The number of pixels to shear downwards.
</param>
<param name="bgColor">
The background color used to fill the space left after transformation.
</param>
<param name="filter">
The filter to use for "re-sampling".
</param>
</member>
<member name="M:ChartDirector.DrawArea.shearTransform(System.Double,System.Double,System.Int32,System.Int32,System.Double)">
<summary>
Shear the drawing surface.
</summary>
<param name="xShear">
The number of pixels to shear leftwards.
</param>
<param name="yShear">
The number of pixels to shear downwards.
</param>
<param name="bgColor">
The background color used to fill the space left after transformation.
</param>
<param name="filter">
The filter to use for "re-sampling".
</param>
<param name="blur">
The blur factor to use for "re-sampling".
</param>
</member>
<member name="M:ChartDirector.DrawArea.waveTransform(System.Int32,System.Double)">
<summary>
Moves the pixels on the drawing surface according to a sinusoidal function to achieve a wave effect.
</summary>
<param name="period">
The period of the wave in pixels.
</param>
<param name="amplitude">
The amplitude of the wave in pixels.
</param>
</member>
<member name="M:ChartDirector.DrawArea.waveTransform(System.Int32,System.Double,System.Double)">
<summary>
Moves the pixels on the drawing surface according to a sinusoidal function to achieve a wave effect.
</summary>
<param name="period">
The period of the wave in pixels.
</param>
<param name="amplitude">
The amplitude of the wave in pixels.
</param>
<param name="direction">
The propagation direction of the wave. The upward pointing direction is 0 degree, and the angle is measured clockwise.
</param>
</member>
<member name="M:ChartDirector.DrawArea.waveTransform(System.Int32,System.Double,System.Double,System.Double)">
<summary>
Moves the pixels on the drawing surface according to a sinusoidal function to achieve a wave effect.
</summary>
<param name="period">
The period of the wave in pixels.
</param>
<param name="amplitude">
The amplitude of the wave in pixels.
</param>
<param name="direction">
The propagation direction of the wave. The upward pointing direction is 0 degree, and the angle is measured clockwise.
</param>
<param name="startAngle">
The initial phase angle of the wave in degrees.
</param>
</member>
<member name="M:ChartDirector.DrawArea.waveTransform(System.Int32,System.Double,System.Double,System.Double,System.Boolean)">
<summary>
Moves the pixels on the drawing surface according to a sinusoidal function to achieve a wave effect.
</summary>
<param name="period">
The period of the wave in pixels.
</param>
<param name="amplitude">
The amplitude of the wave in pixels.
</param>
<param name="direction">
The propagation direction of the wave. The upward pointing direction is 0 degree, and the angle is measured clockwise.
</param>
<param name="startAngle">
The initial phase angle of the wave in degrees.
</param>
<param name="longitudinal">
Determine if the wave is transversal or longitudinal. true means transversal. false means longitudinal.
</param>
</member>
<member name="M:ChartDirector.DrawArea.waveTransform(System.Int32,System.Double,System.Double,System.Double,System.Boolean,System.Int32)">
<summary>
Moves the pixels on the drawing surface according to a sinusoidal function to achieve a wave effect.
</summary>
<param name="period">
The period of the wave in pixels.
</param>
<param name="amplitude">
The amplitude of the wave in pixels.
</param>
<param name="direction">
The propagation direction of the wave. The upward pointing direction is 0 degree, and the angle is measured clockwise.
</param>
<param name="startAngle">
The initial phase angle of the wave in degrees.
</param>
<param name="longitudinal">
Determine if the wave is transversal or longitudinal. true means transversal. false means longitudinal.
</param>
<param name="bgColor">
The background color used to fill the space left after transformation.
</param>
</member>
<member name="M:ChartDirector.DrawArea.waveTransform(System.Int32,System.Double,System.Double,System.Double,System.Boolean,System.Int32,System.Int32)">
<summary>
Moves the pixels on the drawing surface according to a sinusoidal function to achieve a wave effect.
</summary>
<param name="period">
The period of the wave in pixels.
</param>
<param name="amplitude">
The amplitude of the wave in pixels.
</param>
<param name="direction">
The propagation direction of the wave. The upward pointing direction is 0 degree, and the angle is measured clockwise.
</param>
<param name="startAngle">
The initial phase angle of the wave in degrees.
</param>
<param name="longitudinal">
Determine if the wave is transversal or longitudinal. true means transversal. false means longitudinal.
</param>
<param name="bgColor">
The background color used to fill the space left after transformation.
</param>
<param name="filter">
The filter to use for "re-sampling".
</param>
</member>
<member name="M:ChartDirector.DrawArea.waveTransform(System.Int32,System.Double,System.Double,System.Double,System.Boolean,System.Int32,System.Int32,System.Double)">
<summary>
Moves the pixels on the drawing surface according to a sinusoidal function to achieve a wave effect.
</summary>
<param name="period">
The period of the wave in pixels.
</param>
<param name="amplitude">
The amplitude of the wave in pixels.
</param>
<param name="direction">
The propagation direction of the wave. The upward pointing direction is 0 degree, and the angle is measured clockwise.
</param>
<param name="startAngle">
The initial phase angle of the wave in degrees.
</param>
<param name="longitudinal">
Determine if the wave is transversal or longitudinal. true means transversal. false means longitudinal.
</param>
<param name="bgColor">
The background color used to fill the space left after transformation.
</param>
<param name="filter">
The filter to use for "re-sampling".
</param>
<param name="blur">
The blur factor to use for "re-sampling".
</param>
</member>
<member name="M:ChartDirector.DrawArea.enableVectorOutput">
<summary>
This method is deprecated. It has no effect and may be removed in future versions of ChartDirector.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.setOutputOptions(System.String)">
<summary>
Sets output format options for the next chart output. Currently, only SVG, SVGZ and PDF output formats support output options.
</summary>
<param name="options">
A list of options delimited by semicolons.
</param>
</member>
<member name="M:ChartDirector.DrawArea.outImage(System.String)">
<summary>
Writes the DrawArea to an image file.
</summary>
<param name="filename">
The filename of the output image file.
</param>
</member>
<member name="M:ChartDirector.DrawArea.outPNG(System.String)">
<summary>
Writes the DrawArea to a PNG image file.
</summary>
<param name="filename">
The filename of the output image file.
</param>
</member>
<member name="M:ChartDirector.DrawArea.outPNG">
<summary>
Writes the DrawArea as a PNG image to memory.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.outPNG2">
<summary>
Writes the DrawArea as a PNG image to memory.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.outGIF(System.String)">
<summary>
Writes the DrawArea to a GIF image file.
</summary>
<param name="filename">
The filename of the output image file.
</param>
</member>
<member name="M:ChartDirector.DrawArea.outGIF">
<summary>
Writes the DrawArea as a GIF image to memory.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.outGIF2">
<summary>
Writes the DrawArea as a GIF image to memory.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.outJPG(System.String)">
<summary>
Writes the DrawArea to a JPEG image file.
</summary>
<param name="filename">
The filename of the output image file.
</param>
</member>
<member name="M:ChartDirector.DrawArea.outJPG(System.String,System.Int32)">
<summary>
Writes the DrawArea to a JPEG image file.
</summary>
<param name="filename">
The filename of the output image file.
</param>
<param name="quality">
The quality of the image.
</param>
</member>
<member name="M:ChartDirector.DrawArea.outJPG">
<summary>
Writes the DrawArea as a JPEG image to memory.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.outJPG(System.Int32)">
<summary>
Writes the DrawArea as a JPEG image to memory.
</summary>
<param name="quality">
The quality of the image.
</param>
</member>
<member name="M:ChartDirector.DrawArea.outJPG2">
<summary>
Writes the DrawArea as a JPEG image to memory.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.outJPG2(System.Int32)">
<summary>
Writes the DrawArea as a JPEG image to memory.
</summary>
<param name="quality">
The quality of the image.
</param>
</member>
<member name="M:ChartDirector.DrawArea.outBMP(System.String)">
<summary>
Writes the DrawArea to a BMP image file.
</summary>
<param name="filename">
The filename of the output image file.
</param>
</member>
<member name="M:ChartDirector.DrawArea.outBMP">
<summary>
Writes the DrawArea as a BMP image to memory.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.outBMP2">
<summary>
Writes the DrawArea as a BMP image to memory.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.outWMP(System.String)">
<summary>
Writes the DrawArea to a WAP bitmap image file.
</summary>
<param name="filename">
The filename of the output image file.
</param>
</member>
<member name="M:ChartDirector.DrawArea.outWMP">
<summary>
Writes the DrawArea as a WAP bitmap image to memory.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.outWMP2">
<summary>
Writes the DrawArea as a WAP bitmap image to memory.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.outSVG(System.String)">
<summary>
Writes the DrawArea to a SVG or SVGZ image file.
</summary>
<param name="filename">
The filename of the output image file.
</param>
</member>
<member name="M:ChartDirector.DrawArea.outSVG(System.String,System.String)">
<summary>
Writes the DrawArea to a SVG or SVGZ image file.
</summary>
<param name="filename">
The filename of the output image file.
</param>
<param name="options">
This parameter is deprecated. Please use "DrawArea.setOutputOptions" to set optional output parameters.
</param>
</member>
<member name="M:ChartDirector.DrawArea.outSVG">
<summary>
Writes the DrawArea as a SVG or SVGZ image to memory.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.outSVG2">
<summary>
Writes the DrawArea as a SVG or SVGZ image to memory.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.outSVG2(System.String)">
<summary>
Writes the DrawArea as a SVG or SVGZ image to memory.
</summary>
<param name="options">
This parameter is deprecated. Please use "DrawArea.setOutputOptions" to set optional output parameters.
</param>
</member>
<member name="M:ChartDirector.DrawArea.outPDF(System.String)">
<summary>
Writes the DrawArea to a PDF image file.
</summary>
<param name="filename">
The filename of the output image file.
</param>
</member>
<member name="M:ChartDirector.DrawArea.outPDF">
<summary>
Writes the DrawArea as a PDF image to memory.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.outPDF2">
<summary>
Writes the DrawArea as a PDF image to memory.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.setPaletteMode(System.Int32)">
<summary>
Sets the palette mode to use when writing the image in PNG format.
</summary>
<param name="p">
The palette mode for PNG images.
</param>
</member>
<member name="M:ChartDirector.DrawArea.setDitherMethod(System.Int32)">
<summary>
Sets the dithering method in case dithering is necessary.
</summary>
<param name="m">
The dithering method to use in case dithering is necessary.
</param>
</member>
<member name="M:ChartDirector.DrawArea.setTransparentColor(System.Int32)">
<summary>
Specifies a certain color to mean transparent when creating a raster image output.
</summary>
<param name="c">
The color that is designated as the transparent color. If -1 is used, the alpha channel will be included in the final output if the output image format supports it.
</param>
</member>
<member name="M:ChartDirector.DrawArea.setAntiAlias">
<summary>
Controls whether anti-alias is used when drawing lines, shapes and text.
</summary>
</member>
<member name="M:ChartDirector.DrawArea.setAntiAlias(System.Boolean)">
<summary>
Controls whether anti-alias is used when drawing lines, shapes and text.
</summary>
<param name="shapeAntiAlias">
A true value enables anti-alias when drawing lines and shapes. A false value disables anti-alias when drawing lines and shapes
</param>
</member>
<member name="M:ChartDirector.DrawArea.setAntiAlias(System.Boolean,System.Int32)">
<summary>
Controls whether anti-alias is used when drawing lines, shapes and text.
</summary>
<param name="shapeAntiAlias">
A true value enables anti-alias when drawing lines and shapes. A false value disables anti-alias when drawing lines and shapes
</param>
<param name="textAntiAlias">
The text anti-alias mode, which must be one of "NoAntiAlias", "AntiAlias", "AutoAntiAlias", "ClearTypeColor" or "ClearTypeMono".
</param>
</member>
<member name="M:ChartDirector.DrawArea.setInterlace(System.Boolean)">
<summary>
Sets the interlace mode when creating the image.
</summary>
<param name="i">
A true value means the image is interlaced. A false value means the image is non-interlaced.
</param>
</member>
<member name="M:ChartDirector.DrawArea.setColorTable(System.Int32[],System.Int32)">
<summary>
Change the colors in the palette starting with the specified offset position.
</summary>
<param name="colors">
An array of colors to replace the colors in the palette.
</param>
<param name="offset">
The position in the palette to start the replacement.
</param>
</member>
<member name="M:ChartDirector.DrawArea.getARGBColor(System.Int32)">
<summary>
Obtain the ARGB color given a palette color.
</summary>
<param name="c">
The color to be changed to ARGB format.
</param>
</member>
<member name="M:ChartDirector.DrawArea.adjustBrightness(System.Int32,System.Double)">
<summary>
Creates a color that is a darkened or brightened version of the given color.
</summary>
<param name="c">
The given color.
</param>
<param name="brightness">
A non-negative number represent the factor to darken or brighten the color.
</param>
</member>
<member name="M:ChartDirector.DrawArea.halfColor(System.Int32)">
<summary>
Creates a color that is half the intensity of the given color.
</summary>
<param name="c">
The given color.
</param>
</member>
<member name="M:ChartDirector.DrawArea.dashLineColor(System.Int32)">
<summary>
Creates a dash line color.
</summary>
<param name="color">
The color to draw the dash line.
</param>
</member>
<member name="M:ChartDirector.DrawArea.dashLineColor(System.Int32,System.Int32)">
<summary>
Creates a dash line color.
</summary>
<param name="color">
The color to draw the dash line.
</param>
<param name="patternCode">
A 4-byte integer representing the style of the dash line.
</param>
</member>
<member name="M:ChartDirector.DrawArea.patternColor(System.Int32[],System.Int32)">
<summary>
Creates a pattern color using an array of colors as the bitmap pattern.
</summary>
<param name="colorArray">
An array of colors representing the colors of the bitmap pixels. The color of the pixel at (x, y) should correspond to index (x + y * width - 1) of the array.
</param>
<param name="height">
The height of the bitmap in pixels. (The width is automatically computed as the size of the color array divided by the height.)
</param>
</member>
<member name="M:ChartDirector.DrawArea.patternColor(System.Int32[],System.Int32,System.Int32,System.Int32)">
<summary>
Creates a pattern color using an array of colors as the bitmap pattern.
</summary>
<param name="colorArray">
An array of colors representing the colors of the bitmap pixels. The color of the pixel at (x, y) should correspond to index (x + y * width - 1) of the array.
</param>
<param name="height">
The height of the bitmap in pixels. (The width is automatically computed as the size of the color array divided by the height.)
</param>
<param name="startX">
The x coordinate of a reference point to align with the top-left corner the pattern.
</param>
<param name="startY">
The y coordinate of a reference point to align with the top-left corner the pattern.
</param>
</member>
<member name="M:ChartDirector.DrawArea.patternColor(System.String)">
<summary>
Creates a pattern color by loading the pattern from an image file.
</summary>
<param name="filename">
An image file providing the pattern.
</param>
</member>
<member name="M:ChartDirector.DrawArea.patternColor(System.String,System.Int32,System.Int32)">
<summary>
Creates a pattern color by loading the pattern from an image file.
</summary>
<param name="filename">
An image file providing the pattern.
</param>
<param name="startX">
The x coordinate of a reference point to align with the top-left corner the pattern.
</param>
<param name="startY">
The y coordinate of a reference point to align with the top-left corner the pattern.
</param>
</member>
<member name="M:ChartDirector.DrawArea.patternColor2(System.String)">
<summary>
Creates a pattern color by loading the pattern from an image file.
</summary>
<param name="filename">
An image file providing the pattern.
</param>
</member>
<member name="M:ChartDirector.DrawArea.patternColor2(System.String,System.Int32,System.Int32)">
<summary>
Creates a pattern color by loading the pattern from an image file.
</summary>
<param name="filename">
An image file providing the pattern.
</param>
<param name="startX">
The x coordinate of a reference point to align with the top-left corner the pattern.
</param>
<param name="startY">
The y coordinate of a reference point to align with the top-left corner the pattern.
</param>
</member>
<member name="M:ChartDirector.DrawArea.linearGradientColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a two-point linear gradient color.
</summary>
<param name="startX">
The x coordinate of the starting point of the reference gradient line segment.
</param>
<param name="startY">
The y coordinate of the starting point of the reference gradient line segment.
</param>
<param name="endX">
The x coordinate of the ending point of the reference gradient line segment.
</param>
<param name="endY">
The y coordinate of the ending point of the reference gradient line segment.
</param>
<param name="startColor">
The color at the starting point of the reference gradient line segment.
</param>
<param name="endColor">
The color at the ending point of the reference gradient line segment.
</param>
</member>
<member name="M:ChartDirector.DrawArea.linearGradientColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
<summary>
Creates a two-point linear gradient color.
</summary>
<param name="startX">
The x coordinate of the starting point of the reference gradient line segment.
</param>
<param name="startY">
The y coordinate of the starting point of the reference gradient line segment.
</param>
<param name="endX">
The x coordinate of the ending point of the reference gradient line segment.
</param>
<param name="endY">
The y coordinate of the ending point of the reference gradient line segment.
</param>
<param name="startColor">
The color at the starting point of the reference gradient line segment.
</param>
<param name="endColor">
The color at the ending point of the reference gradient line segment.
</param>
<param name="periodic">
Specifies whether the gradient will repeat itself periodically. If the gradient does not repeat itself, the points that lie beyond the end points of the gradient line segment will assume the colors of the end points.
</param>
</member>
<member name="M:ChartDirector.DrawArea.linearGradientColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="startX">
The x coordinate of the starting point of the reference gradient line segment.
</param>
<param name="startY">
The y coordinate of the starting point of the reference gradient line segment.
</param>
<param name="endX">
The x coordinate of the ending point of the reference gradient line segment.
</param>
<param name="endY">
The y coordinate of the ending point of the reference gradient line segment.
</param>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
</member>
<member name="M:ChartDirector.DrawArea.linearGradientColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Boolean)">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="startX">
The x coordinate of the starting point of the reference gradient line segment.
</param>
<param name="startY">
The y coordinate of the starting point of the reference gradient line segment.
</param>
<param name="endX">
The x coordinate of the ending point of the reference gradient line segment.
</param>
<param name="endY">
The y coordinate of the ending point of the reference gradient line segment.
</param>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
<param name="periodic">
Specifies whether the gradient will repeat itself periodically. If the gradient does not repeat itself, the points that lie beyond the end points of the gradient line segment will assume the colors of the end points.
</param>
</member>
<member name="M:ChartDirector.DrawArea.linearGradientColor2(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="startX">
The x coordinate of the starting point of the reference gradient line segment.
</param>
<param name="startY">
The y coordinate of the starting point of the reference gradient line segment.
</param>
<param name="endX">
The x coordinate of the ending point of the reference gradient line segment.
</param>
<param name="endY">
The y coordinate of the ending point of the reference gradient line segment.
</param>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
</member>
<member name="M:ChartDirector.DrawArea.linearGradientColor2(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Boolean)">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="startX">
The x coordinate of the starting point of the reference gradient line segment.
</param>
<param name="startY">
The y coordinate of the starting point of the reference gradient line segment.
</param>
<param name="endX">
The x coordinate of the ending point of the reference gradient line segment.
</param>
<param name="endY">
The y coordinate of the ending point of the reference gradient line segment.
</param>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
<param name="periodic">
Specifies whether the gradient will repeat itself periodically. If the gradient does not repeat itself, the points that lie beyond the end points of the gradient line segment will assume the colors of the end points.
</param>
</member>
<member name="M:ChartDirector.DrawArea.radialGradientColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a two-point radial gradient color.
</summary>
<param name="cx">
The x coordinate of the center of the radial gradient.
</param>
<param name="cy">
The y coordinate of the center of the radial gradient.
</param>
<param name="rx">
The horizontal radius of the radial gradient defining ellipse.
</param>
<param name="ry">
The vertical radius of the radial gradient defining ellipse.
</param>
<param name="startColor">
The color at the center of the gradient defining ellipse.
</param>
<param name="endColor">
The color at the perimeter of the gradient defining ellipse.
</param>
</member>
<member name="M:ChartDirector.DrawArea.radialGradientColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
<summary>
Creates a two-point radial gradient color.
</summary>
<param name="cx">
The x coordinate of the center of the radial gradient.
</param>
<param name="cy">
The y coordinate of the center of the radial gradient.
</param>
<param name="rx">
The horizontal radius of the radial gradient defining ellipse.
</param>
<param name="ry">
The vertical radius of the radial gradient defining ellipse.
</param>
<param name="startColor">
The color at the center of the gradient defining ellipse.
</param>
<param name="endColor">
The color at the perimeter of the gradient defining ellipse.
</param>
<param name="periodic">
Specifies whether the gradient will repeat itself periodically. If the gradient does not repeat itself, the points that lie outside the gradient defining ellipse will assume the color at the perimeter of the gradient defining ellipse.
</param>
</member>
<member name="M:ChartDirector.DrawArea.radialGradientColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
<summary>
Creates a multi-point radial gradient color.
</summary>
<param name="cx">
The x coordinate of the center of the radial gradient.
</param>
<param name="cy">
The y coordinate of the center of the radial gradient.
</param>
<param name="rx">
The horizontal radius of the radial gradient defining ellipse.
</param>
<param name="ry">
The vertical radius of the radial gradient defining ellipse.
</param>
<param name="colorArray">
An array defining the radial distances and colors.
</param>
</member>
<member name="M:ChartDirector.DrawArea.radialGradientColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Boolean)">
<summary>
Creates a multi-point radial gradient color.
</summary>
<param name="cx">
The x coordinate of the center of the radial gradient.
</param>
<param name="cy">
The y coordinate of the center of the radial gradient.
</param>
<param name="rx">
The horizontal radius of the radial gradient defining ellipse.
</param>
<param name="ry">
The vertical radius of the radial gradient defining ellipse.
</param>
<param name="colorArray">
An array defining the radial distances and colors.
</param>
<param name="periodic">
Specifies whether the gradient will repeat itself periodically. If the gradient does not repeat itself, the points that lie outside the gradient defining ellipse will assume the color at the perimeter of the gradient defining ellipse.
</param>
</member>
<member name="M:ChartDirector.DrawArea.radialGradientColor2(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
<summary>
Creates a multi-point radial gradient color.
</summary>
<param name="cx">
The x coordinate of the center of the radial gradient.
</param>
<param name="cy">
The y coordinate of the center of the radial gradient.
</param>
<param name="rx">
The horizontal radius of the radial gradient defining ellipse.
</param>
<param name="ry">
The vertical radius of the radial gradient defining ellipse.
</param>
<param name="colorArray">
An array defining the radial distances and colors.
</param>
</member>
<member name="M:ChartDirector.DrawArea.radialGradientColor2(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Boolean)">
<summary>
Creates a multi-point radial gradient color.
</summary>
<param name="cx">
The x coordinate of the center of the radial gradient.
</param>
<param name="cy">
The y coordinate of the center of the radial gradient.
</param>
<param name="rx">
The horizontal radius of the radial gradient defining ellipse.
</param>
<param name="ry">
The vertical radius of the radial gradient defining ellipse.
</param>
<param name="colorArray">
An array defining the radial distances and colors.
</param>
<param name="periodic">
Specifies whether the gradient will repeat itself periodically. If the gradient does not repeat itself, the points that lie outside the gradient defining ellipse will assume the color at the perimeter of the gradient defining ellipse.
</param>
</member>
<member name="M:ChartDirector.DrawArea.gradientColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a two-point linear gradient color.
</summary>
<param name="startX">
The x coordinate of the starting point of the reference gradient line segment.
</param>
<param name="startY">
The y coordinate of the starting point of the reference gradient line segment.
</param>
<param name="endX">
The x coordinate of the ending point of the reference gradient line segment.
</param>
<param name="endY">
The y coordinate of the ending point of the reference gradient line segment.
</param>
<param name="startColor">
The color at the starting point of the reference gradient line segment.
</param>
<param name="endColor">
The color at the ending point of the reference gradient line segment.
</param>
</member>
<member name="M:ChartDirector.DrawArea.gradientColor(System.Int32[])">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
</member>
<member name="M:ChartDirector.DrawArea.gradientColor(System.Int32[],System.Double)">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
<param name="angle">
The direction of the reference gradient line segment in degrees, measured clockwise, with 0 degree as the upward pointing direction. The default direction is horizontal from left to right (90 degrees).
</param>
</member>
<member name="M:ChartDirector.DrawArea.gradientColor(System.Int32[],System.Double,System.Double)">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
<param name="angle">
The direction of the reference gradient line segment in degrees, measured clockwise, with 0 degree as the upward pointing direction. The default direction is horizontal from left to right (90 degrees).
</param>
<param name="scale">
The scaling factor for the reference gradient line segment. By default, the reference gradient line segment is 256 pixels in length. The scaling factor can be use to stretch or compress the gradient line segment.
</param>
</member>
<member name="M:ChartDirector.DrawArea.gradientColor(System.Int32[],System.Double,System.Double,System.Int32,System.Int32)">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
<param name="angle">
The direction of the reference gradient line segment in degrees, measured clockwise, with 0 degree as the upward pointing direction. The default direction is horizontal from left to right (90 degrees).
</param>
<param name="scale">
The scaling factor for the reference gradient line segment. By default, the reference gradient line segment is 256 pixels in length. The scaling factor can be use to stretch or compress the gradient line segment.
</param>
<param name="startX">
The x coordinate of the starting point of the reference gradient line segment.
</param>
<param name="startY">
The y coordinate of the starting point of the reference gradient line segment.
</param>
</member>
<member name="M:ChartDirector.DrawArea.gradientColor2(System.Int32[])">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
</member>
<member name="M:ChartDirector.DrawArea.gradientColor2(System.Int32[],System.Double)">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
<param name="angle">
The direction of the reference gradient line segment in degrees, measured clockwise, with 0 degree as the upward pointing direction. The default direction is horizontal from left to right (90 degrees).
</param>
</member>
<member name="M:ChartDirector.DrawArea.gradientColor2(System.Int32[],System.Double,System.Double)">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
<param name="angle">
The direction of the reference gradient line segment in degrees, measured clockwise, with 0 degree as the upward pointing direction. The default direction is horizontal from left to right (90 degrees).
</param>
<param name="scale">
The scaling factor for the reference gradient line segment. By default, the reference gradient line segment is 256 pixels in length. The scaling factor can be use to stretch or compress the gradient line segment.
</param>
</member>
<member name="M:ChartDirector.DrawArea.gradientColor2(System.Int32[],System.Double,System.Double,System.Int32,System.Int32)">
<summary>
Creates a multi-point linear gradient color.
</summary>
<param name="colorArray">
An array defining the positions and colors of the pixels along the reference gradient line segment.
</param>
<param name="angle">
The direction of the reference gradient line segment in degrees, measured clockwise, with 0 degree as the upward pointing direction. The default direction is horizontal from left to right (90 degrees).
</param>
<param name="scale">
The scaling factor for the reference gradient line segment. By default, the reference gradient line segment is 256 pixels in length. The scaling factor can be use to stretch or compress the gradient line segment.
</param>
<param name="startX">
The x coordinate of the starting point of the reference gradient line segment.
</param>
<param name="startY">
The y coordinate of the starting point of the reference gradient line segment.
</param>
</member>
<member name="M:ChartDirector.DrawArea.reduceColors(System.Int32)">
<summary>
Reduces the number of colors in the image.
</summary>
<param name="colorCount">
The maximum number of colors that image should have after after reduction. Must be between 16 - 256.
</param>
</member>
<member name="M:ChartDirector.DrawArea.reduceColors(System.Int32,System.Boolean)">
<summary>
Reduces the number of colors in the image.
</summary>
<param name="colorCount">
The maximum number of colors that image should have after after reduction. Must be between 16 - 256.
</param>
<param name="blackAndWhite">
A true value means the image will be converted to black and white (with grey levels). A false value means the image will not be converted to black and white.
</param>
</member>
<member name="M:ChartDirector.TTFText.getWidth">
<summary>
Gets the width of the text block.
</summary>
</member>
<member name="M:ChartDirector.TTFText.getHeight">
<summary>
Gets the height of the text block.
</summary>
</member>
<member name="M:ChartDirector.TTFText.getLineHeight">
<summary>
Gets the height of a typical line in the text block.
</summary>
</member>
<member name="M:ChartDirector.TTFText.getLineDistance">
<summary>
Gets the distance between two lines in the text block.
</summary>
</member>
<member name="M:ChartDirector.TTFText.draw(System.Int32,System.Int32,System.Int32)">
<summary>
Draws the text block.
</summary>
<param name="x">
The x coordinate of a reference point to align the text.
</param>
<param name="y">
The y coordinate of a reference point to align the text.
</param>
<param name="color">
The color of the text.
</param>
</member>
<member name="M:ChartDirector.TTFText.draw(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Draws the text block.
</summary>
<param name="x">
The x coordinate of a reference point to align the text.
</param>
<param name="y">
The y coordinate of a reference point to align the text.
</param>
<param name="color">
The color of the text.
</param>
<param name="alignment">
The location of the text relative to the reference point. See "Alignment Specification" for supported alignment types.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.#ctor(System.Double[])">
<summary>
Creates an ArrayMath object and initialize it with the given array.
</summary>
<param name="a">
An array of numbers used to initialize the ArrayMath object.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.add(System.Double[])">
<summary>
Adds an array to the ArrayMath object.
</summary>
<param name="b">
An array of numbers to be added to the ArrayMath object.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.add(System.Double)">
<summary>
Adds a number to every element of the ArrayMath object.
</summary>
<param name="b">
A number to be added to every element of the ArrayMath object.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.add2(System.Double)">
<summary>
Adds a number to every element of the ArrayMath object.
</summary>
<param name="b">
A number to be added to every element of the ArrayMath object.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.sub(System.Double[])">
<summary>
Subtracts an array from the ArrayMath object.
</summary>
<param name="b">
An array of numbers to be subtracted from the ArrayMath object.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.sub(System.Double)">
<summary>
Subtracts a number from every element of the ArrayMath object.
</summary>
<param name="b">
A number to be subtracted from every element of the ArrayMath object.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.sub2(System.Double)">
<summary>
Subtracts a number from every element of the ArrayMath object.
</summary>
<param name="b">
A number to be subtracted from every element of the ArrayMath object.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.mul(System.Double[])">
<summary>
Multiplies an array to the ArrayMath object.
</summary>
<param name="b">
An array of numbers to be multiplied to the ArrayMath object.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.mul(System.Double)">
<summary>
Multiplies a number to every element of the ArrayMath object.
</summary>
<param name="b">
A number to be multiplied to every element of the ArrayMath object.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.mul2(System.Double)">
<summary>
Multiplies a number to every element of the ArrayMath object.
</summary>
<param name="b">
A number to be multiplied to every element of the ArrayMath object.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.div(System.Double[])">
<summary>
Divides the ArrayMath object by the given array.
</summary>
<param name="b">
An array of numbers used as divisors to divide the ArrayMath object.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.div(System.Double)">
<summary>
Divides every element of the ArrayMath object by the given number.
</summary>
<param name="b">
A number to be used as divisor to divide every element of the ArrayMath object.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.div2(System.Double)">
<summary>
Divides every element of the ArrayMath object by the given number.
</summary>
<param name="b">
A number to be used as divisor to divide every element of the ArrayMath object.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.financeDiv(System.Double[],System.Double)">
<summary>
Divides the ArrayMath object by the given array, with special handling of the case of zero divided by zero.
</summary>
<param name="b">
An array of numbers used as divisors to divide the ArrayMath object.
</param>
<param name="zeroByZeroValue">
The value to use if the division is zero divided by zero.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.shift">
<summary>
Shifts the array "rightwards".
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.shift(System.Int32)">
<summary>
Shifts the array "rightwards".
</summary>
<param name="offset">
The number of positions to shift the array "rightwards."
</param>
</member>
<member name="M:ChartDirector.ArrayMath.shift(System.Int32,System.Double)">
<summary>
Shifts the array "rightwards".
</summary>
<param name="offset">
The number of positions to shift the array "rightwards."
</param>
<param name="fillValue">
The new value to be shifted into the array.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.delta">
<summary>
Subtracts each element of the ArrayMath object by an earlier element in the same ArrayMath object.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.delta(System.Int32)">
<summary>
Subtracts each element of the ArrayMath object by an earlier element in the same ArrayMath object.
</summary>
<param name="offset">
The difference in position between an element and the earlier element to be subtracted from it.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.rate">
<summary>
Divides each element of the ArrayMath object by an earlier element in the same ArrayMath object.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.rate(System.Int32)">
<summary>
Divides each element of the ArrayMath object by an earlier element in the same ArrayMath object.
</summary>
<param name="offset">
The difference in position between an element and the earlier element to divide it.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.abs">
<summary>
Replaces each element of the ArrayMath object by its absolute value.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.acc">
<summary>
Replaces each element of the ArrayMath object by the accumulated total of its previous element (including itself).
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.selectGTZ">
<summary>
Selects the elements of the ArrayMath object by checking if the elements of the given <b>decisionArray</b> is greater than zero.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.selectGTZ(System.Double[])">
<summary>
Selects the elements of the ArrayMath object by checking if the elements of the given <b>decisionArray</b> is greater than zero.
</summary>
<param name="decisionArray">
An array of numbers used to decide whether the corresponding elements in the ArrayMath object is selected or not.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectGTZ(System.Double[],System.Double)">
<summary>
Selects the elements of the ArrayMath object by checking if the elements of the given <b>decisionArray</b> is greater than zero.
</summary>
<param name="decisionArray">
An array of numbers used to decide whether the corresponding elements in the ArrayMath object is selected or not.
</param>
<param name="fillValue">
The value used to replace the elements that are not selected.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectGEZ">
<summary>
Selects the elements of the ArrayMath object by checking if the elements of the given <b>decisionArray</b> is greater than or equal to zero.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.selectGEZ(System.Double[])">
<summary>
Selects the elements of the ArrayMath object by checking if the elements of the given <b>decisionArray</b> is greater than or equal to zero.
</summary>
<param name="decisionArray">
An array of numbers used to decide whether the corresponding elements in the ArrayMath object is selected or not.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectGEZ(System.Double[],System.Double)">
<summary>
Selects the elements of the ArrayMath object by checking if the elements of the given <b>decisionArray</b> is greater than or equal to zero.
</summary>
<param name="decisionArray">
An array of numbers used to decide whether the corresponding elements in the ArrayMath object is selected or not.
</param>
<param name="fillValue">
The value used to replace the elements that are not selected.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectLTZ">
<summary>
Selects the elements of the ArrayMath object by checking if the elements of the given <b>decisionArray</b> is less than zero.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.selectLTZ(System.Double[])">
<summary>
Selects the elements of the ArrayMath object by checking if the elements of the given <b>decisionArray</b> is less than zero.
</summary>
<param name="decisionArray">
An array of numbers used to decide whether the corresponding elements in the ArrayMath object is selected or not.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectLTZ(System.Double[],System.Double)">
<summary>
Selects the elements of the ArrayMath object by checking if the elements of the given <b>decisionArray</b> is less than zero.
</summary>
<param name="decisionArray">
An array of numbers used to decide whether the corresponding elements in the ArrayMath object is selected or not.
</param>
<param name="fillValue">
The value used to replace the elements that are not selected.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectLEZ">
<summary>
Selects the elements of the ArrayMath object by checking if the elements of the given <b>decisionArray</b> is less than or equal to zero.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.selectLEZ(System.Double[])">
<summary>
Selects the elements of the ArrayMath object by checking if the elements of the given <b>decisionArray</b> is less than or equal to zero.
</summary>
<param name="decisionArray">
An array of numbers used to decide whether the corresponding elements in the ArrayMath object is selected or not.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectLEZ(System.Double[],System.Double)">
<summary>
Selects the elements of the ArrayMath object by checking if the elements of the given <b>decisionArray</b> is less than or equal to zero.
</summary>
<param name="decisionArray">
An array of numbers used to decide whether the corresponding elements in the ArrayMath object is selected or not.
</param>
<param name="fillValue">
The value used to replace the elements that are not selected.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectEQZ">
<summary>
Selects the elements of the ArrayMath object by checking if the elements of the given <b>decisionArray</b> is equal to zero.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.selectEQZ(System.Double[])">
<summary>
Selects the elements of the ArrayMath object by checking if the elements of the given <b>decisionArray</b> is equal to zero.
</summary>
<param name="decisionArray">
An array of numbers used to decide whether the corresponding elements in the ArrayMath object is selected or not.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectEQZ(System.Double[],System.Double)">
<summary>
Selects the elements of the ArrayMath object by checking if the elements of the given <b>decisionArray</b> is equal to zero.
</summary>
<param name="decisionArray">
An array of numbers used to decide whether the corresponding elements in the ArrayMath object is selected or not.
</param>
<param name="fillValue">
The value used to replace the elements that are not selected.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectNEZ">
<summary>
Selects the elements of the ArrayMath object by checking if the elements of the given <b>decisionArray</b> is not equal to zero.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.selectNEZ(System.Double[])">
<summary>
Selects the elements of the ArrayMath object by checking if the elements of the given <b>decisionArray</b> is not equal to zero.
</summary>
<param name="decisionArray">
An array of numbers used to decide whether the corresponding elements in the ArrayMath object is selected or not.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectNEZ(System.Double[],System.Double)">
<summary>
Selects the elements of the ArrayMath object by checking if the elements of the given <b>decisionArray</b> is not equal to zero.
</summary>
<param name="decisionArray">
An array of numbers used to decide whether the corresponding elements in the ArrayMath object is selected or not.
</param>
<param name="fillValue">
The value used to replace the elements that are not selected.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectStartOfSecond">
<summary>
Selects the elements of the ArrayMath object that represents a different second from the previous element.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.selectStartOfSecond(System.Int32)">
<summary>
Selects the elements of the ArrayMath object that represents a different second from the previous element.
</summary>
<param name="majorTickStep">
The tick step. A value of n means one tick per n seconds.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectStartOfSecond(System.Int32,System.Double)">
<summary>
Selects the elements of the ArrayMath object that represents a different second from the previous element.
</summary>
<param name="majorTickStep">
The tick step. A value of n means one tick per n seconds.
</param>
<param name="initialMargin">
The margin for the first data point. The first data point will be selected if it is within initialMargin number of seconds from beginning of the second it represents. The default is 0.1 second.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectStartOfMinute">
<summary>
Selects the elements of the ArrayMath object that represents a different minute from the previous element.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.selectStartOfMinute(System.Int32)">
<summary>
Selects the elements of the ArrayMath object that represents a different minute from the previous element.
</summary>
<param name="majorTickStep">
The tick step. A value of n means one tick per n minutes.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectStartOfMinute(System.Int32,System.Double)">
<summary>
Selects the elements of the ArrayMath object that represents a different minute from the previous element.
</summary>
<param name="majorTickStep">
The tick step. A value of n means one tick per n minutes.
</param>
<param name="initialMargin">
The margin for the first data point. The first data point will be selected if it is within initialMargin number of seconds from beginning of the minute it represents. The default is 5 seconds.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectStartOfHour">
<summary>
Selects the elements of the ArrayMath object that represents a different hour from the previous element.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.selectStartOfHour(System.Int32)">
<summary>
Selects the elements of the ArrayMath object that represents a different hour from the previous element.
</summary>
<param name="majorTickStep">
The tick step. A value of n means one tick per n hours.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectStartOfHour(System.Int32,System.Double)">
<summary>
Selects the elements of the ArrayMath object that represents a different hour from the previous element.
</summary>
<param name="majorTickStep">
The tick step. A value of n means one tick per n hours.
</param>
<param name="initialMargin">
The margin for the first data point. The first data point will be selected if it is within initialMargin number of seconds from beginning of the hour it represents. The default is 300 seconds.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectStartOfDay">
<summary>
Selects the elements of the ArrayMath object that represents a different day from the previous element.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.selectStartOfDay(System.Int32)">
<summary>
Selects the elements of the ArrayMath object that represents a different day from the previous element.
</summary>
<param name="majorTickStep">
The tick step. A value of n means one tick per n days.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectStartOfDay(System.Int32,System.Double)">
<summary>
Selects the elements of the ArrayMath object that represents a different day from the previous element.
</summary>
<param name="majorTickStep">
The tick step. A value of n means one tick per n days.
</param>
<param name="initialMargin">
The margin for the first data point. The first data point will be selected if it is within initialMargin number of seconds from beginning of the day it represents. The default is 3 hours (10800 seconds).
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectStartOfWeek">
<summary>
Selects the elements of the ArrayMath object that represents a different week from the previous element.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.selectStartOfWeek(System.Int32)">
<summary>
Selects the elements of the ArrayMath object that represents a different week from the previous element.
</summary>
<param name="majorTickStep">
The tick step. A value of n means one tick per n weeks.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectStartOfWeek(System.Int32,System.Double)">
<summary>
Selects the elements of the ArrayMath object that represents a different week from the previous element.
</summary>
<param name="majorTickStep">
The tick step. A value of n means one tick per n weeks.
</param>
<param name="initialMargin">
The margin for the first data point. The first data point will be selected if it is within initialMargin number of seconds from beginning of the week it represents. The default is 2 days (172800 seconds).
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectStartOfMonth">
<summary>
Selects the elements of the ArrayMath object that represents a different month from the previous element.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.selectStartOfMonth(System.Int32)">
<summary>
Selects the elements of the ArrayMath object that represents a different month from the previous element.
</summary>
<param name="majorTickStep">
The tick step. A value of n means one tick per n months.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectStartOfMonth(System.Int32,System.Double)">
<summary>
Selects the elements of the ArrayMath object that represents a different month from the previous element.
</summary>
<param name="majorTickStep">
The tick step. A value of n means one tick per n months.
</param>
<param name="initialMargin">
The margin for the first data point. The first data point will be selected if it is within initialMargin number of seconds from beginning of the month it represents. The default is 5 days (432000 seconds).
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectStartOfYear">
<summary>
Selects the elements of the ArrayMath object that represents a different year from the previous element.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.selectStartOfYear(System.Int32)">
<summary>
Selects the elements of the ArrayMath object that represents a different year from the previous element.
</summary>
<param name="majorTickStep">
The tick step. A value of n means one tick per n years.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectStartOfYear(System.Int32,System.Double)">
<summary>
Selects the elements of the ArrayMath object that represents a different year from the previous element.
</summary>
<param name="majorTickStep">
The tick step. A value of n means one tick per n years.
</param>
<param name="initialMargin">
The margin for the first data point. The first data point will be selected if it is within initialMargin number of seconds from beginning of the year it represents. The default is 60 days (5184000 seconds).
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectRegularSpacing(System.Int32)">
<summary>
Selects an evenly spaced subset of elements of the ArrayMath object.
</summary>
<param name="majorTickStep">
The spacing between major ticks.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectRegularSpacing(System.Int32,System.Int32)">
<summary>
Selects an evenly spaced subset of elements of the ArrayMath object.
</summary>
<param name="majorTickStep">
The spacing between major ticks.
</param>
<param name="minorTickStep">
The spacing between minor ticks. 0 means no minor tick will be used.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.selectRegularSpacing(System.Int32,System.Int32,System.Int32)">
<summary>
Selects an evenly spaced subset of elements of the ArrayMath object.
</summary>
<param name="majorTickStep">
The spacing between major ticks.
</param>
<param name="minorTickStep">
The spacing between minor ticks. 0 means no minor tick will be used.
</param>
<param name="initialMargin">
The position of the first tick.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.trim">
<summary>
Trims the ArrayMath object by keeping only some elements in the middle.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.trim(System.Int32)">
<summary>
Trims the ArrayMath object by keeping only some elements in the middle.
</summary>
<param name="startIndex">
The index for the first element to keep.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.trim(System.Int32,System.Int32)">
<summary>
Trims the ArrayMath object by keeping only some elements in the middle.
</summary>
<param name="startIndex">
The index for the first element to keep.
</param>
<param name="len">
The number of elements to keep. -1 means keeping all elements from the <b>startIndex</b> to the end of the array.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.insert(System.Double[])">
<summary>
Inserts the elements of an array to the ArrayMath object.
</summary>
<param name="a">
An array to be inserted to the ArrayMath object.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.insert(System.Double[],System.Int32)">
<summary>
Inserts the elements of an array to the ArrayMath object.
</summary>
<param name="a">
An array to be inserted to the ArrayMath object.
</param>
<param name="insertPoint">
The position of the insertion point. The new elements will be inserted just before the insertion point. -1 means inserting elements at the end of the array.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.insert(System.Double,System.Int32)">
<summary>
Inserts some constant elements to the ArrayMath object.
</summary>
<param name="c">
The value of the constant element.
</param>
<param name="len">
The number of elements to insert.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.insert(System.Double,System.Int32,System.Int32)">
<summary>
Inserts some constant elements to the ArrayMath object.
</summary>
<param name="c">
The value of the constant element.
</param>
<param name="len">
The number of elements to insert.
</param>
<param name="insertPoint">
The position of the insertion point. The new elements will be inserted just before the insertion point. -1 means inserting elements at the end of the array.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.insert2(System.Double,System.Int32)">
<summary>
Inserts some constant elements to the ArrayMath object.
</summary>
<param name="c">
The value of the constant element.
</param>
<param name="len">
The number of elements to insert.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.insert2(System.Double,System.Int32,System.Int32)">
<summary>
Inserts some constant elements to the ArrayMath object.
</summary>
<param name="c">
The value of the constant element.
</param>
<param name="len">
The number of elements to insert.
</param>
<param name="insertPoint">
The position of the insertion point. The new elements will be inserted just before the insertion point. -1 means inserting elements at the end of the array.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.replace(System.Double,System.Double)">
<summary>
Finds elements that are equal to a given value and replace it with another value.
</summary>
<param name="a">
The value to be replaced.
</param>
<param name="b">
The replacing value.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.movAvg(System.Int32)">
<summary>
Replaces each element of the ArrayMath object by its moving average.
</summary>
<param name="interval">
The window size.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.expAvg(System.Double)">
<summary>
Replaces each element of the ArrayMath object by its exponential average.
</summary>
<param name="smoothingFactor">
The smoothing factor used for computing exponential average. It should be between 0 - 1.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.movMed(System.Int32)">
<summary>
Replaces each element of the ArrayMath object by its moving median.
</summary>
<param name="interval">
The window size.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.movPercentile(System.Int32,System.Double)">
<summary>
Replaces each element of the ArrayMath object by its moving percentile.
</summary>
<param name="interval">
The window size.
</param>
<param name="percentile">
The percentile to be computed. It should be between 0 - 100.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.movMax(System.Int32)">
<summary>
Replaces each element of the ArrayMath object by its moving maximum.
</summary>
<param name="interval">
The window size.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.movMin(System.Int32)">
<summary>
Replaces each element of the ArrayMath object by its moving minimum.
</summary>
<param name="interval">
The window size.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.movStdDev(System.Int32)">
<summary>
Replaces each element of the ArrayMath object by its moving standard deviation.
</summary>
<param name="interval">
The window size.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.movCorr(System.Int32)">
<summary>
Replaces each element of the ArrayMath object by the moving correlation with another array or with itself.
</summary>
<param name="interval">
The window size.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.movCorr(System.Int32,System.Double[])">
<summary>
Replaces each element of the ArrayMath object by the moving correlation with another array or with itself.
</summary>
<param name="interval">
The window size.
</param>
<param name="b">
The array to be correlated with the ArrayMath object. If this argument is an empty array, the sequence of numbers 0, 1, 2, 3, 4 .... will be used instead.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.lowess">
<summary>
Fits a curve through the data points in the ArrayMath object using the LOWESS algorithm.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.lowess(System.Double)">
<summary>
Fits a curve through the data points in the ArrayMath object using the LOWESS algorithm.
</summary>
<param name="smoothness">
The smoothness factor. It must be between 0 - 1. It is the portion of points used in finding the n nearest points. In other words, n = smoothness * no_of_points. A larger value will result in a smoother the curve. A smaller value will result in the curve tracking the data points better.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.lowess(System.Double,System.Int32)">
<summary>
Fits a curve through the data points in the ArrayMath object using the LOWESS algorithm.
</summary>
<param name="smoothness">
The smoothness factor. It must be between 0 - 1. It is the portion of points used in finding the n nearest points. In other words, n = smoothness * no_of_points. A larger value will result in a smoother the curve. A smaller value will result in the curve tracking the data points better.
</param>
<param name="iteration">
The number of additional iteration used in the LOWESS algorithm. Unless your data is extremely noisy, in most case no additional iteration is necessary.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.lowess(System.Double[])">
<summary>
Fits a curve through the data points in the ArrayMath object using the LOWESS algorithm, where the spacing of the data points is supplied by the given array.
</summary>
<param name="b">
An array of numbers providing the x coordinates of the data points in the ArrayMath object.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.lowess(System.Double[],System.Double)">
<summary>
Fits a curve through the data points in the ArrayMath object using the LOWESS algorithm, where the spacing of the data points is supplied by the given array.
</summary>
<param name="b">
An array of numbers providing the x coordinates of the data points in the ArrayMath object.
</param>
<param name="smoothness">
The smoothness factor. It must be between 0 - 1. It is the portion of points used in finding the n nearest points. In other words, n = smoothness * no_of_points. A larger value will result in a smoother the curve. A smaller value will result in the curve tracking the data points better.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.lowess(System.Double[],System.Double,System.Int32)">
<summary>
Fits a curve through the data points in the ArrayMath object using the LOWESS algorithm, where the spacing of the data points is supplied by the given array.
</summary>
<param name="b">
An array of numbers providing the x coordinates of the data points in the ArrayMath object.
</param>
<param name="smoothness">
The smoothness factor. It must be between 0 - 1. It is the portion of points used in finding the n nearest points. In other words, n = smoothness * no_of_points. A larger value will result in a smoother the curve. A smaller value will result in the curve tracking the data points better.
</param>
<param name="iteration">
The number of additional iteration used in the LOWESS algorithm. Unless your data is extremely noisy, in most case no additional iteration is necessary.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.lowess2(System.Double[])">
<summary>
Fits a curve through the data points in the ArrayMath object using the LOWESS algorithm, where the spacing of the data points is supplied by the given array.
</summary>
<param name="b">
An array of numbers providing the x coordinates of the data points in the ArrayMath object.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.lowess2(System.Double[],System.Double)">
<summary>
Fits a curve through the data points in the ArrayMath object using the LOWESS algorithm, where the spacing of the data points is supplied by the given array.
</summary>
<param name="b">
An array of numbers providing the x coordinates of the data points in the ArrayMath object.
</param>
<param name="smoothness">
The smoothness factor. It must be between 0 - 1. It is the portion of points used in finding the n nearest points. In other words, n = smoothness * no_of_points. A larger value will result in a smoother the curve. A smaller value will result in the curve tracking the data points better.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.lowess2(System.Double[],System.Double,System.Int32)">
<summary>
Fits a curve through the data points in the ArrayMath object using the LOWESS algorithm, where the spacing of the data points is supplied by the given array.
</summary>
<param name="b">
An array of numbers providing the x coordinates of the data points in the ArrayMath object.
</param>
<param name="smoothness">
The smoothness factor. It must be between 0 - 1. It is the portion of points used in finding the n nearest points. In other words, n = smoothness * no_of_points. A larger value will result in a smoother the curve. A smaller value will result in the curve tracking the data points better.
</param>
<param name="iteration">
The number of additional iteration used in the LOWESS algorithm. Unless your data is extremely noisy, in most case no additional iteration is necessary.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.result">
<summary>
Gets the content of the ArrayMath object as a normal array to be used in other ChartDirector API.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.sum">
<summary>
Gets the sum value of the elements of the ArrayMath object.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.max">
<summary>
Gets the maximum value of the elements of the ArrayMath object.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.min">
<summary>
Gets the minimum value of the elements of the ArrayMath object.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.avg">
<summary>
Gets the avg value of the elements of the ArrayMath object.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.med">
<summary>
Gets the med value of the elements of the ArrayMath object.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.percentile(System.Double)">
<summary>
Gets the required percentile value of the elements of the ArrayMath object.
</summary>
<param name="p">
The percentile to get. It should be between 0 - 100.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.stdDev">
<summary>
Gets the stdDev value of the elements of the ArrayMath object.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.maxIndex">
<summary>
Gets the index of the maximum value element of the ArrayMath object.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.minIndex">
<summary>
Gets the index of the minimum value element of the ArrayMath object.
</summary>
</member>
<member name="M:ChartDirector.ArrayMath.aggregate(System.Double[],System.Int32)">
<summary>
Aggregates a data array by merging groups of elements, similar to the GROUP BY clause in SQL statements.
</summary>
<param name="srcArray">
The array to be aggregated.
</param>
<param name="aggregateMethod">
The method to aggregate the data, which must be one of "AggregateSum",  "AggregateAvg", "AggregateStdDev", "AggregateMin", "AggregateMed", "AggregateMax", "AggregatePercentile", "AggregateFirst", "AggregateLast", "AggregateCount".
</param>
</member>
<member name="M:ChartDirector.ArrayMath.aggregate(System.Double[],System.Int32,System.Double)">
<summary>
Aggregates a data array by merging groups of elements, similar to the GROUP BY clause in SQL statements.
</summary>
<param name="srcArray">
The array to be aggregated.
</param>
<param name="aggregateMethod">
The method to aggregate the data, which must be one of "AggregateSum",  "AggregateAvg", "AggregateStdDev", "AggregateMin", "AggregateMed", "AggregateMax", "AggregatePercentile", "AggregateFirst", "AggregateLast", "AggregateCount".
</param>
<param name="param">
The aggregation parameter, if needed. Currently, only "AggregatePercentile" needs a parameter to specify the percentile used.
</param>
</member>
<member name="M:ChartDirector.ArrayMath.aggregate(System.DateTime[],System.Int32)">
<summary>
Aggregates a data array by merging groups of elements, similar to the GROUP BY clause in SQL statements.
</summary>
<param name="srcArray">
The array to be aggregated.
</param>
<param name="aggregateMethod">
The method to aggregate the data, which must be one of "AggregateSum",  "AggregateAvg", "AggregateStdDev", "AggregateMin", "AggregateMed", "AggregateMax", "AggregatePercentile", "AggregateFirst", "AggregateLast", "AggregateCount".
</param>
</member>
<member name="M:ChartDirector.ArrayMath.aggregate(System.DateTime[],System.Int32,System.Double)">
<summary>
Aggregates a data array by merging groups of elements, similar to the GROUP BY clause in SQL statements.
</summary>
<param name="srcArray">
The array to be aggregated.
</param>
<param name="aggregateMethod">
The method to aggregate the data, which must be one of "AggregateSum",  "AggregateAvg", "AggregateStdDev", "AggregateMin", "AggregateMed", "AggregateMax", "AggregatePercentile", "AggregateFirst", "AggregateLast", "AggregateCount".
</param>
<param name="param">
The aggregation parameter, if needed. Currently, only "AggregatePercentile" needs a parameter to specify the percentile used.
</param>
</member>
<member name="M:ChartDirector.RanTable.#ctor(System.Int32,System.Int32,System.Int32)">
<summary>
Creates a RanTable object.
</summary>
<param name="seed">
The seed to be used in the random number generator.
</param>
<param name="noOfCols">
The number of columns in the random number table.
</param>
<param name="noOfRows">
The number of rows in the random number table.
</param>
</member>
<member name="M:ChartDirector.RanTable.setCol(System.Int32,System.Double,System.Double)">
<summary>
Fill the given column in the RanTable with random numbers.
</summary>
<param name="colNo">
The column to fill. The first column is 0. The nth column is (n - 1).
</param>
<param name="minValue">
The minimum value of the random number.
</param>
<param name="maxValue">
The maximum value of the random number.
</param>
</member>
<member name="M:ChartDirector.RanTable.setCol(System.Int32,System.Double,System.Double,System.Double)">
<summary>
Fill the given column in the RanTable with numbers that fluctuate randomly.
</summary>
<param name="colNo">
The column to fill. The first column is 0. The nth column is (n - 1).
</param>
<param name="startValue">
The value of the first record in the column.
</param>
<param name="minDelta">
The minimum change between two consecutive numbers.
</param>
<param name="maxDelta">
The maximum change between two consecutive numbers.
</param>
</member>
<member name="M:ChartDirector.RanTable.setCol(System.Int32,System.Double,System.Double,System.Double,System.Double)">
<summary>
Fill the given column in the RanTable with numbers that fluctuate randomly.
</summary>
<param name="colNo">
The column to fill. The first column is 0. The nth column is (n - 1).
</param>
<param name="startValue">
The value of the first record in the column.
</param>
<param name="minDelta">
The minimum change between two consecutive numbers.
</param>
<param name="maxDelta">
The maximum change between two consecutive numbers.
</param>
<param name="lowerLimit">
The minimum allowed value of the numbers.
</param>
</member>
<member name="M:ChartDirector.RanTable.setCol(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
<summary>
Fill the given column in the RanTable with numbers that fluctuate randomly.
</summary>
<param name="colNo">
The column to fill. The first column is 0. The nth column is (n - 1).
</param>
<param name="startValue">
The value of the first record in the column.
</param>
<param name="minDelta">
The minimum change between two consecutive numbers.
</param>
<param name="maxDelta">
The maximum change between two consecutive numbers.
</param>
<param name="lowerLimit">
The minimum allowed value of the numbers.
</param>
<param name="upperLimit">
The maximum allowed value of the numbers.
</param>
</member>
<member name="M:ChartDirector.RanTable.setCol2(System.Int32,System.Double,System.Double,System.Double)">
<summary>
Fill the given column in the RanTable with numbers that fluctuate randomly.
</summary>
<param name="colNo">
The column to fill. The first column is 0. The nth column is (n - 1).
</param>
<param name="startValue">
The value of the first record in the column.
</param>
<param name="minDelta">
The minimum change between two consecutive numbers.
</param>
<param name="maxDelta">
The maximum change between two consecutive numbers.
</param>
</member>
<member name="M:ChartDirector.RanTable.setCol2(System.Int32,System.Double,System.Double,System.Double,System.Double)">
<summary>
Fill the given column in the RanTable with numbers that fluctuate randomly.
</summary>
<param name="colNo">
The column to fill. The first column is 0. The nth column is (n - 1).
</param>
<param name="startValue">
The value of the first record in the column.
</param>
<param name="minDelta">
The minimum change between two consecutive numbers.
</param>
<param name="maxDelta">
The maximum change between two consecutive numbers.
</param>
<param name="lowerLimit">
The minimum allowed value of the numbers.
</param>
</member>
<member name="M:ChartDirector.RanTable.setCol2(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
<summary>
Fill the given column in the RanTable with numbers that fluctuate randomly.
</summary>
<param name="colNo">
The column to fill. The first column is 0. The nth column is (n - 1).
</param>
<param name="startValue">
The value of the first record in the column.
</param>
<param name="minDelta">
The minimum change between two consecutive numbers.
</param>
<param name="maxDelta">
The maximum change between two consecutive numbers.
</param>
<param name="lowerLimit">
The minimum allowed value of the numbers.
</param>
<param name="upperLimit">
The maximum allowed value of the numbers.
</param>
</member>
<member name="M:ChartDirector.RanTable.setDateCol(System.Int32,System.Double,System.Double)">
<summary>
Fill the given column in the RanTable with a "date/time" series.
</summary>
<param name="i">
The column to fill. The first column is 0. The nth column is (n - 1).
</param>
<param name="startTime">
The "date/time" of the first record in the column.
</param>
<param name="tickInc">
The change in date/time for subsequent records in seconds. The value 30 * 86400 is assumed to mean 1 month (which is not a constant interval), and its multiplies are assumed to mean multiple months. In particular, the value 360 * 86400 is assumed to mean 12 months, or 1 year.
</param>
</member>
<member name="M:ChartDirector.RanTable.setDateCol(System.Int32,System.Double,System.Double,System.Boolean)">
<summary>
Fill the given column in the RanTable with a "date/time" series.
</summary>
<param name="i">
The column to fill. The first column is 0. The nth column is (n - 1).
</param>
<param name="startTime">
The "date/time" of the first record in the column.
</param>
<param name="tickInc">
The change in date/time for subsequent records in seconds. The value 30 * 86400 is assumed to mean 1 month (which is not a constant interval), and its multiplies are assumed to mean multiple months. In particular, the value 360 * 86400 is assumed to mean 12 months, or 1 year.
</param>
<param name="weekDayOnly">
A true value means skipping dates that are not weekdays (Saturday and Sunday). A %F value means no skipping.
</param>
</member>
<member name="M:ChartDirector.RanTable.setDateCol(System.Int32,System.DateTime,System.Double)">
<summary>
Fill the given column in the RanTable with a "date/time" series.
</summary>
<param name="i">
The column to fill. The first column is 0. The nth column is (n - 1).
</param>
<param name="startTime">
The "date/time" of the first record in the column.
</param>
<param name="tickInc">
The change in date/time for subsequent records in seconds. The value 30 * 86400 is assumed to mean 1 month (which is not a constant interval), and its multiplies are assumed to mean multiple months. In particular, the value 360 * 86400 is assumed to mean 12 months, or 1 year.
</param>
</member>
<member name="M:ChartDirector.RanTable.setDateCol(System.Int32,System.DateTime,System.Double,System.Boolean)">
<summary>
Fill the given column in the RanTable with a "date/time" series.
</summary>
<param name="i">
The column to fill. The first column is 0. The nth column is (n - 1).
</param>
<param name="startTime">
The "date/time" of the first record in the column.
</param>
<param name="tickInc">
The change in date/time for subsequent records in seconds. The value 30 * 86400 is assumed to mean 1 month (which is not a constant interval), and its multiplies are assumed to mean multiple months. In particular, the value 360 * 86400 is assumed to mean 12 months, or 1 year.
</param>
<param name="weekDayOnly">
A true value means skipping dates that are not weekdays (Saturday and Sunday). A %F value means no skipping.
</param>
</member>
<member name="M:ChartDirector.RanTable.setHLOCCols(System.Int32,System.Double,System.Double,System.Double)">
<summary>
Fill 4 columns in the RanTable with random high, low, open and close records.
</summary>
<param name="i">
The column number of the "high" column. The next column will be assumed to be "low", followed by "open" and "close". The column number starts at 0. The first column is 0. The nth column is (n - 1).
</param>
<param name="startValue">
The initial "open" value.
</param>
<param name="minDelta">
The minimum change allowed for between the current "open" and the previous "close" value, as well as between the current "close" value and the current "open" value. This parameter is usually negative.
</param>
<param name="maxDelta">
The maximum change allowed for between the current "open" and the previous "close" value, as well as between the current "close" value and the current "open" value.
</param>
</member>
<member name="M:ChartDirector.RanTable.setHLOCCols(System.Int32,System.Double,System.Double,System.Double,System.Double)">
<summary>
Fill 4 columns in the RanTable with random high, low, open and close records.
</summary>
<param name="i">
The column number of the "high" column. The next column will be assumed to be "low", followed by "open" and "close". The column number starts at 0. The first column is 0. The nth column is (n - 1).
</param>
<param name="startValue">
The initial "open" value.
</param>
<param name="minDelta">
The minimum change allowed for between the current "open" and the previous "close" value, as well as between the current "close" value and the current "open" value. This parameter is usually negative.
</param>
<param name="maxDelta">
The maximum change allowed for between the current "open" and the previous "close" value, as well as between the current "close" value and the current "open" value.
</param>
<param name="lowerLimit">
The minimum value for "high", "low", "open" and "close".
</param>
</member>
<member name="M:ChartDirector.RanTable.setHLOCCols(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
<summary>
Fill 4 columns in the RanTable with random high, low, open and close records.
</summary>
<param name="i">
The column number of the "high" column. The next column will be assumed to be "low", followed by "open" and "close". The column number starts at 0. The first column is 0. The nth column is (n - 1).
</param>
<param name="startValue">
The initial "open" value.
</param>
<param name="minDelta">
The minimum change allowed for between the current "open" and the previous "close" value, as well as between the current "close" value and the current "open" value. This parameter is usually negative.
</param>
<param name="maxDelta">
The maximum change allowed for between the current "open" and the previous "close" value, as well as between the current "close" value and the current "open" value.
</param>
<param name="lowerLimit">
The minimum value for "high", "low", "open" and "close".
</param>
<param name="upperLimit">
The maximum value for "high", "low", "open" and "close".
</param>
</member>
<member name="M:ChartDirector.RanTable.selectDate(System.Int32,System.Double,System.Double)">
<summary>
Selects the rows within a certain date range.
</summary>
<param name="colNo">
The date column to be used as selection criteria.
</param>
<param name="minDate">
The minimum date (earliest date).
</param>
<param name="maxDate">
The maximum date (latest date).
</param>
</member>
<member name="M:ChartDirector.RanTable.selectDate(System.Int32,System.DateTime,System.DateTime)">
<summary>
Selects the rows within a certain date range.
</summary>
<param name="colNo">
The date column to be used as selection criteria.
</param>
<param name="minDate">
The minimum date (earliest date).
</param>
<param name="maxDate">
The maximum date (latest date).
</param>
</member>
<member name="M:ChartDirector.RanTable.getCol(System.Int32)">
<summary>
Gets the request column as an array of numbers.
</summary>
<param name="i">
The column to get. The first column is 0. The nth column is (n - 1).
</param>
</member>
<member name="M:ChartDirector.RanSeries.#ctor(System.Int32)">
<summary>
Creates a RanSeries object.
</summary>
<param name="seed">
The seed to be used in the random number generator.
</param>
</member>
<member name="M:ChartDirector.RanSeries.getSeries(System.Int32,System.Double,System.Double)">
<summary>
Gets an array of independent random numbers.
</summary>
<param name="len">
The number of random values to get.
</param>
<param name="minValue">
The minimum value of the random number.
</param>
<param name="maxValue">
The maximum value of the random number.
</param>
</member>
<member name="M:ChartDirector.RanSeries.getSeries(System.Int32,System.Double,System.Double,System.Double)">
<summary>
Gets an array of numbers in which the difference between adjacent numbers is random.
</summary>
<param name="len">
The number of random values to get.
</param>
<param name="startValue">
The first value in the sequence.
</param>
<param name="minDelta">
The minimum change between two consecutive numbers.
</param>
<param name="maxDelta">
The maximum change between two consecutive numbers.
</param>
</member>
<member name="M:ChartDirector.RanSeries.getSeries(System.Int32,System.Double,System.Double,System.Double,System.Double)">
<summary>
Gets an array of numbers in which the difference between adjacent numbers is random.
</summary>
<param name="len">
The number of random values to get.
</param>
<param name="startValue">
The first value in the sequence.
</param>
<param name="minDelta">
The minimum change between two consecutive numbers.
</param>
<param name="maxDelta">
The maximum change between two consecutive numbers.
</param>
<param name="lowerLimit">
The minimum allowed value of the numbers.
</param>
</member>
<member name="M:ChartDirector.RanSeries.getSeries(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
<summary>
Gets an array of numbers in which the difference between adjacent numbers is random.
</summary>
<param name="len">
The number of random values to get.
</param>
<param name="startValue">
The first value in the sequence.
</param>
<param name="minDelta">
The minimum change between two consecutive numbers.
</param>
<param name="maxDelta">
The maximum change between two consecutive numbers.
</param>
<param name="lowerLimit">
The minimum allowed value of the numbers.
</param>
<param name="upperLimit">
The maximum allowed value of the numbers.
</param>
</member>
<member name="M:ChartDirector.RanSeries.getSeries2(System.Int32,System.Double,System.Double,System.Double)">
<summary>
Gets an array of numbers in which the difference between adjacent numbers is random.
</summary>
<param name="len">
The number of random values to get.
</param>
<param name="startValue">
The first value in the sequence.
</param>
<param name="minDelta">
The minimum change between two consecutive numbers.
</param>
<param name="maxDelta">
The maximum change between two consecutive numbers.
</param>
</member>
<member name="M:ChartDirector.RanSeries.getSeries2(System.Int32,System.Double,System.Double,System.Double,System.Double)">
<summary>
Gets an array of numbers in which the difference between adjacent numbers is random.
</summary>
<param name="len">
The number of random values to get.
</param>
<param name="startValue">
The first value in the sequence.
</param>
<param name="minDelta">
The minimum change between two consecutive numbers.
</param>
<param name="maxDelta">
The maximum change between two consecutive numbers.
</param>
<param name="lowerLimit">
The minimum allowed value of the numbers.
</param>
</member>
<member name="M:ChartDirector.RanSeries.getSeries2(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
<summary>
Gets an array of numbers in which the difference between adjacent numbers is random.
</summary>
<param name="len">
The number of random values to get.
</param>
<param name="startValue">
The first value in the sequence.
</param>
<param name="minDelta">
The minimum change between two consecutive numbers.
</param>
<param name="maxDelta">
The maximum change between two consecutive numbers.
</param>
<param name="lowerLimit">
The minimum allowed value of the numbers.
</param>
<param name="upperLimit">
The maximum allowed value of the numbers.
</param>
</member>
<member name="M:ChartDirector.RanSeries.get2DSeries(System.Int32,System.Int32,System.Double,System.Double)">
<summary>
Gets an array of random numbers representing points on a 2D grid in which the difference between neighbouring points is random.
</summary>
<param name="xLen">
The number of points in the grid in the x direction.
</param>
<param name="yLen">
The number of points in the grid in the y direction.
</param>
<param name="minValue">
The minimum value of the random number.
</param>
<param name="maxValue">
The maximum value of the random number.
</param>
</member>
<member name="M:ChartDirector.RanSeries.getGaussianSeries(System.Int32,System.Double,System.Double)">
<summary>
Gets an array of independent random numbers that are gaussian distributed.
</summary>
<param name="len">
The number of random values to get.
</param>
<param name="mean">
The mean of the gaussian distribution.
</param>
<param name="stdDev">
The standard deviation of the gaussian distribution.
</param>
</member>
<member name="M:ChartDirector.RanSeries.getDateSeries(System.Int32,System.DateTime,System.Double)">
<summary>
Gets an array of "date/time" values.
</summary>
<param name="len">
The number of random values to get.
</param>
<param name="startTime">
The "date/time" of the first record in the column.
</param>
<param name="tickInc">
The change in date/time for subsequent records in seconds. The value 30 * 86400 is assumed to mean 1 month (which is not a constant interval), and its multiplies are assumed to mean multiple months. In particular, the value 360 * 86400 is assumed to mean 12 months, or 1 year.
</param>
</member>
<member name="M:ChartDirector.RanSeries.getDateSeries(System.Int32,System.DateTime,System.Double,System.Boolean)">
<summary>
Gets an array of "date/time" values.
</summary>
<param name="len">
The number of random values to get.
</param>
<param name="startTime">
The "date/time" of the first record in the column.
</param>
<param name="tickInc">
The change in date/time for subsequent records in seconds. The value 30 * 86400 is assumed to mean 1 month (which is not a constant interval), and its multiplies are assumed to mean multiple months. In particular, the value 360 * 86400 is assumed to mean 12 months, or 1 year.
</param>
<param name="weekDayOnly">
A true value means skipping dates that are not weekdays (Saturday and Sunday). A %F value means no skipping.
</param>
</member>
<member name="M:ChartDirector.RanSeries.getDateSeries(System.Int32,System.Double,System.Double)">
<summary>
Gets an array of "date/time" values.
</summary>
<param name="len">
The number of random values to get.
</param>
<param name="startTime">
The "date/time" of the first record in the column.
</param>
<param name="tickInc">
The change in date/time for subsequent records in seconds. The value 30 * 86400 is assumed to mean 1 month (which is not a constant interval), and its multiplies are assumed to mean multiple months. In particular, the value 360 * 86400 is assumed to mean 12 months, or 1 year.
</param>
</member>
<member name="M:ChartDirector.RanSeries.getDateSeries(System.Int32,System.Double,System.Double,System.Boolean)">
<summary>
Gets an array of "date/time" values.
</summary>
<param name="len">
The number of random values to get.
</param>
<param name="startTime">
The "date/time" of the first record in the column.
</param>
<param name="tickInc">
The change in date/time for subsequent records in seconds. The value 30 * 86400 is assumed to mean 1 month (which is not a constant interval), and its multiplies are assumed to mean multiple months. In particular, the value 360 * 86400 is assumed to mean 12 months, or 1 year.
</param>
<param name="weekDayOnly">
A true value means skipping dates that are not weekdays (Saturday and Sunday). A %F value means no skipping.
</param>
</member>
<member name="M:ChartDirector.FinanceSimulator.#ctor(System.Int32,System.DateTime,System.DateTime,System.Int32)">
<summary>
Creates a FinanceSimulator object.
</summary>
<param name="seed">
The seed to be used in the random number generator. It can be an integer or a non-empty text string.
</param>
<param name="startTime">
The start date/time of the financial date series.
</param>
<param name="endTime">
The end date/time of the financial date series.
</param>
<param name="resolution">
The resolution of the financial data series in seconds. For example, a value of 86400 means daily data (1 day = 86400 seconds). A value of 7 * 86400 means weekly data. A value of 30 * 86400 means monthly data.
</param>
</member>
<member name="M:ChartDirector.FinanceSimulator.#ctor(System.String,System.DateTime,System.DateTime,System.Int32)">
<summary>
Creates a FinanceSimulator object.
</summary>
<param name="seed">
The seed to be used in the random number generator. It can be an integer or a non-empty text string.
</param>
<param name="startTime">
The start date/time of the financial date series.
</param>
<param name="endTime">
The end date/time of the financial date series.
</param>
<param name="resolution">
The resolution of the financial data series in seconds. For example, a value of 86400 means daily data (1 day = 86400 seconds). A value of 7 * 86400 means weekly data. A value of 30 * 86400 means monthly data.
</param>
</member>
<member name="M:ChartDirector.FinanceSimulator.getTimeStamps">
<summary>
Gets the timestamps of the data series.
</summary>
</member>
<member name="M:ChartDirector.FinanceSimulator.getHighData">
<summary>
Gets the  high data series.
</summary>
</member>
<member name="M:ChartDirector.FinanceSimulator.getLowData">
<summary>
Gets the  low data series.
</summary>
</member>
<member name="M:ChartDirector.FinanceSimulator.getOpenData">
<summary>
Gets the  open data series.
</summary>
</member>
<member name="M:ChartDirector.FinanceSimulator.getCloseData">
<summary>
Gets the  close data series.
</summary>
</member>
<member name="M:ChartDirector.FinanceSimulator.getVolData">
<summary>
Gets the  volume data series.
</summary>
</member>
<member name="M:ChartDirector.DBTable.#ctor(System.Data.DataTable)">
<summary>
Creates a DBTable object and fills the data table with data from a System.Data.DataTable, or System.Data.IReader or System.Data.DataView object.
</summary>
<param name="table">
A System.Data.DataTable, or System.Data.IReader or System.Data.DataView object.
</param>
</member>
<member name="M:ChartDirector.DBTable.#ctor(System.Data.IDataReader)">
<summary>
Creates a DBTable object and fills the data table with data from a System.Data.DataTable, or System.Data.IReader or System.Data.DataView object.
</summary>
<param name="table">
A System.Data.DataTable, or System.Data.IReader or System.Data.DataView object.
</param>
</member>
<member name="M:ChartDirector.DBTable.#ctor(System.Data.DataView)">
<summary>
Creates a DBTable object and fills the data table with data from a System.Data.DataTable, or System.Data.IReader or System.Data.DataView object.
</summary>
<param name="table">
A System.Data.DataTable, or System.Data.IReader or System.Data.DataView object.
</param>
</member>
<member name="M:ChartDirector.DBTable.getCol(System.Int32)">
<summary>
Gets the requested column of the table as an array of numbers.
</summary>
<param name="i">
The column number. The first column is 0. The nth column is (n - 1).
</param>
</member>
<member name="M:ChartDirector.DBTable.getColAsString(System.Int32)">
<summary>
Gets the requested column of the table as an array of strings.
</summary>
<param name="i">
The column number. The first column is 0. The nth column is (n - 1).
</param>
</member>
<member name="M:ChartDirector.DBTable.getColAsDateTime(System.Int32)">
<summary>
Gets the requested column of the table as an array of System.DateTime objects.
</summary>
<param name="i">
The column number. The first column is 0. The nth column is (n - 1).
</param>
</member>
<member name="M:ChartDirector.DBTable.getColAsObj(System.Int32)">
<summary>
Gets the requested column of the table as an array of .NET Objects.
</summary>
<param name="i">
The column number. The first column is 0. The nth column is (n - 1).
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setScale(System.Double,System.Double)">
<summary>
Sets the meter to use the given scale.
</summary>
<param name="lowerLimit">
The lower limit of the meter scale.
</param>
<param name="upperLimit">
The upper limit of the meter scale.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setScale(System.Double,System.Double,System.Double)">
<summary>
Sets the meter to use the given scale.
</summary>
<param name="lowerLimit">
The lower limit of the meter scale.
</param>
<param name="upperLimit">
The upper limit of the meter scale.
</param>
<param name="majorTickInc">
The interval between major ticks. For example, a value of 10 means a major tick every 10 units in the meter scale. Each major tick will have an associated label for the value at the tick. A value of 0 disables major ticks.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setScale(System.Double,System.Double,System.Double,System.Double)">
<summary>
Sets the meter to use the given scale.
</summary>
<param name="lowerLimit">
The lower limit of the meter scale.
</param>
<param name="upperLimit">
The upper limit of the meter scale.
</param>
<param name="majorTickInc">
The interval between major ticks. For example, a value of 10 means a major tick every 10 units in the meter scale. Each major tick will have an associated label for the value at the tick. A value of 0 disables major ticks.
</param>
<param name="minorTickInc">
The interval between minor ticks. For example, a value of 5 means a minor tick every 5 units in the meter scale. A value of 0 disables minor ticks.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setScale(System.Double,System.Double,System.Double,System.Double,System.Double)">
<summary>
Sets the meter to use the given scale.
</summary>
<param name="lowerLimit">
The lower limit of the meter scale.
</param>
<param name="upperLimit">
The upper limit of the meter scale.
</param>
<param name="majorTickInc">
The interval between major ticks. For example, a value of 10 means a major tick every 10 units in the meter scale. Each major tick will have an associated label for the value at the tick. A value of 0 disables major ticks.
</param>
<param name="minorTickInc">
The interval between minor ticks. For example, a value of 5 means a minor tick every 5 units in the meter scale. A value of 0 disables minor ticks.
</param>
<param name="microTickInc">
The interval between minor ticks. For example, a value of 1 means a minor tick every 1 units in the meter scale. A value of 0 disables micro ticks.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setScale(System.Double,System.Double,System.String[])">
<summary>
Sets the meter to use the given scale with the given text labels and tick positions.
</summary>
<param name="lowerLimit">
The lower limit of the meter scale.
</param>
<param name="upperLimit">
The upper limit of the meter scale.
</param>
<param name="labels">
An array of text strings to be used as the labels on the meter scale.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setScale2(System.Double,System.Double,System.String[])">
<summary>
Sets the meter to use the given scale with the given text labels and tick positions.
</summary>
<param name="lowerLimit">
The lower limit of the meter scale.
</param>
<param name="upperLimit">
The upper limit of the meter scale.
</param>
<param name="labels">
An array of text strings to be used as the labels on the meter scale.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setScale(System.Double,System.Double,System.Double[])">
<summary>
Sets the meter to use the given scale with the given numeric labels and tick positions.
</summary>
<param name="lowerLimit">
The lower limit of the meter scale.
</param>
<param name="upperLimit">
The upper limit of the meter scale.
</param>
<param name="labels">
An array of numbers to be used as the labels on the meter scale.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setScale(System.Double,System.Double,System.Double[],System.String)">
<summary>
Sets the meter to use the given scale with the given numeric labels and tick positions.
</summary>
<param name="lowerLimit">
The lower limit of the meter scale.
</param>
<param name="upperLimit">
The upper limit of the meter scale.
</param>
<param name="labels">
An array of numbers to be used as the labels on the meter scale.
</param>
<param name="formatString">
The format string for formatting the numbers. An empty string means the format will be automatically determined.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setScale3(System.Double,System.Double,System.Double[])">
<summary>
Sets the meter to use the given scale with the given numeric labels and tick positions.
</summary>
<param name="lowerLimit">
The lower limit of the meter scale.
</param>
<param name="upperLimit">
The upper limit of the meter scale.
</param>
<param name="labels">
An array of numbers to be used as the labels on the meter scale.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setScale3(System.Double,System.Double,System.Double[],System.String)">
<summary>
Sets the meter to use the given scale with the given numeric labels and tick positions.
</summary>
<param name="lowerLimit">
The lower limit of the meter scale.
</param>
<param name="upperLimit">
The upper limit of the meter scale.
</param>
<param name="labels">
An array of numbers to be used as the labels on the meter scale.
</param>
<param name="formatString">
The format string for formatting the numbers. An empty string means the format will be automatically determined.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.addColorScale(System.Double[])">
<summary>
Adds a color scale to the meter.
</summary>
<param name="colorStops">
An array of numbers alternating between values and colors. If the number count is even, the array will define a continuous color scale, otherwise it will define a step color scale.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.addColorScale(System.Double[],System.Int32)">
<summary>
Adds a color scale to the meter.
</summary>
<param name="colorStops">
An array of numbers alternating between values and colors. If the number count is even, the array will define a continuous color scale, otherwise it will define a step color scale.
</param>
<param name="startPos">
The position of the starting point of the color scale. For an angular meter, the position refers to the radius, and the default is the meter scale radius (see "AngularMeter.setMeter"). For a linear meter, the position refers to the x or y coordinate depending on whether the meter is vertical or horizontal, and the default is the leftX or topY coordinate of the meter scale (see "LinearMeter.setMeter").
</param>
</member>
<member name="M:ChartDirector.BaseMeter.addColorScale(System.Double[],System.Int32,System.Int32)">
<summary>
Adds a color scale to the meter.
</summary>
<param name="colorStops">
An array of numbers alternating between values and colors. If the number count is even, the array will define a continuous color scale, otherwise it will define a step color scale.
</param>
<param name="startPos">
The position of the starting point of the color scale. For an angular meter, the position refers to the radius, and the default is the meter scale radius (see "AngularMeter.setMeter"). For a linear meter, the position refers to the x or y coordinate depending on whether the meter is vertical or horizontal, and the default is the leftX or topY coordinate of the meter scale (see "LinearMeter.setMeter").
</param>
<param name="startWidth">
The width at the starting point of the color scale. A positive value means the width is in the direction of increasing "position", while a negative value means decreasing "position". Please refer to the description of <b>startPos</b> on the meaning of "position" for various types of meters. The default is the length of the major tick (see "BaseMeter.setTickLength").
</param>
</member>
<member name="M:ChartDirector.BaseMeter.addColorScale(System.Double[],System.Int32,System.Int32,System.Int32)">
<summary>
Adds a color scale to the meter.
</summary>
<param name="colorStops">
An array of numbers alternating between values and colors. If the number count is even, the array will define a continuous color scale, otherwise it will define a step color scale.
</param>
<param name="startPos">
The position of the starting point of the color scale. For an angular meter, the position refers to the radius, and the default is the meter scale radius (see "AngularMeter.setMeter"). For a linear meter, the position refers to the x or y coordinate depending on whether the meter is vertical or horizontal, and the default is the leftX or topY coordinate of the meter scale (see "LinearMeter.setMeter").
</param>
<param name="startWidth">
The width at the starting point of the color scale. A positive value means the width is in the direction of increasing "position", while a negative value means decreasing "position". Please refer to the description of <b>startPos</b> on the meaning of "position" for various types of meters. The default is the length of the major tick (see "BaseMeter.setTickLength").
</param>
<param name="endPos">
The position of the ending point of the color scale. Please refer to the description of <b>startPos</b> above on how the position parameter is interpreted. The default is for the ending position to be equal to the starting position.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.addColorScale(System.Double[],System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a color scale to the meter.
</summary>
<param name="colorStops">
An array of numbers alternating between values and colors. If the number count is even, the array will define a continuous color scale, otherwise it will define a step color scale.
</param>
<param name="startPos">
The position of the starting point of the color scale. For an angular meter, the position refers to the radius, and the default is the meter scale radius (see "AngularMeter.setMeter"). For a linear meter, the position refers to the x or y coordinate depending on whether the meter is vertical or horizontal, and the default is the leftX or topY coordinate of the meter scale (see "LinearMeter.setMeter").
</param>
<param name="startWidth">
The width at the starting point of the color scale. A positive value means the width is in the direction of increasing "position", while a negative value means decreasing "position". Please refer to the description of <b>startPos</b> on the meaning of "position" for various types of meters. The default is the length of the major tick (see "BaseMeter.setTickLength").
</param>
<param name="endPos">
The position of the ending point of the color scale. Please refer to the description of <b>startPos</b> above on how the position parameter is interpreted. The default is for the ending position to be equal to the starting position.
</param>
<param name="endWidth">
The width at the ending point of the color scale. Please refer to the description of <b>startWidth</b> above on how the width parameter is interpreted. The default is for the ending width to be equal to the starting width.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.addColorScale(System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a color scale to the meter.
</summary>
<param name="colorStops">
An array of numbers alternating between values and colors. If the number count is even, the array will define a continuous color scale, otherwise it will define a step color scale.
</param>
<param name="startPos">
The position of the starting point of the color scale. For an angular meter, the position refers to the radius, and the default is the meter scale radius (see "AngularMeter.setMeter"). For a linear meter, the position refers to the x or y coordinate depending on whether the meter is vertical or horizontal, and the default is the leftX or topY coordinate of the meter scale (see "LinearMeter.setMeter").
</param>
<param name="startWidth">
The width at the starting point of the color scale. A positive value means the width is in the direction of increasing "position", while a negative value means decreasing "position". Please refer to the description of <b>startPos</b> on the meaning of "position" for various types of meters. The default is the length of the major tick (see "BaseMeter.setTickLength").
</param>
<param name="endPos">
The position of the ending point of the color scale. Please refer to the description of <b>startPos</b> above on how the position parameter is interpreted. The default is for the ending position to be equal to the starting position.
</param>
<param name="endWidth">
The width at the ending point of the color scale. Please refer to the description of <b>startWidth</b> above on how the width parameter is interpreted. The default is for the ending width to be equal to the starting width.
</param>
<param name="edgeColor">
The edge color of the color scale. The default is to have no edge.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.addPointer(System.Double)">
<summary>
Adds a pointer to the meter.
</summary>
<param name="value">
The value that the pointer points to.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.addPointer(System.Double,System.Int32)">
<summary>
Adds a pointer to the meter.
</summary>
<param name="value">
The value that the pointer points to.
</param>
<param name="fillColor">
The fill color of the pointer.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.addPointer(System.Double,System.Int32,System.Int32)">
<summary>
Adds a pointer to the meter.
</summary>
<param name="value">
The value that the pointer points to.
</param>
<param name="fillColor">
The fill color of the pointer.
</param>
<param name="edgeColor">
The edge color of the pointer. -1 means the edge color is the same as the fill color.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setLabelStyle">
<summary>
Sets the font style used to for the meter labels.
</summary>
</member>
<member name="M:ChartDirector.BaseMeter.setLabelStyle(System.String)">
<summary>
Sets the font style used to for the meter labels.
</summary>
<param name="font">
The font used to draw the labels.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setLabelStyle(System.String,System.Double)">
<summary>
Sets the font style used to for the meter labels.
</summary>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels in points. A value of -1 means the font size is not changed. The default font size is 10 points for angular meters, and 8 points for linear meters.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setLabelStyle(System.String,System.Double,System.Int32)">
<summary>
Sets the font style used to for the meter labels.
</summary>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels in points. A value of -1 means the font size is not changed. The default font size is 10 points for angular meters, and 8 points for linear meters.
</param>
<param name="fontColor">
The color used to draw the labels.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setLabelStyle(System.String,System.Double,System.Int32,System.Double)">
<summary>
Sets the font style used to for the meter labels.
</summary>
<param name="font">
The font used to draw the labels.
</param>
<param name="fontSize">
The font size used to draw the labels in points. A value of -1 means the font size is not changed. The default font size is 10 points for angular meters, and 8 points for linear meters.
</param>
<param name="fontColor">
The color used to draw the labels.
</param>
<param name="fontAngle">
The rotation angle of the labels.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setLabelFormat(System.String)">
<summary>
Sets the format of the labels computed by ChartDirector.
</summary>
<param name="formatString">
The format string.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setLabelPos(System.Boolean)">
<summary>
Sets the positions of the meter scale labels.
</summary>
<param name="labelInside">
A true value means that the labels are on the 'inward' side of the meter scale. A false value means the labels are on the 'outward' side of the meter scale.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setLabelPos(System.Boolean,System.Int32)">
<summary>
Sets the positions of the meter scale labels.
</summary>
<param name="labelInside">
A true value means that the labels are on the 'inward' side of the meter scale. A false value means the labels are on the 'outward' side of the meter scale.
</param>
<param name="labelOffset">
The offset, in pixels, of the labels position relative to the standard position. If the major tick is at the same side as the label, the standard starting position of the label is at the end point of the major tick. Otherwise, the standard starting position is on the meter scale.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setMeterColors(System.Int32)">
<summary>
Sets the colors of the meter scale line, scale label and tick.
</summary>
<param name="axisColor">
The color for drawing the meter scale line. The default is "LineColor".
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setMeterColors(System.Int32,System.Int32)">
<summary>
Sets the colors of the meter scale line, scale label and tick.
</summary>
<param name="axisColor">
The color for drawing the meter scale line. The default is "LineColor".
</param>
<param name="labelColor">
The color for drawing the scale labels. Passing -1 in this argument means the label color is not changed. The default label color is "TextColor".
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setMeterColors(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the colors of the meter scale line, scale label and tick.
</summary>
<param name="axisColor">
The color for drawing the meter scale line. The default is "LineColor".
</param>
<param name="labelColor">
The color for drawing the scale labels. Passing -1 in this argument means the label color is not changed. The default label color is "TextColor".
</param>
<param name="tickColor">
The color for drawing the ticks. Passing -1 in this argument means the tick color is not changed. The default tick color is "LineColor".
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setLineWidth(System.Int32)">
<summary>
Sets the line widths of the scale line and the ticks on the meter.
</summary>
<param name="axisWidth">
The line width for drawing the meter scale line in pixels. For an angular meter, the default is 1 pixel. For a linear meter, the default is 2 pixels.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setLineWidth(System.Int32,System.Int32)">
<summary>
Sets the line widths of the scale line and the ticks on the meter.
</summary>
<param name="axisWidth">
The line width for drawing the meter scale line in pixels. For an angular meter, the default is 1 pixel. For a linear meter, the default is 2 pixels.
</param>
<param name="majorTickWidth">
The line width of the major ticks in pixels. For a linear meter, if this method is not called, the initial major tick width is set to 2 pixels.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setLineWidth(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the line widths of the scale line and the ticks on the meter.
</summary>
<param name="axisWidth">
The line width for drawing the meter scale line in pixels. For an angular meter, the default is 1 pixel. For a linear meter, the default is 2 pixels.
</param>
<param name="majorTickWidth">
The line width of the major ticks in pixels. For a linear meter, if this method is not called, the initial major tick width is set to 2 pixels.
</param>
<param name="minorTickWidth">
The line width of the minor ticks in pixels.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setLineWidth(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the line widths of the scale line and the ticks on the meter.
</summary>
<param name="axisWidth">
The line width for drawing the meter scale line in pixels. For an angular meter, the default is 1 pixel. For a linear meter, the default is 2 pixels.
</param>
<param name="majorTickWidth">
The line width of the major ticks in pixels. For a linear meter, if this method is not called, the initial major tick width is set to 2 pixels.
</param>
<param name="minorTickWidth">
The line width of the minor ticks in pixels.
</param>
<param name="microTickWidth">
The line width of the micro ticks in pixels.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setTickLength(System.Int32)">
<summary>
Set the lengths of the ticks.
</summary>
<param name="majorLen">
The length of the major ticks in pixels. A positive value means the tick is at the 'outward' direction of the meter. A negative value means the tick is at the 'inward' direction.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setTickLength(System.Int32,System.Int32)">
<summary>
Set the lengths of the ticks.
</summary>
<param name="majorLen">
The length of the major ticks in pixels. A positive value means the tick is at the 'outward' direction of the meter. A negative value means the tick is at the 'inward' direction.
</param>
<param name="minorLen">
The length of the minor ticks in pixels. The default is 60% of the length of the major ticks.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.setTickLength(System.Int32,System.Int32,System.Int32)">
<summary>
Set the lengths of the ticks.
</summary>
<param name="majorLen">
The length of the major ticks in pixels. A positive value means the tick is at the 'outward' direction of the meter. A negative value means the tick is at the 'inward' direction.
</param>
<param name="minorLen">
The length of the minor ticks in pixels. The default is 60% of the length of the major ticks.
</param>
<param name="microLen">
The length of the micro ticks in pixels. The default is 50% of the length of the minor ticks.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.addLabel(System.Double,System.String)">
<summary>
Adds a label to a specific position on the meter scale.
</summary>
<param name="pos">
The position to add the label to in meter scale unit.
</param>
<param name="label">
The label to add to the meter scale.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.getLabel(System.Double)">
<summary>
Gets the label at the specified position on the meter scale.
</summary>
<param name="i">
The position specified as a value on the meter scale.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.getCoor(System.Double)">
<summary>
Gets the geometric coordinates given the data value.
</summary>
<param name="v">
The input data value.
</param>
</member>
<member name="M:ChartDirector.BaseMeter.getTicks">
<summary>
Returns the positions of all ticks as values on the meter scale.
</summary>
</member>
<member name="M:ChartDirector.AngularMeter.#ctor(System.Int32,System.Int32)">
<summary>
Creates a new "AngularMeter" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.#ctor(System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "AngularMeter" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "AngularMeter" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
<param name="edgeColor">
The edge color of the chart.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "AngularMeter" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
<param name="edgeColor">
The edge color of the chart.
</param>
<param name="raisedEffect">
The 3D border width. For positive values, the border will appear raised. For negative values, the border will appear depressed. A zero value means the border will appear flat.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.setMeter(System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
<summary>
Sets the position and angle range of the meter.
</summary>
<param name="cx">
The x-coordinate of the center of the meter.
</param>
<param name="cy">
The y-coordinate of the center of the meter.
</param>
<param name="radius">
The radius of the meter.
</param>
<param name="startAngle">
The start angle of the meter. The angle is measured in degrees clockwise, with 0 being the upward pointing direction.
</param>
<param name="endAngle">
The end angle of the meter. The angle is measured in degrees clockwise, with 0 being the upward pointing direction.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addScaleBackground(System.Int32,System.Int32)">
<summary>
Adds a background to the meter scale.
</summary>
<param name="bgRadius">
The radius of the circle segment to be used as the scale background.
</param>
<param name="fillColor">
The fill color of the circle segment (the background color).
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addScaleBackground(System.Int32,System.Int32,System.Int32)">
<summary>
Adds a background to the meter scale.
</summary>
<param name="bgRadius">
The radius of the circle segment to be used as the scale background.
</param>
<param name="fillColor">
The fill color of the circle segment (the background color).
</param>
<param name="edgeWidth">
The edge width of the circle segment. A positive width means the edge is internal to the circle segment. A negative width means the edge is external to the circle segment.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addScaleBackground(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a background to the meter scale.
</summary>
<param name="bgRadius">
The radius of the circle segment to be used as the scale background.
</param>
<param name="fillColor">
The fill color of the circle segment (the background color).
</param>
<param name="edgeWidth">
The edge width of the circle segment. A positive width means the edge is internal to the circle segment. A negative width means the edge is external to the circle segment.
</param>
<param name="edgeColor">
The edge color. The default value of -1 means the edge color is the same as the fill color.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addScaleBackground(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a background to the meter scale.
</summary>
<param name="bgRadius">
The radius of the circle segment to be used as the scale background.
</param>
<param name="fillColor">
The fill color of the circle segment (the background color).
</param>
<param name="edgeWidth">
The edge width of the circle segment. A positive width means the edge is internal to the circle segment. A negative width means the edge is external to the circle segment.
</param>
<param name="edgeColor">
The edge color. The default value of -1 means the edge color is the same as the fill color.
</param>
<param name="scaleRadius">
The radius of the meter scale. ChartDirector uses this value to compute the extra angular span the circle segment must have in order to maintain proper margin at the chord side. This argument is usually not necessary as ChartDirector already know the scale radius from the meter configuration. This argument can be used if you would like to use a "fake" scale radius to draw the scale background for special effects.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addScaleBackground(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
<summary>
Adds a background to the meter scale.
</summary>
<param name="bgRadius">
The radius of the circle segment to be used as the scale background.
</param>
<param name="fillColor">
The fill color of the circle segment (the background color).
</param>
<param name="edgeWidth">
The edge width of the circle segment. A positive width means the edge is internal to the circle segment. A negative width means the edge is external to the circle segment.
</param>
<param name="edgeColor">
The edge color. The default value of -1 means the edge color is the same as the fill color.
</param>
<param name="scaleRadius">
The radius of the meter scale. ChartDirector uses this value to compute the extra angular span the circle segment must have in order to maintain proper margin at the chord side. This argument is usually not necessary as ChartDirector already know the scale radius from the meter configuration. This argument can be used if you would like to use a "fake" scale radius to draw the scale background for special effects.
</param>
<param name="startAngle">
The start angle of the meter scale. ChartDirector uses this value to compute start angle of the circle segment. This argument is usually not necessary as ChartDirector already know the start angle from the meter configuration. This argument can be used if you would like to use a "fake" angle to draw the scale background for special effects.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addScaleBackground(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
<summary>
Adds a background to the meter scale.
</summary>
<param name="bgRadius">
The radius of the circle segment to be used as the scale background.
</param>
<param name="fillColor">
The fill color of the circle segment (the background color).
</param>
<param name="edgeWidth">
The edge width of the circle segment. A positive width means the edge is internal to the circle segment. A negative width means the edge is external to the circle segment.
</param>
<param name="edgeColor">
The edge color. The default value of -1 means the edge color is the same as the fill color.
</param>
<param name="scaleRadius">
The radius of the meter scale. ChartDirector uses this value to compute the extra angular span the circle segment must have in order to maintain proper margin at the chord side. This argument is usually not necessary as ChartDirector already know the scale radius from the meter configuration. This argument can be used if you would like to use a "fake" scale radius to draw the scale background for special effects.
</param>
<param name="startAngle">
The start angle of the meter scale. ChartDirector uses this value to compute start angle of the circle segment. This argument is usually not necessary as ChartDirector already know the start angle from the meter configuration. This argument can be used if you would like to use a "fake" angle to draw the scale background for special effects.
</param>
<param name="endAngle">
The end angle of the meter scale. ChartDirector uses this value to compute end angle of the circle segment. This argument is usually not necessary as ChartDirector already know the end angle from the meter configuration. This argument can be used if you would like to use a "fake" angle to draw the scale background for special effects.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addGlare">
<summary>
Adds glare effect to the meter.
</summary>
</member>
<member name="M:ChartDirector.AngularMeter.addGlare(System.Double)">
<summary>
Adds glare effect to the meter.
</summary>
<param name="radius">
The radius of the face of the meter. The default is the meter scale radius as set by "AngularMeter.setMeter".
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addGlare(System.Double,System.Double)">
<summary>
Adds glare effect to the meter.
</summary>
<param name="radius">
The radius of the face of the meter. The default is the meter scale radius as set by "AngularMeter.setMeter".
</param>
<param name="span">
The angular span of the arc that divides the face into two parts. The dividing arc intersects with the face border at two points. The angular span is defined as center angle of these two points (that is, the angle subtended at the meter center by these two points).
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addGlare(System.Double,System.Double,System.Double)">
<summary>
Adds glare effect to the meter.
</summary>
<param name="radius">
The radius of the face of the meter. The default is the meter scale radius as set by "AngularMeter.setMeter".
</param>
<param name="span">
The angular span of the arc that divides the face into two parts. The dividing arc intersects with the face border at two points. The angular span is defined as center angle of these two points (that is, the angle subtended at the meter center by these two points).
</param>
<param name="rotate">
By default, the glare will be symmetrically with respect to the vertical axis. This argument can be used to rotate the glare clockwise in degrees.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addGlare(System.Double,System.Double,System.Double,System.Double)">
<summary>
Adds glare effect to the meter.
</summary>
<param name="radius">
The radius of the face of the meter. The default is the meter scale radius as set by "AngularMeter.setMeter".
</param>
<param name="span">
The angular span of the arc that divides the face into two parts. The dividing arc intersects with the face border at two points. The angular span is defined as center angle of these two points (that is, the angle subtended at the meter center by these two points).
</param>
<param name="rotate">
By default, the glare will be symmetrically with respect to the vertical axis. This argument can be used to rotate the glare clockwise in degrees.
</param>
<param name="glareRadius">
The radius of the arc that divides the face into two parts. A positive value means the arc will result in a convex glare, while a negative means concave glare. The default is equal to 1.5 times of the face radius.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addGlare(System.Double,System.Double,System.Double,System.Double,System.Double)">
<summary>
Adds glare effect to the meter.
</summary>
<param name="radius">
The radius of the face of the meter. The default is the meter scale radius as set by "AngularMeter.setMeter".
</param>
<param name="span">
The angular span of the arc that divides the face into two parts. The dividing arc intersects with the face border at two points. The angular span is defined as center angle of these two points (that is, the angle subtended at the meter center by these two points).
</param>
<param name="rotate">
By default, the glare will be symmetrically with respect to the vertical axis. This argument can be used to rotate the glare clockwise in degrees.
</param>
<param name="glareRadius">
The radius of the arc that divides the face into two parts. A positive value means the arc will result in a convex glare, while a negative means concave glare. The default is equal to 1.5 times of the face radius.
</param>
<param name="intensity">
The intensity of the glare, which must be from 0 to 1. A value of 0 means no glare, while a value of 1 means the glare will be 100% white.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addZone(System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a colored zone to the meter.
</summary>
<param name="startValue">
The data value that marks the start position of the zone.
</param>
<param name="endValue">
The data value that marks the end position of the zone.
</param>
<param name="startRadius">
The starting radius of the zone in pixels.
</param>
<param name="endRadius">
The ending radius of the zone in pixels.
</param>
<param name="fillColor">
The fill color of the zone.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addZone(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a colored zone to the meter.
</summary>
<param name="startValue">
The data value that marks the start position of the zone.
</param>
<param name="endValue">
The data value that marks the end position of the zone.
</param>
<param name="startRadius">
The starting radius of the zone in pixels.
</param>
<param name="endRadius">
The ending radius of the zone in pixels.
</param>
<param name="fillColor">
The fill color of the zone.
</param>
<param name="edgeColor">
The edge color of the zone. The default is the same as the fill color.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addZone(System.Double,System.Double,System.Int32)">
<summary>
Adds a colored zone to the meter.
</summary>
<param name="startValue">
The data value that marks the start position of the zone.
</param>
<param name="endValue">
The data value that marks the end position of the zone.
</param>
<param name="fillColor">
The fill color of the zone.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addZone(System.Double,System.Double,System.Int32,System.Int32)">
<summary>
Adds a colored zone to the meter.
</summary>
<param name="startValue">
The data value that marks the start position of the zone.
</param>
<param name="endValue">
The data value that marks the end position of the zone.
</param>
<param name="fillColor">
The fill color of the zone.
</param>
<param name="edgeColor">
The edge color of the zone. The default is the same as the fill color.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addZone2(System.Double,System.Double,System.Int32)">
<summary>
Adds a colored zone to the meter.
</summary>
<param name="startValue">
The data value that marks the start position of the zone.
</param>
<param name="endValue">
The data value that marks the end position of the zone.
</param>
<param name="fillColor">
The fill color of the zone.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addZone2(System.Double,System.Double,System.Int32,System.Int32)">
<summary>
Adds a colored zone to the meter.
</summary>
<param name="startValue">
The data value that marks the start position of the zone.
</param>
<param name="endValue">
The data value that marks the end position of the zone.
</param>
<param name="fillColor">
The fill color of the zone.
</param>
<param name="edgeColor">
The edge color of the zone. The default is the same as the fill color.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addRing(System.Int32,System.Int32,System.Int32)">
<summary>
Adds a circular ring or a circle to the meter.
</summary>
<param name="startRadius">
The starting radius of the ring in pixels. To add a circle, set the start radius to 0.
</param>
<param name="endRadius">
The ending radius of the ring in pixels.
</param>
<param name="fillColor">
The fill color of the ring.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addRing(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a circular ring or a circle to the meter.
</summary>
<param name="startRadius">
The starting radius of the ring in pixels. To add a circle, set the start radius to 0.
</param>
<param name="endRadius">
The ending radius of the ring in pixels.
</param>
<param name="fillColor">
The fill color of the ring.
</param>
<param name="edgeColor">
The edge color of the ring. The default is the same as the fill color.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addRingSector(System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
<summary>
Adds a ring sector or a sector to the meter.
</summary>
<param name="startRadius">
The starting radius of the ring sector in pixels. To add a sector, set the starting radius to 0.
</param>
<param name="endRadius">
The ending radius of the ring sector in pixels.
</param>
<param name="a1">
The starting angle of the ring sector in degrees. The angle is measured in degrees clockwise, with 0 being the upward pointing direction.
</param>
<param name="a2">
The ending angle of the ring sector in degrees. The angle is measured in degrees clockwise, with 0 being the upward pointing direction.
</param>
<param name="fillColor">
The fill color of the ring sector.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addRingSector(System.Int32,System.Int32,System.Double,System.Double,System.Int32,System.Int32)">
<summary>
Adds a ring sector or a sector to the meter.
</summary>
<param name="startRadius">
The starting radius of the ring sector in pixels. To add a sector, set the starting radius to 0.
</param>
<param name="endRadius">
The ending radius of the ring sector in pixels.
</param>
<param name="a1">
The starting angle of the ring sector in degrees. The angle is measured in degrees clockwise, with 0 being the upward pointing direction.
</param>
<param name="a2">
The ending angle of the ring sector in degrees. The angle is measured in degrees clockwise, with 0 being the upward pointing direction.
</param>
<param name="fillColor">
The fill color of the ring sector.
</param>
<param name="edgeColor">
The edge color of the ring sector. The default is the same as the fill color.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addPointer(System.Double,System.Int32)">
<summary>
Adds a new style pointer to the meter.
</summary>
<param name="value">
The value that the pointer points to.
</param>
<param name="fillColor">
The fill color of the pointer.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addPointer(System.Double,System.Int32,System.Int32)">
<summary>
Adds a new style pointer to the meter.
</summary>
<param name="value">
The value that the pointer points to.
</param>
<param name="fillColor">
The fill color of the pointer.
</param>
<param name="edgeColor">
The edge color of the pointer. -1 means the edge color is the same as the fill color.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addPointer(System.Double,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a new style pointer to the meter.
</summary>
<param name="value">
The value that the pointer points to.
</param>
<param name="fillColor">
The fill color of the pointer.
</param>
<param name="edgeColor">
The edge color of the pointer. -1 means the edge color is the same as the fill color.
</param>
<param name="pointerType">
The pointer shape. Please refer to "MeterPointer.setShapeAndOffset" for the available shapes.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addPointer(System.Double,System.Int32,System.Int32,System.Int32,System.Double)">
<summary>
Adds a new style pointer to the meter.
</summary>
<param name="value">
The value that the pointer points to.
</param>
<param name="fillColor">
The fill color of the pointer.
</param>
<param name="edgeColor">
The edge color of the pointer. -1 means the edge color is the same as the fill color.
</param>
<param name="pointerType">
The pointer shape. Please refer to "MeterPointer.setShapeAndOffset" for the available shapes.
</param>
<param name="startOffset">
The distance between the starting point of the pointer with the meter center, expressed as a ratio to the scale radius. NoValue means the radius is automatically determined. Please refer to "MeterPointer.setShapeAndOffset" for more information about this argument.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addPointer(System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
<summary>
Adds a new style pointer to the meter.
</summary>
<param name="value">
The value that the pointer points to.
</param>
<param name="fillColor">
The fill color of the pointer.
</param>
<param name="edgeColor">
The edge color of the pointer. -1 means the edge color is the same as the fill color.
</param>
<param name="pointerType">
The pointer shape. Please refer to "MeterPointer.setShapeAndOffset" for the available shapes.
</param>
<param name="startOffset">
The distance between the starting point of the pointer with the meter center, expressed as a ratio to the scale radius. NoValue means the radius is automatically determined. Please refer to "MeterPointer.setShapeAndOffset" for more information about this argument.
</param>
<param name="endOffset">
The distance between the ending point of the pointer with the meter center, expressed as a ratio to the scale radius. NoValue means the radius is automatically determined. Please refer to "MeterPointer.setShapeAndOffset" for more information about this argument.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addPointer(System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double)">
<summary>
Adds a new style pointer to the meter.
</summary>
<param name="value">
The value that the pointer points to.
</param>
<param name="fillColor">
The fill color of the pointer.
</param>
<param name="edgeColor">
The edge color of the pointer. -1 means the edge color is the same as the fill color.
</param>
<param name="pointerType">
The pointer shape. Please refer to "MeterPointer.setShapeAndOffset" for the available shapes.
</param>
<param name="startOffset">
The distance between the starting point of the pointer with the meter center, expressed as a ratio to the scale radius. NoValue means the radius is automatically determined. Please refer to "MeterPointer.setShapeAndOffset" for more information about this argument.
</param>
<param name="endOffset">
The distance between the ending point of the pointer with the meter center, expressed as a ratio to the scale radius. NoValue means the radius is automatically determined. Please refer to "MeterPointer.setShapeAndOffset" for more information about this argument.
</param>
<param name="widthRatio">
The width of the pointer relative to the default width. NoValue means the width is automatically determined.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addPointer2(System.Double,System.Int32)">
<summary>
Adds a new style pointer to the meter.
</summary>
<param name="value">
The value that the pointer points to.
</param>
<param name="fillColor">
The fill color of the pointer.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addPointer2(System.Double,System.Int32,System.Int32)">
<summary>
Adds a new style pointer to the meter.
</summary>
<param name="value">
The value that the pointer points to.
</param>
<param name="fillColor">
The fill color of the pointer.
</param>
<param name="edgeColor">
The edge color of the pointer. -1 means the edge color is the same as the fill color.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addPointer2(System.Double,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a new style pointer to the meter.
</summary>
<param name="value">
The value that the pointer points to.
</param>
<param name="fillColor">
The fill color of the pointer.
</param>
<param name="edgeColor">
The edge color of the pointer. -1 means the edge color is the same as the fill color.
</param>
<param name="pointerType">
The pointer shape. Please refer to "MeterPointer.setShapeAndOffset" for the available shapes.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addPointer2(System.Double,System.Int32,System.Int32,System.Int32,System.Double)">
<summary>
Adds a new style pointer to the meter.
</summary>
<param name="value">
The value that the pointer points to.
</param>
<param name="fillColor">
The fill color of the pointer.
</param>
<param name="edgeColor">
The edge color of the pointer. -1 means the edge color is the same as the fill color.
</param>
<param name="pointerType">
The pointer shape. Please refer to "MeterPointer.setShapeAndOffset" for the available shapes.
</param>
<param name="startOffset">
The distance between the starting point of the pointer with the meter center, expressed as a ratio to the scale radius. NoValue means the radius is automatically determined. Please refer to "MeterPointer.setShapeAndOffset" for more information about this argument.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addPointer2(System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
<summary>
Adds a new style pointer to the meter.
</summary>
<param name="value">
The value that the pointer points to.
</param>
<param name="fillColor">
The fill color of the pointer.
</param>
<param name="edgeColor">
The edge color of the pointer. -1 means the edge color is the same as the fill color.
</param>
<param name="pointerType">
The pointer shape. Please refer to "MeterPointer.setShapeAndOffset" for the available shapes.
</param>
<param name="startOffset">
The distance between the starting point of the pointer with the meter center, expressed as a ratio to the scale radius. NoValue means the radius is automatically determined. Please refer to "MeterPointer.setShapeAndOffset" for more information about this argument.
</param>
<param name="endOffset">
The distance between the ending point of the pointer with the meter center, expressed as a ratio to the scale radius. NoValue means the radius is automatically determined. Please refer to "MeterPointer.setShapeAndOffset" for more information about this argument.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.addPointer2(System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double)">
<summary>
Adds a new style pointer to the meter.
</summary>
<param name="value">
The value that the pointer points to.
</param>
<param name="fillColor">
The fill color of the pointer.
</param>
<param name="edgeColor">
The edge color of the pointer. -1 means the edge color is the same as the fill color.
</param>
<param name="pointerType">
The pointer shape. Please refer to "MeterPointer.setShapeAndOffset" for the available shapes.
</param>
<param name="startOffset">
The distance between the starting point of the pointer with the meter center, expressed as a ratio to the scale radius. NoValue means the radius is automatically determined. Please refer to "MeterPointer.setShapeAndOffset" for more information about this argument.
</param>
<param name="endOffset">
The distance between the ending point of the pointer with the meter center, expressed as a ratio to the scale radius. NoValue means the radius is automatically determined. Please refer to "MeterPointer.setShapeAndOffset" for more information about this argument.
</param>
<param name="widthRatio">
The width of the pointer relative to the default width. NoValue means the width is automatically determined.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.setCap(System.Int32,System.Int32)">
<summary>
Sets the radius and color of a classical pointer cap.
</summary>
<param name="radius">
The radius of pointer cap circle in pixels.
</param>
<param name="fillColor">
The fill color of the pointer cap circle.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.setCap(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the radius and color of a classical pointer cap.
</summary>
<param name="radius">
The radius of pointer cap circle in pixels.
</param>
<param name="fillColor">
The fill color of the pointer cap circle.
</param>
<param name="edgeColor">
The edge color of the pointer cap circle.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.setCap">
<summary>
Configures the meter to use new style pointer cap.
</summary>
</member>
<member name="M:ChartDirector.AngularMeter.setCap(System.Int32)">
<summary>
Configures the meter to use new style pointer cap.
</summary>
<param name="backColor">
The fill color of the back circle.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.setCap(System.Int32,System.Int32,System.Int32,System.Double)">
<summary>
Configures the meter to use new style pointer cap.
</summary>
<param name="backColor">
The fill color of the back circle.
</param>
<param name="frontColor">
The fill color of the front circle.
</param>
<param name="frontEdgeColor">
The edge color of the front circle.
</param>
<param name="lightingRatio">
By default, lighting effect is applied to the back circle and the edge of the front circle, such that the bottom-right side will appear to be darkened. This argument configures how bright the bottom-right side is. The default value is 0.2, which means the bottom-right side is 20% as bright as the top-left side. Setting this argument to 1 disables the lighting effect.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.setCap(System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
<summary>
Configures the meter to use new style pointer cap.
</summary>
<param name="backColor">
The fill color of the back circle.
</param>
<param name="frontColor">
The fill color of the front circle.
</param>
<param name="frontEdgeColor">
The edge color of the front circle.
</param>
<param name="lightingRatio">
By default, lighting effect is applied to the back circle and the edge of the front circle, such that the bottom-right side will appear to be darkened. This argument configures how bright the bottom-right side is. The default value is 0.2, which means the bottom-right side is 20% as bright as the top-left side. Setting this argument to 1 disables the lighting effect.
</param>
<param name="backRadiusRatio">
The radius of the back circle, expressed as a ratio to the meter scale radius (set with "AngularMeter.setMeter"). The default is 0.15.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.setCap(System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double)">
<summary>
Configures the meter to use new style pointer cap.
</summary>
<param name="backColor">
The fill color of the back circle.
</param>
<param name="frontColor">
The fill color of the front circle.
</param>
<param name="frontEdgeColor">
The edge color of the front circle.
</param>
<param name="lightingRatio">
By default, lighting effect is applied to the back circle and the edge of the front circle, such that the bottom-right side will appear to be darkened. This argument configures how bright the bottom-right side is. The default value is 0.2, which means the bottom-right side is 20% as bright as the top-left side. Setting this argument to 1 disables the lighting effect.
</param>
<param name="backRadiusRatio">
The radius of the back circle, expressed as a ratio to the meter scale radius (set with "AngularMeter.setMeter"). The default is 0.15.
</param>
<param name="frontRadiusRatio">
The radius of the front circle, expressed as a ratio to the meter scale radius (set with "AngularMeter.setMeter"). The default is 0.11.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.setCap(System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
<summary>
Configures the meter to use new style pointer cap.
</summary>
<param name="backColor">
The fill color of the back circle.
</param>
<param name="frontColor">
The fill color of the front circle.
</param>
<param name="frontEdgeColor">
The edge color of the front circle.
</param>
<param name="lightingRatio">
By default, lighting effect is applied to the back circle and the edge of the front circle, such that the bottom-right side will appear to be darkened. This argument configures how bright the bottom-right side is. The default value is 0.2, which means the bottom-right side is 20% as bright as the top-left side. Setting this argument to 1 disables the lighting effect.
</param>
<param name="backRadiusRatio">
The radius of the back circle, expressed as a ratio to the meter scale radius (set with "AngularMeter.setMeter"). The default is 0.15.
</param>
<param name="frontRadiusRatio">
The radius of the front circle, expressed as a ratio to the meter scale radius (set with "AngularMeter.setMeter"). The default is 0.11.
</param>
<param name="frontEdgeWidthRatio">
The edge width of the front circle, expressed as a ratio to the meter scale radius (set with "AngularMeter.setMeter"). The default is 0.01.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.setCap2">
<summary>
Configures the meter to use new style pointer cap.
</summary>
</member>
<member name="M:ChartDirector.AngularMeter.setCap2(System.Int32)">
<summary>
Configures the meter to use new style pointer cap.
</summary>
<param name="backColor">
The fill color of the back circle.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.setCap2(System.Int32,System.Int32)">
<summary>
Configures the meter to use new style pointer cap.
</summary>
<param name="backColor">
The fill color of the back circle.
</param>
<param name="frontColor">
The fill color of the front circle.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.setCap2(System.Int32,System.Int32,System.Int32)">
<summary>
Configures the meter to use new style pointer cap.
</summary>
<param name="backColor">
The fill color of the back circle.
</param>
<param name="frontColor">
The fill color of the front circle.
</param>
<param name="frontEdgeColor">
The edge color of the front circle.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.setCap2(System.Int32,System.Int32,System.Int32,System.Double)">
<summary>
Configures the meter to use new style pointer cap.
</summary>
<param name="backColor">
The fill color of the back circle.
</param>
<param name="frontColor">
The fill color of the front circle.
</param>
<param name="frontEdgeColor">
The edge color of the front circle.
</param>
<param name="lightingRatio">
By default, lighting effect is applied to the back circle and the edge of the front circle, such that the bottom-right side will appear to be darkened. This argument configures how bright the bottom-right side is. The default value is 0.2, which means the bottom-right side is 20% as bright as the top-left side. Setting this argument to 1 disables the lighting effect.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.setCap2(System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
<summary>
Configures the meter to use new style pointer cap.
</summary>
<param name="backColor">
The fill color of the back circle.
</param>
<param name="frontColor">
The fill color of the front circle.
</param>
<param name="frontEdgeColor">
The edge color of the front circle.
</param>
<param name="lightingRatio">
By default, lighting effect is applied to the back circle and the edge of the front circle, such that the bottom-right side will appear to be darkened. This argument configures how bright the bottom-right side is. The default value is 0.2, which means the bottom-right side is 20% as bright as the top-left side. Setting this argument to 1 disables the lighting effect.
</param>
<param name="backRadiusRatio">
The radius of the back circle, expressed as a ratio to the meter scale radius (set with "AngularMeter.setMeter"). The default is 0.15.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.setCap2(System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double)">
<summary>
Configures the meter to use new style pointer cap.
</summary>
<param name="backColor">
The fill color of the back circle.
</param>
<param name="frontColor">
The fill color of the front circle.
</param>
<param name="frontEdgeColor">
The edge color of the front circle.
</param>
<param name="lightingRatio">
By default, lighting effect is applied to the back circle and the edge of the front circle, such that the bottom-right side will appear to be darkened. This argument configures how bright the bottom-right side is. The default value is 0.2, which means the bottom-right side is 20% as bright as the top-left side. Setting this argument to 1 disables the lighting effect.
</param>
<param name="backRadiusRatio">
The radius of the back circle, expressed as a ratio to the meter scale radius (set with "AngularMeter.setMeter"). The default is 0.15.
</param>
<param name="frontRadiusRatio">
The radius of the front circle, expressed as a ratio to the meter scale radius (set with "AngularMeter.setMeter"). The default is 0.11.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.setCap2(System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
<summary>
Configures the meter to use new style pointer cap.
</summary>
<param name="backColor">
The fill color of the back circle.
</param>
<param name="frontColor">
The fill color of the front circle.
</param>
<param name="frontEdgeColor">
The edge color of the front circle.
</param>
<param name="lightingRatio">
By default, lighting effect is applied to the back circle and the edge of the front circle, such that the bottom-right side will appear to be darkened. This argument configures how bright the bottom-right side is. The default value is 0.2, which means the bottom-right side is 20% as bright as the top-left side. Setting this argument to 1 disables the lighting effect.
</param>
<param name="backRadiusRatio">
The radius of the back circle, expressed as a ratio to the meter scale radius (set with "AngularMeter.setMeter"). The default is 0.15.
</param>
<param name="frontRadiusRatio">
The radius of the front circle, expressed as a ratio to the meter scale radius (set with "AngularMeter.setMeter"). The default is 0.11.
</param>
<param name="frontEdgeWidthRatio">
The edge width of the front circle, expressed as a ratio to the meter scale radius (set with "AngularMeter.setMeter"). The default is 0.01.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.relativeRadialGradient(System.Double[])">
<summary>
Creates a radial gradient color relative to the meter center and radius.
</summary>
<param name="gradient">
An numeric array defining the color stops. Please refer to the description above for details.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.relativeRadialGradient(System.Double[],System.Double)">
<summary>
Creates a radial gradient color relative to the meter center and radius.
</summary>
<param name="gradient">
An numeric array defining the color stops. Please refer to the description above for details.
</param>
<param name="radius">
The reference radius of the radial gradient. The default is the meter scale radius (set by "AngularMeter.setMeter").
</param>
</member>
<member name="M:ChartDirector.AngularMeter.relativeLinearGradient(System.Double[])">
<summary>
Creates a linear gradient color relative to the meter center and radius.
</summary>
<param name="gradient">
An numeric array defining the color stops. Please refer to the description above for details.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.relativeLinearGradient(System.Double[],System.Double)">
<summary>
Creates a linear gradient color relative to the meter center and radius.
</summary>
<param name="gradient">
An numeric array defining the color stops. Please refer to the description above for details.
</param>
<param name="angle">
The direction of the linear gradient line. It is specified as a clockwise angle in degrees, with 0 being the upward pointing direction.
</param>
</member>
<member name="M:ChartDirector.AngularMeter.relativeLinearGradient(System.Double[],System.Double,System.Double)">
<summary>
Creates a linear gradient color relative to the meter center and radius.
</summary>
<param name="gradient">
An numeric array defining the color stops. Please refer to the description above for details.
</param>
<param name="angle">
The direction of the linear gradient line. It is specified as a clockwise angle in degrees, with 0 being the upward pointing direction.
</param>
<param name="radius">
The reference radius to define the relative distance. The default is the meter scale radius (set by "AngularMeter.setMeter").
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setPos(System.Double)">
<summary>
Sets the value the pointer points to on the meter scale.
</summary>
<param name="value">
The value the pointer points to.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setColor(System.Int32)">
<summary>
Sets the fill and border colors of the meter pointer.
</summary>
<param name="fillColor">
The fill color of the meter pointer.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setColor(System.Int32,System.Int32)">
<summary>
Sets the fill and border colors of the meter pointer.
</summary>
<param name="fillColor">
The fill color of the meter pointer.
</param>
<param name="edgeColor">
The border color of the meter pointer. -1 means it is the same as the fill color.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setShape(System.Int32)">
<summary>
Sets the shape of the meter pointer to one of the built-in shapes.
</summary>
<param name="pointerType">
One of the predefined pointer shape constants to specify the pointer shape to use.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setShape(System.Int32,System.Double)">
<summary>
Sets the shape of the meter pointer to one of the built-in shapes.
</summary>
<param name="pointerType">
One of the predefined pointer shape constants to specify the pointer shape to use.
</param>
<param name="lengthRatio">
The length ratio to be applied to the pointer. NoValue means the lengthRatio is not modified. The default is 1.0 for angular meters and 0.75 for linear meters.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setShape(System.Int32,System.Double,System.Double)">
<summary>
Sets the shape of the meter pointer to one of the built-in shapes.
</summary>
<param name="pointerType">
One of the predefined pointer shape constants to specify the pointer shape to use.
</param>
<param name="lengthRatio">
The length ratio to be applied to the pointer. NoValue means the lengthRatio is not modified. The default is 1.0 for angular meters and 0.75 for linear meters.
</param>
<param name="widthRatio">
The width ratio to be applied to the pointer. NoValue means the widthRatio is not modified. The default is 1.0.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setShape(System.Int32[])">
<summary>
Sets the shape of the meter pointer to a custom polygon.
</summary>
<param name="pointerCoor">
An array of numbers x0, y0, x1, y1, x2, y2, ..., representing the coordinates the polygon vertices.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setShape(System.Int32[],System.Double)">
<summary>
Sets the shape of the meter pointer to a custom polygon.
</summary>
<param name="pointerCoor">
An array of numbers x0, y0, x1, y1, x2, y2, ..., representing the coordinates the polygon vertices.
</param>
<param name="lengthRatio">
The length ratio to be applied to the pointer. NoValue means the lengthRatio is not modified. The default is 1.0 for angular meters and 0.75 for linear meters.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setShape(System.Int32[],System.Double,System.Double)">
<summary>
Sets the shape of the meter pointer to a custom polygon.
</summary>
<param name="pointerCoor">
An array of numbers x0, y0, x1, y1, x2, y2, ..., representing the coordinates the polygon vertices.
</param>
<param name="lengthRatio">
The length ratio to be applied to the pointer. NoValue means the lengthRatio is not modified. The default is 1.0 for angular meters and 0.75 for linear meters.
</param>
<param name="widthRatio">
The width ratio to be applied to the pointer. NoValue means the widthRatio is not modified. The default is 1.0.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setShape2(System.Int32[])">
<summary>
Sets the shape of the meter pointer to a custom polygon.
</summary>
<param name="pointerCoor">
An array of numbers x0, y0, x1, y1, x2, y2, ..., representing the coordinates the polygon vertices.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setShape2(System.Int32[],System.Double)">
<summary>
Sets the shape of the meter pointer to a custom polygon.
</summary>
<param name="pointerCoor">
An array of numbers x0, y0, x1, y1, x2, y2, ..., representing the coordinates the polygon vertices.
</param>
<param name="lengthRatio">
The length ratio to be applied to the pointer. NoValue means the lengthRatio is not modified. The default is 1.0 for angular meters and 0.75 for linear meters.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setShape2(System.Int32[],System.Double,System.Double)">
<summary>
Sets the shape of the meter pointer to a custom polygon.
</summary>
<param name="pointerCoor">
An array of numbers x0, y0, x1, y1, x2, y2, ..., representing the coordinates the polygon vertices.
</param>
<param name="lengthRatio">
The length ratio to be applied to the pointer. NoValue means the lengthRatio is not modified. The default is 1.0 for angular meters and 0.75 for linear meters.
</param>
<param name="widthRatio">
The width ratio to be applied to the pointer. NoValue means the widthRatio is not modified. The default is 1.0.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setShapeAndOffset(System.Int32)">
<summary>
Sets the shape of new style angular meter pointers.
</summary>
<param name="pointerType">
Should be "TriangularPointer2" for new style triangular pointer, and "LinePointer2" for new style line pointer.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setShapeAndOffset(System.Int32,System.Double)">
<summary>
Sets the shape of new style angular meter pointers.
</summary>
<param name="pointerType">
Should be "TriangularPointer2" for new style triangular pointer, and "LinePointer2" for new style line pointer.
</param>
<param name="startOffset">
The radius the pointer starts at, expressed as a ratio to the scale radius. NoValue means the radius is automatically determined.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setShapeAndOffset(System.Int32,System.Double,System.Double)">
<summary>
Sets the shape of new style angular meter pointers.
</summary>
<param name="pointerType">
Should be "TriangularPointer2" for new style triangular pointer, and "LinePointer2" for new style line pointer.
</param>
<param name="startOffset">
The radius the pointer starts at, expressed as a ratio to the scale radius. NoValue means the radius is automatically determined.
</param>
<param name="endOffset">
he radius the pointer ends at, expressed as a ratio to the scale radius. NoValue means the radius is automatically determined.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setShapeAndOffset(System.Int32,System.Double,System.Double,System.Double)">
<summary>
Sets the shape of new style angular meter pointers.
</summary>
<param name="pointerType">
Should be "TriangularPointer2" for new style triangular pointer, and "LinePointer2" for new style line pointer.
</param>
<param name="startOffset">
The radius the pointer starts at, expressed as a ratio to the scale radius. NoValue means the radius is automatically determined.
</param>
<param name="endOffset">
he radius the pointer ends at, expressed as a ratio to the scale radius. NoValue means the radius is automatically determined.
</param>
<param name="widthRatio">
The width of the pointer relative to the default width. NoValue means the width is automatically determined.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setShapeAndOffset(System.Int32[])">
<summary>
Sets the shape of new style angular meter pointers to a custom polygon.
</summary>
<param name="pointerCoor">
An array of numbers x0, y0, x1, y1, x2, y2, ..., representing the coordinates the polygon vertices.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setShapeAndOffset(System.Int32[],System.Double)">
<summary>
Sets the shape of new style angular meter pointers to a custom polygon.
</summary>
<param name="pointerCoor">
An array of numbers x0, y0, x1, y1, x2, y2, ..., representing the coordinates the polygon vertices.
</param>
<param name="startOffset">
The position of the starting point as a ratio to the scale radius. NoValue means the position is automatically determined.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setShapeAndOffset(System.Int32[],System.Double,System.Double)">
<summary>
Sets the shape of new style angular meter pointers to a custom polygon.
</summary>
<param name="pointerCoor">
An array of numbers x0, y0, x1, y1, x2, y2, ..., representing the coordinates the polygon vertices.
</param>
<param name="startOffset">
The position of the starting point as a ratio to the scale radius. NoValue means the position is automatically determined.
</param>
<param name="endOffset">
The position of the ending point as a ratio to the scale radius. NoValue means the position is automatically determined.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setShapeAndOffset(System.Int32[],System.Double,System.Double,System.Double)">
<summary>
Sets the shape of new style angular meter pointers to a custom polygon.
</summary>
<param name="pointerCoor">
An array of numbers x0, y0, x1, y1, x2, y2, ..., representing the coordinates the polygon vertices.
</param>
<param name="startOffset">
The position of the starting point as a ratio to the scale radius. NoValue means the position is automatically determined.
</param>
<param name="endOffset">
The position of the ending point as a ratio to the scale radius. NoValue means the position is automatically determined.
</param>
<param name="widthRatio">
The width of the pointer relative to the default width. NoValue means the width is automatically determined.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setShapeAndOffset2(System.Int32[])">
<summary>
Sets the shape of new style angular meter pointers to a custom polygon.
</summary>
<param name="pointerCoor">
An array of numbers x0, y0, x1, y1, x2, y2, ..., representing the coordinates the polygon vertices.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setShapeAndOffset2(System.Int32[],System.Double)">
<summary>
Sets the shape of new style angular meter pointers to a custom polygon.
</summary>
<param name="pointerCoor">
An array of numbers x0, y0, x1, y1, x2, y2, ..., representing the coordinates the polygon vertices.
</param>
<param name="startOffset">
The position of the starting point as a ratio to the scale radius. NoValue means the position is automatically determined.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setShapeAndOffset2(System.Int32[],System.Double,System.Double)">
<summary>
Sets the shape of new style angular meter pointers to a custom polygon.
</summary>
<param name="pointerCoor">
An array of numbers x0, y0, x1, y1, x2, y2, ..., representing the coordinates the polygon vertices.
</param>
<param name="startOffset">
The position of the starting point as a ratio to the scale radius. NoValue means the position is automatically determined.
</param>
<param name="endOffset">
The position of the ending point as a ratio to the scale radius. NoValue means the position is automatically determined.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setShapeAndOffset2(System.Int32[],System.Double,System.Double,System.Double)">
<summary>
Sets the shape of new style angular meter pointers to a custom polygon.
</summary>
<param name="pointerCoor">
An array of numbers x0, y0, x1, y1, x2, y2, ..., representing the coordinates the polygon vertices.
</param>
<param name="startOffset">
The position of the starting point as a ratio to the scale radius. NoValue means the position is automatically determined.
</param>
<param name="endOffset">
The position of the ending point as a ratio to the scale radius. NoValue means the position is automatically determined.
</param>
<param name="widthRatio">
The width of the pointer relative to the default width. NoValue means the width is automatically determined.
</param>
</member>
<member name="M:ChartDirector.MeterPointer.setZOrder(System.Int32)">
<summary>
Sets the z-order (drawing order) of the meter pointer.
</summary>
<param name="z">
The z-order of the meter pointer.
</param>
</member>
<member name="M:ChartDirector.LinearMeter.#ctor(System.Int32,System.Int32)">
<summary>
Creates a new "LinearMeter" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
</member>
<member name="M:ChartDirector.LinearMeter.#ctor(System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "LinearMeter" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
</member>
<member name="M:ChartDirector.LinearMeter.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "LinearMeter" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
<param name="edgeColor">
The edge color of the chart.
</param>
</member>
<member name="M:ChartDirector.LinearMeter.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Creates a new "LinearMeter" object.
</summary>
<param name="width">
The width of the chart in pixels.
</param>
<param name="height">
The height of the chart in pixels.
</param>
<param name="bgColor">
The background color of the chart.
</param>
<param name="edgeColor">
The edge color of the chart.
</param>
<param name="raisedEffect">
The 3D border width. For positive values, the border will appear raised. For negative values, the border will appear depressed. A zero value means the border will appear flat.
</param>
</member>
<member name="M:ChartDirector.LinearMeter.setMeter(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the orientation and position of the meter plot area.
</summary>
<param name="leftX">
The x-coordinate of the top-left corner of the meter plot area.
</param>
<param name="topY">
The y-coordinate of the top-left corner of the meter plot area.
</param>
<param name="width">
The horizontal width of the meter plot area.
</param>
<param name="height">
The vertical height of the meter plot area.
</param>
</member>
<member name="M:ChartDirector.LinearMeter.setMeter(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the orientation and position of the meter plot area.
</summary>
<param name="leftX">
The x-coordinate of the top-left corner of the meter plot area.
</param>
<param name="topY">
The y-coordinate of the top-left corner of the meter plot area.
</param>
<param name="width">
The horizontal width of the meter plot area.
</param>
<param name="height">
The vertical height of the meter plot area.
</param>
<param name="axisPos">
The position of the meter scale. The scale should be on one of the 4 sides of the plot area border, specified by "Left", "Top", "Right" and "Bottom".
</param>
</member>
<member name="M:ChartDirector.LinearMeter.setMeter(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
<summary>
Sets the orientation and position of the meter plot area.
</summary>
<param name="leftX">
The x-coordinate of the top-left corner of the meter plot area.
</param>
<param name="topY">
The y-coordinate of the top-left corner of the meter plot area.
</param>
<param name="width">
The horizontal width of the meter plot area.
</param>
<param name="height">
The vertical height of the meter plot area.
</param>
<param name="axisPos">
The position of the meter scale. The scale should be on one of the 4 sides of the plot area border, specified by "Left", "Top", "Right" and "Bottom".
</param>
<param name="isReversed">
By default, if the meter is horizontal, the meter scale will run from left to right. If the meter is vertical, the meter scale will run from bottom to top. If this argument is set to true, the meter scale will be reversed.
</param>
</member>
<member name="M:ChartDirector.LinearMeter.setRail(System.Int32)">
<summary>
Sets the position, width and color of the pointer rail.
</summary>
<param name="railColor">
The color of the pointer rail.
</param>
</member>
<member name="M:ChartDirector.LinearMeter.setRail(System.Int32,System.Int32)">
<summary>
Sets the position, width and color of the pointer rail.
</summary>
<param name="railColor">
The color of the pointer rail.
</param>
<param name="railWidth">
The line width of the the pointer rail in pixels.
</param>
</member>
<member name="M:ChartDirector.LinearMeter.setRail(System.Int32,System.Int32,System.Int32)">
<summary>
Sets the position, width and color of the pointer rail.
</summary>
<param name="railColor">
The color of the pointer rail.
</param>
<param name="railWidth">
The line width of the the pointer rail in pixels.
</param>
<param name="railOffset">
The gap between the pointer rail and the meter scale in pixels. A negative value means the pointer rail is inside the meter scale region.
</param>
</member>
<member name="M:ChartDirector.LinearMeter.addBar(System.Double,System.Double,System.Int32)">
<summary>
Adds a bar to the meter.
</summary>
<param name="startValue">
The start value of the bar.
</param>
<param name="endValue">
The end value of the bar.
</param>
<param name="color">
The color of the bar.
</param>
</member>
<member name="M:ChartDirector.LinearMeter.addBar(System.Double,System.Double,System.Int32,System.Int32)">
<summary>
Adds a bar to the meter.
</summary>
<param name="startValue">
The start value of the bar.
</param>
<param name="endValue">
The end value of the bar.
</param>
<param name="color">
The color of the bar.
</param>
<param name="raisedEffect">
The 3D border width. For positive values, the border will appear raised. For negative values, the border will appear depressed. A zero value means the border will appear flat. This argument can also be used to specify "Chart.glassEffect", "Chart.softLighting", "Chart.cylinderEffect" or "Chart.flatBorder" effects.
</param>
</member>
<member name="M:ChartDirector.LinearMeter.addBar(System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a bar to the meter.
</summary>
<param name="startValue">
The start value of the bar.
</param>
<param name="endValue">
The end value of the bar.
</param>
<param name="color">
The color of the bar.
</param>
<param name="raisedEffect">
The 3D border width. For positive values, the border will appear raised. For negative values, the border will appear depressed. A zero value means the border will appear flat. This argument can also be used to specify "Chart.glassEffect", "Chart.softLighting", "Chart.cylinderEffect" or "Chart.flatBorder" effects.
</param>
<param name="roundedCorners">
The radius for the two corners at the end position of the bar.
</param>
</member>
<member name="M:ChartDirector.LinearMeter.addZone(System.Double,System.Double,System.Int32)">
<summary>
Adds a zone to the meter.
</summary>
<param name="startValue">
The start value (the lower bound) for the zone.
</param>
<param name="endValue">
The end value (the upper bound) for the zone.
</param>
<param name="color">
The color of the zone.
</param>
</member>
<member name="M:ChartDirector.LinearMeter.addZone(System.Double,System.Double,System.Int32,System.String)">
<summary>
Adds a zone to the meter.
</summary>
<param name="startValue">
The start value (the lower bound) for the zone.
</param>
<param name="endValue">
The end value (the upper bound) for the zone.
</param>
<param name="color">
The color of the zone.
</param>
<param name="label">
The text to be put at the center of the zone.
</param>
</member>
<member name="M:ChartDirector.VectorLayer.setVector(System.Double[],System.Double[])">
<summary>
Sets the lengths and directions for the vectors.
</summary>
<param name="lengths">
An array of numbers representing either the lengths of the vectors or the x coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
<param name="directions">
An array of numbers representing either the directions of the vectors or the y coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
</member>
<member name="M:ChartDirector.VectorLayer.setVector(System.Double[],System.Double[],System.Int32)">
<summary>
Sets the lengths and directions for the vectors.
</summary>
<param name="lengths">
An array of numbers representing either the lengths of the vectors or the x coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
<param name="directions">
An array of numbers representing either the directions of the vectors or the y coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
<param name="lengthScale">
The method to specify vector lengths and directions, which must be one of the predefined constants in the table above.
</param>
</member>
<member name="M:ChartDirector.VectorLayer.setArrowHead(System.Int32)">
<summary>
Sets the size of the arrow head.
</summary>
<param name="width">
The width of the arrow head in pixels. The default width is 8 pixels.
</param>
</member>
<member name="M:ChartDirector.VectorLayer.setArrowHead(System.Int32,System.Int32)">
<summary>
Sets the size of the arrow head.
</summary>
<param name="width">
The width of the arrow head in pixels. The default width is 8 pixels.
</param>
<param name="height">
The height of the arrow head in pixels. 0 means the height is the same as the width.
</param>
</member>
<member name="M:ChartDirector.VectorLayer.setArrowHead(System.Int32[])">
<summary>
Sets a custom shape to be used as the arrow head.
</summary>
<param name="polygon">
An array of integers x0, y0, x1, y1, x2, y2 ... representing the coordinates the polygon vertices on a 10 x 10 units grid.
</param>
</member>
<member name="M:ChartDirector.VectorLayer.setArrowHead2(System.Int32[])">
<summary>
Sets a custom shape to be used as the arrow head.
</summary>
<param name="polygon">
An array of integers x0, y0, x1, y1, x2, y2 ... representing the coordinates the polygon vertices on a 10 x 10 units grid.
</param>
</member>
<member name="M:ChartDirector.VectorLayer.setArrowStem(System.Int32[])">
<summary>
Sets a custom shape to be used as the arrow stem.
</summary>
<param name="polygon">
An array of integers x0, y0, x1, y1, x2, y2 ... representing the coordinates the polygon vertices on a 10 x 100 units grid.
</param>
</member>
<member name="M:ChartDirector.VectorLayer.setArrowAlignment(System.Int32)">
<summary>
Sets the alignment of the vector relative to the data point.
</summary>
<param name="alignment">
A "BottomCenter" value means the vector will point away from the data point (the default). A "TopCenter" value means the vector will point into the data point. A "Center" value means the center of the vector will be at the data point.
</param>
</member>
<member name="M:ChartDirector.VectorLayer.setVectorMargin(System.Double)">
<summary>
Sets the margins to shorten the vectors.
</summary>
<param name="startMargin">
The length to shorten at the start of the vector in pixels.
</param>
</member>
<member name="M:ChartDirector.VectorLayer.setVectorMargin(System.Double,System.Double)">
<summary>
Sets the margins to shorten the vectors.
</summary>
<param name="startMargin">
The length to shorten at the start of the vector in pixels.
</param>
<param name="endMargin">
The length to shorten at the end of the vector in pixels. "NoValue" means the length is the same as <b>startMargin</b>.
</param>
</member>
<member name="M:ChartDirector.VectorLayer.setIconSize(System.Int32)">
<summary>
Sets the size of the icon to be used in legend box.
</summary>
<param name="height">
The height of the icon in pixels.
</param>
</member>
<member name="M:ChartDirector.VectorLayer.setIconSize(System.Int32,System.Int32)">
<summary>
Sets the size of the icon to be used in legend box.
</summary>
<param name="height">
The height of the icon in pixels.
</param>
<param name="width">
The width of the icon in pixels. 0 means the width is automatically determined.
</param>
</member>
<member name="M:ChartDirector.ContourLayer.setZData(System.Double[])">
<summary>
Sets the z data used for the contour chart.
</summary>
<param name="zData">
An array of numbers as the z data for the contour chart.
</param>
</member>
<member name="M:ChartDirector.ContourLayer.setColorAxis(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the position, length and orientation of the color axis (color legend).
</summary>
<param name="x">
The x-coordinate of the reference point used to position the color axis.
</param>
<param name="y">
The y-coordinate of the reference point used to position the color axis.
</param>
<param name="alignment">
The alignment of the color axis with respect to the reference point. For example, a value of "TopLeft" means the reference point is the top- left corner of the color axis. See "Alignment Specification" for supported alignment types..
</param>
<param name="length">
The length of the color axis in pixels.
</param>
<param name="orientation">
The orientation of the color axis. A value of "Top"/"Bottom" means the axis is horizontal, and the axis labels are at top/bottom side of the axis. A value of "Left"/"Right" means the axis is vertical, and the axis labels are at the left/right side of the axis.
</param>
</member>
<member name="M:ChartDirector.ContourLayer.colorAxis">
<summary>
Gets the "ColorAxis" object representing the color axis (color legend).
</summary>
</member>
<member name="M:ChartDirector.ContourLayer.setSmoothInterpolation(System.Boolean)">
<summary>
Sets whether to use spline or bilinear/linear surface interpolation.
</summary>
<param name="b">
A true value means to use spline surface interpolation. A false value means to use bilinear/linear surface interpolation.
</param>
</member>
<member name="M:ChartDirector.ContourLayer.setZBounds">
<summary>
Clips the z values to the given bounds.
</summary>
</member>
<member name="M:ChartDirector.ContourLayer.setZBounds(System.Double)">
<summary>
Clips the z values to the given bounds.
</summary>
<param name="minZ">
The minimum z value to clip to. Use "NoValue" if there is no minimum z bound. The special constant "DataBound" means that the minimum z value is the minimum data value.
</param>
</member>
<member name="M:ChartDirector.ContourLayer.setZBounds(System.Double,System.Double)">
<summary>
Clips the z values to the given bounds.
</summary>
<param name="minZ">
The minimum z value to clip to. Use "NoValue" if there is no minimum z bound. The special constant "DataBound" means that the minimum z value is the minimum data value.
</param>
<param name="maxZ">
The maximum z value to clip to. Use "NoValue" if there is no maximum z bound. The special constant "DataBound" means that the maximum z value is the maximum data value.
</param>
</member>
<member name="M:ChartDirector.ContourLayer.setContourColor(System.Int32)">
<summary>
Sets contour line colors.
</summary>
<param name="contourColor">
The major contour line color. If this method is never called, the default contour line color is semi-transparent black (80000000).
</param>
</member>
<member name="M:ChartDirector.ContourLayer.setContourColor(System.Int32,System.Int32)">
<summary>
Sets contour line colors.
</summary>
<param name="contourColor">
The major contour line color. If this method is never called, the default contour line color is semi-transparent black (80000000).
</param>
<param name="minorContourColor">
The minor contour line color. -1 means the minor contour line color is the same as the major contour line color.
</param>
</member>
<member name="M:ChartDirector.ContourLayer.setContourWidth(System.Int32)">
<summary>
Sets contour line widths.
</summary>
<param name="contourWidth">
The major contour line width in pixels. If this method is never called, the default contour line width is 1 pixel.
</param>
</member>
<member name="M:ChartDirector.ContourLayer.setContourWidth(System.Int32,System.Int32)">
<summary>
Sets contour line widths.
</summary>
<param name="contourWidth">
The major contour line width in pixels. If this method is never called, the default contour line width is 1 pixel.
</param>
<param name="minorContourWidth">
The minor contour line width. -1 means the minor contour line width is the same as the major contour line width.
</param>
</member>
<member name="M:ChartDirector.ContourLayer.setExactContour">
<summary>
Sets whether to use exact contours or boundary contours.
</summary>
</member>
<member name="M:ChartDirector.ContourLayer.setExactContour(System.Boolean)">
<summary>
Sets whether to use exact contours or boundary contours.
</summary>
<param name="contour">
A true value specifies exact contour mode for standard contours, otherwise boundary contour mode will be used.
</param>
</member>
<member name="M:ChartDirector.ContourLayer.setExactContour(System.Boolean,System.Boolean)">
<summary>
Sets whether to use exact contours or boundary contours.
</summary>
<param name="contour">
A true value specifies exact contour mode for standard contours, otherwise boundary contour mode will be used.
</param>
<param name="markContour">
A true value specifies exact contour mode for mark contours. A false value specifies boundary contour mode for mark contours. A mark contour is an extra contour added using "Axis.addMark" on the color axis (obtained using "ContourLayer.colorAxis"). If this parameter is not specified, the default is to use the same contour mode as standard contours.
</param>
</member>
<member name="M:ChartDirector.PolarVectorLayer.setVector(System.Double[],System.Double[])">
<summary>
Sets the lengths and directions for the vectors.
</summary>
<param name="lengths">
An array of numbers representing either the lengths of the vectors or the radial coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
<param name="directions">
An array of numbers representing either the directions of the vectors or the angular coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
</member>
<member name="M:ChartDirector.PolarVectorLayer.setVector(System.Double[],System.Double[],System.Int32)">
<summary>
Sets the lengths and directions for the vectors.
</summary>
<param name="lengths">
An array of numbers representing either the lengths of the vectors or the radial coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
<param name="directions">
An array of numbers representing either the directions of the vectors or the angular coordinates of the reference end points, depending on <b>lengthScale</b>.
</param>
<param name="lengthScale">
The method to specify vector lengths and directions, which must be one of the predefined constants in the table above.
</param>
</member>
<member name="M:ChartDirector.PolarVectorLayer.setArrowHead(System.Int32)">
<summary>
Sets the size of the arrow head.
</summary>
<param name="width">
The width of the arrow head in pixels. The default width is 8 pixels.
</param>
</member>
<member name="M:ChartDirector.PolarVectorLayer.setArrowHead(System.Int32,System.Int32)">
<summary>
Sets the size of the arrow head.
</summary>
<param name="width">
The width of the arrow head in pixels. The default width is 8 pixels.
</param>
<param name="height">
The height of the arrow head in pixels. 0 means the height is the same as the width.
</param>
</member>
<member name="M:ChartDirector.PolarVectorLayer.setArrowHead(System.Int32[])">
<summary>
Sets a custom shape to be used as the arrow head.
</summary>
<param name="polygon">
An array of integers x0, y0, x1, y1, x2, y2 ... representing the coordinates the polygon vertices on a 10 x 10 units grid.
</param>
</member>
<member name="M:ChartDirector.PolarVectorLayer.setArrowHead2(System.Int32[])">
<summary>
Sets a custom shape to be used as the arrow head.
</summary>
<param name="polygon">
An array of integers x0, y0, x1, y1, x2, y2 ... representing the coordinates the polygon vertices on a 10 x 10 units grid.
</param>
</member>
<member name="M:ChartDirector.PolarVectorLayer.setArrowStem(System.Int32[])">
<summary>
Sets a custom shape to be used as the arrow stem.
</summary>
<param name="polygon">
An array of integers x0, y0, x1, y1, x2, y2 ... representing the coordinates the polygon vertices on a 10 x 100 units grid.
</param>
</member>
<member name="M:ChartDirector.PolarVectorLayer.setArrowAlignment(System.Int32)">
<summary>
Sets the alignment of the vector relative to the data point.
</summary>
<param name="alignment">
A "BottomCenter" value means the vector will point away from the data point (the default). A "TopCenter" value means the vector will point into the data point. A "Center" value means the center of the vector will be at the data point.
</param>
</member>
<member name="M:ChartDirector.PolarVectorLayer.setVectorMargin(System.Double)">
<summary>
Sets the margins to shorten the vectors.
</summary>
<param name="startMargin">
The length to shorten at the start of the vector in pixels.
</param>
</member>
<member name="M:ChartDirector.PolarVectorLayer.setVectorMargin(System.Double,System.Double)">
<summary>
Sets the margins to shorten the vectors.
</summary>
<param name="startMargin">
The length to shorten at the start of the vector in pixels.
</param>
<param name="endMargin">
The length to shorten at the end of the vector in pixels. "NoValue" means the length is the same as <b>startMargin</b>.
</param>
</member>
<member name="M:ChartDirector.PolarVectorLayer.setIconSize(System.Int32)">
<summary>
Sets the size of the icon to be used in legend box.
</summary>
<param name="height">
The height of the icon in pixels.
</param>
</member>
<member name="M:ChartDirector.PolarVectorLayer.setIconSize(System.Int32,System.Int32)">
<summary>
Sets the size of the icon to be used in legend box.
</summary>
<param name="height">
The height of the icon in pixels.
</param>
<param name="width">
The width of the icon in pixels. 0 means the width is automatically determined.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.#ctor(System.Int32)">
<summary>
Creates a new "FinanceChart" object.
</summary>
<param name="width">
The width of the chart in pixels. The height will be automatically determined as the chart is built.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.enableAntiAlias(System.Boolean)">
<summary>
Enables/Disables anti-alias.
</summary>
<param name="antiAlias">
True to enable anti-alias. False to disable anti-alias.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.setMargins(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the margins around the plot area. The default is 40 pixels for the left and right margins, and 30 pixels for the top and bottom margins.
</summary>
<param name="leftMargin">
The distance from the left side of the plot area to the left side of the chart.
</param>
<param name="topMargin">
The distance from the top of the plot area to the top of the chart.
</param>
<param name="rightMargin">
The distance from the right side of the plot area to the right side of the chart.
</param>
<param name="bottomMargin">
The distance from the bottom of the plot area to the bottom of the chart.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addPlotAreaTitle(System.Int32,System.String)">
<summary>
Adds a text title above the plot area. You may add multiple title above the plot area by calling this method multiple times.
</summary>
<param name="alignment">
The alignment with respect to the region that is on top of the plot area. See "Alignment Specification" for supported alignment types.
</param>
<param name="text">
The text to add.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.setPlotAreaStyle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Sets the plot area background and grid colors. The default is a white background with light grey (DDDDDD) grid lines.
</summary>
<param name="bgColor">
The plot area background color.
</param>
<param name="majorHGridColor">
Major horizontal grid color.
</param>
<param name="majorVGridColor">
Major vertical grid color.
</param>
<param name="minorHGridColor">
Minor horizontal grid color. In current version, minor horizontal grid is not used.
</param>
<param name="minorVGridColor">
Minor vertical grid color.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.setPlotAreaBorder(System.Int32,System.Int32)">
<summary>
Sets the plot area border color and the gap distance between charts. The default is a grey (888888) border with two 2 pixels gap between charts.
</summary>
<param name="borderColor">
The plot area border color.
</param>
<param name="borderGap">
The distance between charts.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.setLegendStyle(System.String,System.Double,System.Int32,System.Int32)">
<summary>
Sets legend font style and background color. The default is Arial 8 pt black font on a semi-transparent light grey (80CCCCCC) background.
</summary>
<param name="font">
The font of the legend text.
</param>
<param name="fontSize">
The font size of the legend text in points.
</param>
<param name="fontColor">
The color of the legend text.
</param>
<param name="bgColor">
The background color of the legend box.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.setXAxisStyle(System.String,System.Double,System.Int32,System.Double)">
<summary>
Sets x-axis label style. The default is Arial 8 pt black color as font with no text rotation.
</summary>
<param name="font">
The font of the axis labels.
</param>
<param name="fontSize">
The font size of the axis labels in points.
</param>
<param name="fontColor">
The color of the axis labels.
</param>
<param name="fontAngle">
The rotation of the axis labels.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.setYAxisStyle(System.String,System.Double,System.Int32,System.Int32)">
<summary>
Sets y-axis label style. The default is Arial 8 pt black color, with 14 pixels margin.
</summary>
<param name="font">
The font of the axis labels.
</param>
<param name="fontSize">
The font size of the axis labels in points.
</param>
<param name="fontColor">
The color of the axis labels.
</param>
<param name="axisMargin">
The margin at the top of the y-axis in pixels (to leave space for the legend box).
</param>
</member>
<member name="M:ChartDirector.FinanceChart.setAxisOnRight(System.Boolean)">
<summary>
Sets whether the main y-axis is on right of left side of the plot area. The default is on right.
</summary>
<param name="b">
A true value means the y-axis is on right. A false value means the y-axis is on left.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.setLogScale(System.Boolean)">
<summary>
Determines if log scale should be used for the main chart. The default is to use linear scale.
</summary>
<param name="b">
A true value means using log scale. A false value means using linear scale.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.setPercentageAxis">
<summary>
Label the axis of the main chart in percentage unit.
</summary>
</member>
<member name="M:ChartDirector.FinanceChart.setDateLabelFormat(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
<summary>
Sets the date/time formats to use for the x-axis labels under various cases.
</summary>
<param name="yearFormat">
The format for displaying labels on an axis with yearly ticks. The default is "{value|yyyy}".
</param>
<param name="firstMonthFormat">
The format for displaying labels on an axis with monthly ticks. This parameter applies to the first available month of a year (usually January) only, so it can be formatted differently from the other labels. The default is "&lt;*font=bold*&gt;{value|mmm yy}".
</param>
<param name="otherMonthFormat">
The format for displaying labels on an axis with monthly ticks. This parameter applies to months other than the first available month of a year. The default is "{value|mmm}".
</param>
<param name="firstDayFormat">
The format for displaying labels on an axis with daily ticks. This parameter applies to the first available day of a month only, so it can be formatted differently from the other labels. The default is "&lt;*font=bold*&gt;{value|d mmm}".
</param>
<param name="otherDayFormat">
The format for displaying labels on an axis with daily ticks. This parameter applies to days other than the first available day of a month. The default is "{value|d}".
</param>
<param name="firstHourFormat">
The format for displaying labels on an axis with hourly resolution. This parameter applies to the first tick of a day only, so it can be formatted differently from the other labels. The default is "&lt;*font=bold*&gt;{value|d mmm&lt;*br*&gt;h:nna}".
</param>
<param name="otherHourFormat">
The format for displaying labels on an axis with hourly resolution. This parameter applies to ticks at hourly boundaries, except the first tick of a day. The default is "{value|h:nna}".
</param>
</member>
<member name="M:ChartDirector.FinanceChart.setDateLabelSpacing(System.Int32)">
<summary>
Sets the minimum label spacing between two labels on the time axis.
</summary>
<param name="labelSpacing">
The label spacing in pixels. The default is 50 pixels.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.setToolTipDateFormat(System.String,System.String,System.String)">
<summary>
Sets the date/time formats to use for the tool tips under various cases.
</summary>
<param name="monthFormat">
The tool tip format to use if the data point spacing is one or more months (more than 30 days). The default is "[{xLabel|mmm yyyy}]".
</param>
<param name="dayFormat">
The tool tip format to use if the data point spacing is 1 day to less than 30 days. The default is "[{xLabel|mmm d, yyyy}]".
</param>
<param name="hourFormat">
The tool tip format to use if the data point spacing is less than 1 day. The default is "[{xLabel|mmm d, yyyy hh:nn:ss}]".
</param>
</member>
<member name="M:ChartDirector.FinanceChart.getToolTipDateFormat">
<summary>
Gets the date/time format string to use for tool tips.
</summary>
</member>
<member name="M:ChartDirector.FinanceChart.setNumberLabelFormat(System.String)">
<summary>
Sets the number format to use.
</summary>
<param name="formatString">
The format for displaying numbers.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.setData(System.DateTime[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[],System.Int32)">
<summary>
Sets the data to be used in the chart.
</summary>
<param name="timeStamps">
An array of dates/times for the time intervals.
</param>
<param name="highData">
The high values in the time intervals.
</param>
<param name="lowData">
The low values in the time intervals.
</param>
<param name="openData">
The open values in the time intervals.
</param>
<param name="closeData">
The close values in the time intervals.
</param>
<param name="volData">
The volume values in the time intervals.
</param>
<param name="extraPoints">
The number of leading time intervals that are not displayed in the chart. These intervals are typically used for computing indicators that require extra leading data, such as moving averages.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addMainChart(System.Int32)">
<summary>
Adds the main chart - the chart that shows the data for the prices.
</summary>
<param name="height">
The height of the main chart in pixels.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addCandleStick(System.Int32,System.Int32)">
<summary>
Adds a candlestick layer to the main chart.
</summary>
<param name="upColor">
The candle color for a up day.
</param>
<param name="downColor">
The candle color for a down day.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addHLOC(System.Int32,System.Int32)">
<summary>
Adds a HLOC layer to the main chart.
</summary>
<param name="upColor">
The candle color for a up day.
</param>
<param name="downColor">
The candle color for a down day.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addCloseLine(System.Int32)">
<summary>
Adds a closing price line on the main chart.
</summary>
<param name="color">
The color of the line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addWeightedClose(System.Int32)">
<summary>
Adds a weighted close line on the main chart.
</summary>
<param name="color">
The color of the line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addTypicalPrice(System.Int32)">
<summary>
Adds a typical price line on the main chart.
</summary>
<param name="color">
The color of the line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addMedianPrice(System.Int32)">
<summary>
Adds a median price line on the main chart.
</summary>
<param name="color">
The color of the line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addComparison(System.Double[],System.Int32,System.String)">
<summary>
Adds a data series to the main chart for comparison with the closing price.
</summary>
<param name="data">
An array of numbers representing the data series.
</param>
<param name="color">
The color of the line.
</param>
<param name="name">
The name of the data series.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addSimpleMovingAvg(System.Int32,System.Int32)">
<summary>
Adds a simple moving average line on the main chart.
</summary>
<param name="period">
The moving average period
</param>
<param name="color">
The color of the line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addExpMovingAvg(System.Int32,System.Int32)">
<summary>
Adds an exponential moving average line on the main chart.
</summary>
<param name="period">
The moving average period
</param>
<param name="color">
The color of the line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addTriMovingAvg(System.Int32,System.Int32)">
<summary>
Adds a triangular moving average line on the main chart.
</summary>
<param name="period">
The moving average period
</param>
<param name="color">
The color of the line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addWeightedMovingAvg(System.Int32,System.Int32)">
<summary>
Adds a weighted moving average line on the main chart.
</summary>
<param name="period">
The moving average period
</param>
<param name="color">
The color of the line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addParabolicSAR(System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a parabolic SAR indicator to the main chart.
</summary>
<param name="accInitial">
The initial acceleration. A common value to use is 0.02.
</param>
<param name="accIncrement">
The incremental acceleration. A common value to use is 0.02.
</param>
<param name="accMaximum">
The maximum acceleration. A common value to use is 0.2.
</param>
<param name="symbolType">
The symbol used to plot the parabolic SAR. One of the predefined shape constants representing the symbol shape. See "Shape Specification" for the available built-in shapes.
</param>
<param name="symbolSize">
The width and height of the symbol in pixels
</param>
<param name="fillColor">
The color used to fill the symbol.
</param>
<param name="edgeColor">
The edge color used to draw the edge of the symbol.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addBand(System.Double[],System.Double[],System.Int32,System.Int32,System.String)">
<summary>
Adds a generic band to the main finance chart. This method is used internally by other methods to add various bands (eg. Bollinger band, Donchian channels, etc).
</summary>
<param name="upperLine">
The data series for the upper band line.
</param>
<param name="lowerLine">
The data series for the lower band line.
</param>
<param name="lineColor">
The color of the upper and lower band line.
</param>
<param name="fillColor">
The color to fill the region between the upper and lower band lines.
</param>
<param name="name">
The name of the band.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addBollingerBand(System.Int32,System.Double,System.Int32,System.Int32)">
<summary>
Adds a Bollinger band to the main chart.
</summary>
<param name="period">
The period to compute the band.
</param>
<param name="bandWidth">
The half-width of the band in terms multiples of standard deviation. Typically 2 is used.
</param>
<param name="lineColor">
The color of the lines defining the upper and lower limits.
</param>
<param name="fillColor">
The color to fill the regional within the band.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addDonchianChannel(System.Int32,System.Int32,System.Int32)">
<summary>
Adds a Donchian channel to the main chart.
</summary>
<param name="period">
The period to compute the band.
</param>
<param name="lineColor">
The color of the lines defining the upper and lower limits.
</param>
<param name="fillColor">
The color to fill the regional within the band.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addEnvelop(System.Int32,System.Double,System.Int32,System.Int32)">
<summary>
Adds a price envelop to the main chart. The price envelop is a defined as a ratio around a moving average. For example, a ratio of 0.2 means 20% above and below the moving average.
</summary>
<param name="period">
The period for the moving average.
</param>
<param name="range">
The ratio above and below the moving average.
</param>
<param name="lineColor">
The color of the lines defining the upper and lower limits.
</param>
<param name="fillColor">
The color to fill the regional within the band.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addVolBars(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a volume bar chart layer on the main chart.
</summary>
<param name="height">
The height of the bar chart layer in pixels.
</param>
<param name="upColor">
The color to used on an 'up' day. An 'up' day is a day where the closing price is higher than that of the previous day.
</param>
<param name="downColor">
The color to used on a 'down' day. A 'down' day is a day where the closing price is lower than that of the previous day.
</param>
<param name="flatColor">
The color to used on a 'flat' day. A 'flat' day is a day where the closing price is the same as that of the previous day.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addIndicator(System.Int32)">
<summary>
Adds a blank indicator chart to the finance chart. Used internally to add other indicators. Override to change the default formatting (eg. axis fonts, etc.) of the various indicators.
</summary>
<param name="height">
The height of the chart in pixels.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addLineIndicator(System.Int32,System.Double[],System.Int32,System.String)">
<summary>
Adds a generic line indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="data">
The data series of the indicator line.
</param>
<param name="color">
The color of the indicator line.
</param>
<param name="name">
The name of the indicator.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addLineIndicator(ChartDirector.XYChart,System.Double[],System.Int32,System.String)">
<summary>
Adds a line to an existing indicator chart.
</summary>
<param name="c">
The indicator chart to add the line to.
</param>
<param name="data">
The data series of the indicator line.
</param>
<param name="color">
The color of the indicator line.
</param>
<param name="name">
The name of the indicator.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addLineIndicator2(ChartDirector.XYChart,System.Double[],System.Int32,System.String)">
<summary>
Adds a line to an existing indicator chart.
</summary>
<param name="c">
The indicator chart to add the line to.
</param>
<param name="data">
The data series of the indicator line.
</param>
<param name="color">
The color of the indicator line.
</param>
<param name="name">
The name of the indicator.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addBarIndicator(System.Int32,System.Double[],System.Int32,System.String)">
<summary>
Adds a generic bar indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="data">
The data series of the indicator bars.
</param>
<param name="color">
The color of the indicator bars.
</param>
<param name="name">
The name of the indicator.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addBarIndicator(ChartDirector.XYChart,System.Double[],System.Int32,System.String)">
<summary>
Adds a bar layer to an existing indicator chart.
</summary>
<param name="c">
The indicator chart to add the bar layer to.
</param>
<param name="data">
The data series of the indicator bars.
</param>
<param name="color">
The color of the indicator bars.
</param>
<param name="name">
The name of the indicator.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addBarIndicator2(ChartDirector.XYChart,System.Double[],System.Int32,System.String)">
<summary>
Adds a bar layer to an existing indicator chart.
</summary>
<param name="c">
The indicator chart to add the bar layer to.
</param>
<param name="data">
The data series of the indicator bars.
</param>
<param name="color">
The color of the indicator bars.
</param>
<param name="name">
The name of the indicator.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addThreshold(ChartDirector.XYChart,ChartDirector.LineLayer,System.Double,System.Int32,System.Double,System.Int32)">
<summary>
Adds an upper/lower threshold range to an existing indicator chart.
</summary>
<param name="c">
The indicator chart to add the threshold range to.
</param>
<param name="layer">
The line layer that the threshold range applies to.
</param>
<param name="topRange">
The upper threshold.
</param>
<param name="topColor">
The color to fill the region of the line that is above the upper threshold.
</param>
<param name="bottomRange">
The lower threshold.
</param>
<param name="bottomColor">
The color to fill the region of the line that is below the lower threshold.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addAccDist(System.Int32,System.Int32)">
<summary>
Adds an Accumulation/Distribution indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="color">
The color of the indicator line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addAroon(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds an Aroon Up/Down indicators chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period">
The period to compute the indicators.
</param>
<param name="upColor">
The color of the Aroon Up indicator line.
</param>
<param name="downColor">
The color of the Aroon Down indicator line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addAroonOsc(System.Int32,System.Int32,System.Int32)">
<summary>
Adds an Aroon Oscillator indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period">
The period to compute the indicator.
</param>
<param name="color">
The color of the indicator line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addADX(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds an Average Directional Index indicators chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period">
The period to compute the indicator.
</param>
<param name="posColor">
The color of the Positive Directional Index line.
</param>
<param name="negColor">
The color of the Negative Directional Index line.
</param>
<param name="color">
The color of the Average Directional Index line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addATR(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds an Average True Range indicators chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period">
The period to compute the indicator.
</param>
<param name="color1">
The color of the True Range line.
</param>
<param name="color2">
The color of the Average True Range line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addBollingerWidth(System.Int32,System.Int32,System.Double,System.Int32)">
<summary>
Adds a Bollinger Band Width indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period">
The period to compute the indicator.
</param>
<param name="width">
The band width to compute the indicator.
</param>
<param name="color">
The color of the indicator line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addCCI(System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32)">
<summary>
Adds a Community Channel Index indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period">
The period to compute the indicator.
</param>
<param name="color">
The color of the indicator line.
</param>
<param name="range">
The distance between the middle line and the upper and lower threshold lines.
</param>
<param name="upColor">
The fill color when the indicator exceeds the upper threshold line.
</param>
<param name="downColor">
The fill color when the indicator falls below the lower threshold line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addChaikinMoneyFlow(System.Int32,System.Int32,System.Int32)">
<summary>
Adds a Chaikin Money Flow indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period">
The period to compute the indicator.
</param>
<param name="color">
The color of the indicator line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addChaikinOscillator(System.Int32,System.Int32)">
<summary>
Adds a Chaikin Oscillator indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="color">
The color of the indicator line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addChaikinVolatility(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a Chaikin Volatility indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period1">
The period to smooth the range.
</param>
<param name="period2">
The period to compute the rate of change of the smoothed range.
</param>
<param name="color">
The color of the indicator line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addCLV(System.Int32,System.Int32)">
<summary>
Adds a Close Location Value indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="color">
The color of the indicator line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addDPO(System.Int32,System.Int32,System.Int32)">
<summary>
Adds a Detrended Price Oscillator indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period">
The period to compute the indicator.
</param>
<param name="color">
The color of the indicator line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addDonchianWidth(System.Int32,System.Int32,System.Int32)">
<summary>
Adds a Donchian Channel Width indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period">
The period to compute the indicator.
</param>
<param name="color">
The color of the indicator line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addEaseOfMovement(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a Ease of Movement indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period">
The period to smooth the indicator.
</param>
<param name="color1">
The color of the indicator line.
</param>
<param name="color2">
The color of the smoothed indicator line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addFastStochastic(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a Fast Stochastic indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period1">
The period to compute the %K line.
</param>
<param name="period2">
The period to compute the %D line.
</param>
<param name="color1">
The color of the %K line.
</param>
<param name="color2">
The color of the %D line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addMACD(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a MACD indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period1">
The first moving average period to compute the indicator.
</param>
<param name="period2">
The second moving average period to compute the indicator.
</param>
<param name="period3">
The moving average period of the signal line.
</param>
<param name="color">
The color of the indicator line.
</param>
<param name="signalColor">
The color of the signal line.
</param>
<param name="divColor">
The color of the divergent bars.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addMassIndex(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a Mass Index indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="color">
The color of the indicator line.
</param>
<param name="upColor">
The fill color when the indicator exceeds the upper threshold line.
</param>
<param name="downColor">
The fill color when the indicator falls below the lower threshold line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addMFI(System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32)">
<summary>
Adds a Money Flow Index indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period">
The period to compute the indicator.
</param>
<param name="color">
The color of the indicator line.
</param>
<param name="range">
The distance between the middle line and the upper and lower threshold lines.
</param>
<param name="upColor">
The fill color when the indicator exceeds the upper threshold line.
</param>
<param name="downColor">
The fill color when the indicator falls below the lower threshold line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addMomentum(System.Int32,System.Int32,System.Int32)">
<summary>
Adds a Momentum indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period">
The period to compute the indicator.
</param>
<param name="color">
The color of the indicator line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addNVI(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a Negative Volume Index indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period">
The period to compute the signal line.
</param>
<param name="color">
The color of the indicator line.
</param>
<param name="signalColor">
The color of the signal line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addOBV(System.Int32,System.Int32)">
<summary>
Adds an On Balance Volume indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="color">
The color of the indicator line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addPerformance(System.Int32,System.Int32)">
<summary>
Adds a Performance indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="color">
The color of the indicator line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addPPO(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a Percentage Price Oscillator indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period1">
The first moving average period to compute the indicator.
</param>
<param name="period2">
The second moving average period to compute the indicator.
</param>
<param name="period3">
The moving average period of the signal line.
</param>
<param name="color">
The color of the indicator line.
</param>
<param name="signalColor">
The color of the signal line.
</param>
<param name="divColor">
The color of the divergent bars.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addPVI(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a Positive Volume Index indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period">
The period to compute the signal line.
</param>
<param name="color">
The color of the indicator line.
</param>
<param name="signalColor">
The color of the signal line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addPVO(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a Percentage Volume Oscillator indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period1">
The first moving average period to compute the indicator.
</param>
<param name="period2">
The second moving average period to compute the indicator.
</param>
<param name="period3">
The moving average period of the signal line.
</param>
<param name="color">
The color of the indicator line.
</param>
<param name="signalColor">
The color of the signal line.
</param>
<param name="divColor">
The color of the divergent bars.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addPVT(System.Int32,System.Int32)">
<summary>
Adds a Price Volume Trend indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="color">
The color of the indicator line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addROC(System.Int32,System.Int32,System.Int32)">
<summary>
Adds a Rate of Change indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period">
The period to compute the indicator.
</param>
<param name="color">
The color of the indicator line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addRSI(System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32)">
<summary>
Adds a Relative Strength Index indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period">
The period to compute the indicator.
</param>
<param name="color">
The color of the indicator line.
</param>
<param name="range">
The distance between the middle line and the upper and lower threshold lines.
</param>
<param name="upColor">
The fill color when the indicator exceeds the upper threshold line.
</param>
<param name="downColor">
The fill color when the indicator falls below the lower threshold line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addSlowStochastic(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a Slow Stochastic indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period1">
The period to compute the %K line.
</param>
<param name="period2">
The period to compute the %D line.
</param>
<param name="color1">
The color of the %K line.
</param>
<param name="color2">
The color of the %D line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addStdDev(System.Int32,System.Int32,System.Int32)">
<summary>
Adds a Moving Standard Deviation indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period">
The period to compute the indicator.
</param>
<param name="color">
The color of the indicator line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addStochRSI(System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32)">
<summary>
Adds a Stochastic RSI indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period">
The period to compute the indicator.
</param>
<param name="color">
The color of the indicator line.
</param>
<param name="range">
The distance between the middle line and the upper and lower threshold lines.
</param>
<param name="upColor">
The fill color when the indicator exceeds the upper threshold line.
</param>
<param name="downColor">
The fill color when the indicator falls below the lower threshold line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addTRIX(System.Int32,System.Int32,System.Int32)">
<summary>
Adds a TRIX indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period">
The period to compute the indicator.
</param>
<param name="color">
The color of the indicator line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addUltimateOscillator(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32)">
<summary>
Adds an Ultimate Oscillator indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period1">
The first moving average period to compute the indicator.
</param>
<param name="period2">
The second moving average period to compute the indicator.
</param>
<param name="period3">
The third moving average period to compute the indicator.
</param>
<param name="color">
The color of the indicator line.
</param>
<param name="range">
The distance between the middle line and the upper and lower threshold lines.
</param>
<param name="upColor">
The fill color when the indicator exceeds the upper threshold line.
</param>
<param name="downColor">
The fill color when the indicator falls below the lower threshold line.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addVolIndicator(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Adds a Volume indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="upColor">
The color to used on an 'up' day. An 'up' day is a day where the closing price is higher than that of the previous day.
</param>
<param name="downColor">
The color to used on a 'down' day. A 'down' day is a day where the closing price is lower than that of the previous day.
</param>
<param name="flatColor">
The color to used on a 'flat' day. A 'flat' day is a day where the closing price is the same as that of the previous day.
</param>
</member>
<member name="M:ChartDirector.FinanceChart.addWilliamR(System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32)">
<summary>
Adds a William %R indicator chart.
</summary>
<param name="height">
The height of the indicator chart in pixels.
</param>
<param name="period">
The period to compute the indicator.
</param>
<param name="color">
The color of the indicator line.
</param>
<param name="range">
The distance between the middle line and the upper and lower threshold lines.
</param>
<param name="upColor">
The fill color when the indicator exceeds the upper threshold line.
</param>
<param name="downColor">
The fill color when the indicator falls below the lower threshold line.
</param>
</member>
<member name="M:ChartDirector.WebChartViewer.OnPageInit(System.Web.UI.Page)">
<summary>
Handles the Web Form Init event to support dynamically created WebChartViewer or "WebViewPortControl".
</summary>
<param name="currentPage">
The current Web Form.
</param>
</member>
<member name="M:ChartDirector.WebChartViewer.GetPostBackURL">
<summary>
Creates a special URL to represent post back operation for use in image maps.
</summary>
</member>
<member name="M:ChartDirector.WebChartViewer.GetPostBackURL(System.String)">
<summary>
Creates a special URL to represent post back operation for use in image maps.
</summary>
<param name="cookie">
An arbitrary string that will become the "cookie" attribute of "WebHotSpotEventArgs" when the "WebChartViewer.ClickHotSpot" event is fired.
</param>
</member>
<member name="M:ChartDirector.WebChartViewer.IsPartialUpdateRequest(System.Web.UI.Page)">
<summary>
Checks if the current HTTP Request is a partial update request (AJAX request) sent using "JsChartViewer.partialUpdate".
</summary>
<param name="currentPage">
The current Web Form.
</param>
</member>
<member name="M:ChartDirector.WebChartViewer.IsStreamRequest(System.Web.UI.Page)">
<summary>
Checks if the current HTTP request is a stream update request sent using "JsChartViewer.streamUpdate".
</summary>
<param name="currentPage">
The current Web Form.
</param>
</member>
<member name="M:ChartDirector.WebChartViewer.IsAttachmentRequest">
<summary>
Checks if the current partial update request (AJAX request) is an attachment request sent using "JsChartViewer.partialUpdateAsAttachment".
</summary>
</member>
<member name="M:ChartDirector.WebChartViewer.IsViewPortChangedEvent(System.Web.UI.Page)">
<summary>
Checks if the "JsChartViewer.ViewPortChanged" event has occurred.
</summary>
<param name="currentPage">
The current Web Form.
</param>
</member>
<member name="M:ChartDirector.WebChartViewer.GetSenderClientId(System.Web.UI.Page)">
<summary>
Gets the id of the "JsChartViewer" that sends the current HTTP request.
</summary>
<param name="currentPage">
The current Web Form.
</param>
</member>
<member name="M:ChartDirector.WebChartViewer.LoadViewerState">
<summary>
Loads the state of the "JsChartViewer" into the WebChartViewer in partial chart updates (AJAX chart updates).
</summary>
</member>
<member name="M:ChartDirector.WebChartViewer.PartialUpdateChart">
<summary>
Sends the response to a partial chart update request.
</summary>
</member>
<member name="M:ChartDirector.WebChartViewer.PartialUpdateChart(System.String)">
<summary>
Sends the response to a partial chart update request.
</summary>
<param name="msg">
A pop up message to be displayed on the chart. "" means no pop up message will be displayed.
</param>
</member>
<member name="M:ChartDirector.WebChartViewer.PartialUpdateChart(System.String,System.Int32)">
<summary>
Sends the response to a partial chart update request.
</summary>
<param name="msg">
A pop up message to be displayed on the chart. "" means no pop up message will be displayed.
</param>
<param name="timeout">
The delay time in milliseconds, after which the pop up message will automatically hide. If a negative number is used, the delay time is set as the absolute value. In addition, there will be an OK button to allow the user to dismiss the message. Use a very large negative number to show the message until the user press OK. 0 means the pop up message will stay until the chart refreshes.
</param>
</member>
<member name="M:ChartDirector.WebChartViewer.StreamChart">
<summary>
Sends the chart image out as a MIME stream.
</summary>
</member>
<member name="M:ChartDirector.WebChartViewer.StreamChart(System.String)">
<summary>
Sends the chart image out as a MIME stream.
</summary>
<param name="filename">
The suggested filename to use when user saves the chart image as a file on the browser side.
</param>
</member>
<member name="M:ChartDirector.WebChartViewer.StreamChart(System.String,System.Boolean)">
<summary>
Sends the chart image out as a MIME stream.
</summary>
<param name="filename">
The suggested filename to use when user saves the chart image as a file on the browser side.
</param>
<param name="asAttachment">
Specifies whether the stream is an attachment.
</param>
</member>
<member name="M:ChartDirector.WebChartViewer.SetCustomAttr(System.String,System.String)">
<summary>
Sets a custom attribute.
</summary>
<param name="key">
The attribute key.
</param>
<param name="value">
The attribute value.
</param>
</member>
<member name="M:ChartDirector.WebChartViewer.GetCustomAttr(System.String)">
<summary>
Gets a custom attribute.
</summary>
<param name="key">
The attribute key.
</param>
</member>
<member name="M:ChartDirector.WebChartViewer.setFullRange(System.String,System.Double,System.Double)">
<summary>
Defines the full range of a viewport data scale.
</summary>
<param name="id">
The name of the data scale.
</param>
<param name="minValue">
The minimum value of the data scale.
</param>
<param name="maxValue">
The maximum value of the data scale.
</param>
</member>
<member name="M:ChartDirector.WebChartViewer.setFullRange(System.String,System.DateTime,System.DateTime)">
<summary>
Defines the full range of a viewport data scale.
</summary>
<param name="id">
The name of the data scale.
</param>
<param name="minValue">
The minimum value of the data scale.
</param>
<param name="maxValue">
The maximum value of the data scale.
</param>
</member>
<member name="M:ChartDirector.WebChartViewer.getValueAtViewPort(System.String,System.Double)">
<summary>
Converts a viewport coordinate to a value of the specified data scale.
</summary>
<param name="id">
The name of the data scale.
</param>
<param name="vpCoor">
The viewport coordinate.
</param>
</member>
<member name="M:ChartDirector.WebChartViewer.getValueAtViewPort(System.String,System.Double,System.Boolean)">
<summary>
Converts a viewport coordinate to a value of the specified data scale.
</summary>
<param name="id">
The name of the data scale.
</param>
<param name="vpCoor">
The viewport coordinate.
</param>
<param name="isLogScale">
true if the conversion is based on a logarithmic scale. false if the conversion is based on a non-logarithmic scale.
</param>
</member>
<member name="M:ChartDirector.WebChartViewer.getViewPortAtValue(System.String,System.Double)">
<summary>
Converts a value of the specified data scale to a viewport coordinate.
</summary>
<param name="id">
The name of the data scale.
</param>
<param name="value">
The value to be converted.
</param>
</member>
<member name="M:ChartDirector.WebChartViewer.getViewPortAtValue(System.String,System.Double,System.Boolean)">
<summary>
Converts a value of the specified data scale to a viewport coordinate.
</summary>
<param name="id">
The name of the data scale.
</param>
<param name="value">
The value to be converted.
</param>
<param name="isLogScale">
true if the conversion is based on a logarithmic scale. false if the conversion is based on a non-logarithmic scale.
</param>
</member>
<member name="M:ChartDirector.WebChartViewer.syncLinearAxisWithViewPort(System.String,ChartDirector.Axis)">
<summary>
Synchronizes a linear "Axis" with the part of the data scale in viewport.
</summary>
<param name="id">
The name of the data scale.
</param>
<param name="axis">
The "Axis" object to synchronize with.
</param>
</member>
<member name="M:ChartDirector.WebChartViewer.syncLogAxisWithViewPort(System.String,ChartDirector.Axis)">
<summary>
Synchronizes a logarithmic "Axis" with the part of the data scale in viewport.
</summary>
<param name="id">
The name of the data scale.
</param>
<param name="axis">
The "Axis" object to synchronize with.
</param>
</member>
<member name="M:ChartDirector.WebChartViewer.syncDateAxisWithViewPort(System.String,ChartDirector.Axis)">
<summary>
Synchronizes a date/time "Axis" with the part of the data scale in viewport.
</summary>
<param name="id">
The name of the data scale.
</param>
<param name="axis">
The "Axis" object to synchronize with.
</param>
</member>
<member name="M:ChartDirector.Chart.ClearTypeColor">
<summary>
Gets a value to represent that standard ClearType technology be used for drawing text.
</summary>
</member>
<member name="M:ChartDirector.Chart.ClearTypeColor(System.Double)">
<summary>
Gets a value to represent that standard ClearType technology be used for drawing text.
</summary>
<param name="gamma">
Specifies the level of gamma correction used for ClearType font rendering. This is usually a number between 1 to 2.5. A value of 0 means the default gamma level.
</param>
</member>
<member name="M:ChartDirector.Chart.ClearTypeMono">
<summary>
Gets a value to represent that monochrome ClearType technology be used for drawing text.
</summary>
</member>
<member name="M:ChartDirector.Chart.ClearTypeMono(System.Double)">
<summary>
Gets a value to represent that monochrome ClearType technology be used for drawing text.
</summary>
<param name="gamma">
Specifies the level of gamma correction used for ClearType font rendering. This is usually a number between 1 to 2.5. A value of 0 means the default gamma level.
</param>
</member>
<member name="M:ChartDirector.Chart.setLicenseCode(System.String)">
<summary>
Sets the license code into ChartDirector.
</summary>
<param name="licCode">
A text string containing the license code.
</param>
</member>
<member name="M:ChartDirector.Chart.getVersion">
<summary>
Gets ChartDirector version information.
</summary>
</member>
<member name="M:ChartDirector.Chart.getBootLog">
<summary>
A diagnostic function to obtain the ChartDirector boot log.
</summary>
</member>
<member name="M:ChartDirector.Chart.testFont(System.String,System.Int32,System.Double,System.Double,System.Double)">
<summary>
A diagnostic function to perform a font loading test.
</summary>
<param name="font">
The font name. See "Font Specification" for details on various font attributes.
</param>
<param name="fontIndex">
The font index if the font name refers to a font collection. An index of 0 means the first font.
</param>
<param name="fontHeight">
The font height in points. This parameter will not affect font loading if the exact font exists, but will affect which substitution font to use if the font does not exist.
</param>
<param name="fontWidth">
The font width in points. This parameter will not affect font loading if the exact font exists, but will affect which substitution font to use if the font does not exist.
</param>
<param name="angle">
The rotation angle of the text. The angle is measured in degrees in clockwise direction. This parameter will not affect font loading if the exact font exists, but will affect which substitution font to use if the font does not exist.
</param>
</member>
<member name="M:ChartDirector.Chart.chartTime(System.Int32,System.Int32,System.Int32)">
<summary>
Obtain the second elapsed since 01-01-0001 00:00:00 to the given time, which is the "date/time" format used by ChartDirector.
</summary>
<param name="y">
The year component of the given time.
</param>
<param name="m">
The month component of the given time
</param>
<param name="d">
The day of month component of the given time.
</param>
</member>
<member name="M:ChartDirector.Chart.chartTime(System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Obtain the second elapsed since 01-01-0001 00:00:00 to the given time, which is the "date/time" format used by ChartDirector.
</summary>
<param name="y">
The year component of the given time.
</param>
<param name="m">
The month component of the given time
</param>
<param name="d">
The day of month component of the given time.
</param>
<param name="h">
The hour component of the given time.
</param>
</member>
<member name="M:ChartDirector.Chart.chartTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Obtain the second elapsed since 01-01-0001 00:00:00 to the given time, which is the "date/time" format used by ChartDirector.
</summary>
<param name="y">
The year component of the given time.
</param>
<param name="m">
The month component of the given time
</param>
<param name="d">
The day of month component of the given time.
</param>
<param name="h">
The hour component of the given time.
</param>
<param name="n">
The minute component of the given time.
</param>
</member>
<member name="M:ChartDirector.Chart.chartTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
Obtain the second elapsed since 01-01-0001 00:00:00 to the given time, which is the "date/time" format used by ChartDirector.
</summary>
<param name="y">
The year component of the given time.
</param>
<param name="m">
The month component of the given time
</param>
<param name="d">
The day of month component of the given time.
</param>
<param name="h">
The hour component of the given time.
</param>
<param name="n">
The minute component of the given time.
</param>
<param name="s">
The second component of the given time.
</param>
</member>
<member name="M:ChartDirector.Chart.chartTime(System.Int32)">
<summary>
Converts a UNIX time (seconds elapsed since 01-01-1970 00:00:00 GMT) to the "date/time" format used by ChartDirector.
</summary>
<param name="t">
A time represented as seconds elapsed since 01-01-1970 00:00:00 GMT.
</param>
</member>
<member name="M:ChartDirector.Chart.chartTime2(System.Int32)">
<summary>
Converts a UNIX time (seconds elapsed since 01-01-1970 00:00:00 GMT) to the "date/time" format used by ChartDirector.
</summary>
<param name="t">
A time represented as seconds elapsed since 01-01-1970 00:00:00 GMT.
</param>
</member>
<member name="M:ChartDirector.Chart.getChartYMD(System.Double)">
<summary>
Gets the year, month and day represented by a ChartDirector "date/time".
</summary>
<param name="t">
A ChartDirector "date/time", that is, a number representing seconds elapsed since 01-01-0001 00:00:00.
</param>
</member>
<member name="M:ChartDirector.Chart.getChartWeekDay(System.Double)">
<summary>
Gets the weekday represented by a ChartDirector "date/time".
</summary>
<param name="t">
A ChartDirector "date/time", that is, a number representing seconds elapsed since 01-01-0001 00:00:00.
</param>
</member>
<member name="M:ChartDirector.Chart.CTime(System.DateTime)">
<summary>
Converts a .NET DateTime to ChartDirector's "date/time" format.
</summary>
<param name="time">
A .NET DateTime object.
</param>
</member>
<member name="M:ChartDirector.Chart.CTime(System.DateTime[])">
<summary>
Converts an array of .NET DateTime objects to ChartDirector's "date/time" format.
</summary>
<param name="times">
An array of .NET DateTime objects.
</param>
</member>
<member name="M:ChartDirector.Chart.CTime2(System.DateTime[])">
<summary>
Converts an array of .NET DateTime objects to ChartDirector's "date/time" format.
</summary>
<param name="times">
An array of .NET DateTime objects.
</param>
</member>
<member name="M:ChartDirector.Chart.NTime(System.Double)">
<summary>
Converts a date/time in ChartDirector's "date/time" format to a .NET DateTime object.
</summary>
<param name="time">
A number representing date/time using ChartDirector's "date/time" format.
</param>
</member>
<member name="M:ChartDirector.Chart.NTime(System.Double[])">
<summary>
Converts an array of dates/times in ChartDirector's "date/time" format to .NET DateTime objects.
</summary>
<param name="times">
An array of numbers representing dates/times using ChartDirector's "date/time" format.
</param>
</member>
<member name="M:ChartDirector.Chart.NTime2(System.Double[])">
<summary>
Converts an array of dates/times in ChartDirector's "date/time" format to .NET DateTime objects.
</summary>
<param name="times">
An array of numbers representing dates/times using ChartDirector's "date/time" format.
</param>
</member>
<member name="M:ChartDirector.Chart.goldColor">
<summary>
Creates a golden color, most commonly used as a background color.
</summary>
</member>
<member name="M:ChartDirector.Chart.goldColor(System.Int32)">
<summary>
Creates a golden color, most commonly used as a background color.
</summary>
<param name="angle">
The direction for brightness modulation, specified as a clockwise angle in degrees, with 0 being the upward pointing direction.
</param>
</member>
<member name="M:ChartDirector.Chart.silverColor">
<summary>
Creates a silver color, most commonly used as a background color.
</summary>
</member>
<member name="M:ChartDirector.Chart.silverColor(System.Int32)">
<summary>
Creates a silver color, most commonly used as a background color.
</summary>
<param name="angle">
The direction for brightness modulation, specified as a clockwise angle in degrees, with 0 being the upward pointing direction.
</param>
</member>
<member name="M:ChartDirector.Chart.metalColor(System.Int32)">
<summary>
Creates a color by modulates the brightness of another color to create metallic shiny effects.
</summary>
<param name="c">
The color to be modulated.
</param>
</member>
<member name="M:ChartDirector.Chart.metalColor(System.Int32,System.Int32)">
<summary>
Creates a color by modulates the brightness of another color to create metallic shiny effects.
</summary>
<param name="c">
The color to be modulated.
</param>
<param name="angle">
The direction for brightness modulation, specified as a clockwise angle in degrees, with 0 being the upward pointing direction.
</param>
</member>
<member name="M:ChartDirector.Chart.brushedGoldColor">
<summary>
Creates a brushed golden color, most commonly used as a background color.
</summary>
</member>
<member name="M:ChartDirector.Chart.brushedGoldColor(System.Int32)">
<summary>
Creates a brushed golden color, most commonly used as a background color.
</summary>
<param name="texture">
The strength of the brushed texture. Must be 0, 1, 2 or 3 for no texture, light texture, medium texture and strong texture.
</param>
</member>
<member name="M:ChartDirector.Chart.brushedGoldColor(System.Int32,System.Int32)">
<summary>
Creates a brushed golden color, most commonly used as a background color.
</summary>
<param name="texture">
The strength of the brushed texture. Must be 0, 1, 2 or 3 for no texture, light texture, medium texture and strong texture.
</param>
<param name="angle">
The direction for brightness modulation, specified as a clockwise angle in degrees, with 0 being the upward pointing direction.
</param>
</member>
<member name="M:ChartDirector.Chart.brushedSilverColor">
<summary>
Creates a brushed silver color, most commonly used as a background color.
</summary>
</member>
<member name="M:ChartDirector.Chart.brushedSilverColor(System.Int32)">
<summary>
Creates a brushed silver color, most commonly used as a background color.
</summary>
<param name="texture">
The strength of the brushed texture. Must be 0, 1, 2 or 3 for no texture, light texture, medium texture and strong texture.
</param>
</member>
<member name="M:ChartDirector.Chart.brushedSilverColor(System.Int32,System.Int32)">
<summary>
Creates a brushed silver color, most commonly used as a background color.
</summary>
<param name="texture">
The strength of the brushed texture. Must be 0, 1, 2 or 3 for no texture, light texture, medium texture and strong texture.
</param>
<param name="angle">
The direction for brightness modulation, specified as a clockwise angle in degrees, with 0 being the upward pointing direction.
</param>
</member>
<member name="M:ChartDirector.Chart.brushedMetalColor(System.Int32)">
<summary>
Creates a color by modulates the brightness of another color to create brushed metallic shiny effects.
</summary>
<param name="c">
The color to be modulated.
</param>
</member>
<member name="M:ChartDirector.Chart.brushedMetalColor(System.Int32,System.Int32)">
<summary>
Creates a color by modulates the brightness of another color to create brushed metallic shiny effects.
</summary>
<param name="c">
The color to be modulated.
</param>
<param name="texture">
The strength of the brushed texture. Must be 0, 1, 2 or 3 for no texture, light texture, medium texture and strong texture.
</param>
</member>
<member name="M:ChartDirector.Chart.brushedMetalColor(System.Int32,System.Int32,System.Int32)">
<summary>
Creates a color by modulates the brightness of another color to create brushed metallic shiny effects.
</summary>
<param name="c">
The color to be modulated.
</param>
<param name="texture">
The strength of the brushed texture. Must be 0, 1, 2 or 3 for no texture, light texture, medium texture and strong texture.
</param>
<param name="angle">
The direction for brightness modulation, specified as a clockwise angle in degrees, with 0 being the upward pointing direction.
</param>
</member>
<member name="M:ChartDirector.Chart.CColor(System.Drawing.Color)">
<summary>
Converts a .NET System.Drawing.Color object to a ChartDirector color.
</summary>
<param name="color">
A .NET System.Drawing.Color object.
</param>
</member>
<member name="M:ChartDirector.Chart.CColor(System.Drawing.Color[])">
<summary>
Converts an array of .NET System.Drawing.Color objects to an array of ChartDirector colors.
</summary>
<param name="colors">
An array of .NET System.Drawing.Color objects.
</param>
</member>
<member name="M:ChartDirector.Chart.CColor2(System.Drawing.Color[])">
<summary>
Converts an array of .NET System.Drawing.Color objects to an array of ChartDirector colors.
</summary>
<param name="colors">
An array of .NET System.Drawing.Color objects.
</param>
</member>
<member name="M:ChartDirector.Chart.NColor(System.Int32)">
<summary>
Converts a ChartDirector color to a .NET System.Drawing.Color object.
</summary>
<param name="color">
A ChartDirector color.
</param>
</member>
<member name="M:ChartDirector.Chart.NColor(System.Int32[])">
<summary>
Converts an array of ChartDirector colors to an array of .NET System.Drawing.Color objects.
</summary>
<param name="colors">
An array of ChartDirector colors.
</param>
</member>
<member name="M:ChartDirector.Chart.NColor2(System.Int32[])">
<summary>
Converts an array of ChartDirector colors to an array of .NET System.Drawing.Color objects.
</summary>
<param name="colors">
An array of ChartDirector colors.
</param>
</member>
<member name="M:ChartDirector.Chart.glassEffect">
<summary>
A complex shading effect that emulates tinted glass or semi-transparent plastic material.
</summary>
</member>
<member name="M:ChartDirector.Chart.glassEffect(System.Int32)">
<summary>
A complex shading effect that emulates tinted glass or semi-transparent plastic material.
</summary>
<param name="glareSize">
The amount of glare. Must be one of the predefined constants "NormalGlare", "ReducedGlare" or "NoGlare". With NormalGlare and ReducedGlare, the glare will cover around 50% and 35% of the object. If NoGlare is used, there will be no glare and the effect will not look like glass at all, but is equivalent to the "Chart.softLighting" effect.
</param>
</member>
<member name="M:ChartDirector.Chart.glassEffect(System.Int32,System.Int32)">
<summary>
A complex shading effect that emulates tinted glass or semi-transparent plastic material.
</summary>
<param name="glareSize">
The amount of glare. Must be one of the predefined constants "NormalGlare", "ReducedGlare" or "NoGlare". With NormalGlare and ReducedGlare, the glare will cover around 50% and 35% of the object. If NoGlare is used, there will be no glare and the effect will not look like glass at all, but is equivalent to the "Chart.softLighting" effect.
</param>
<param name="glareDirection">
The direction of the glare, which must be one of the predefined constants "Top", "Right", "Bottom", "Left".
</param>
</member>
<member name="M:ChartDirector.Chart.glassEffect(System.Int32,System.Int32,System.Int32)">
<summary>
A complex shading effect that emulates tinted glass or semi-transparent plastic material.
</summary>
<param name="glareSize">
The amount of glare. Must be one of the predefined constants "NormalGlare", "ReducedGlare" or "NoGlare". With NormalGlare and ReducedGlare, the glare will cover around 50% and 35% of the object. If NoGlare is used, there will be no glare and the effect will not look like glass at all, but is equivalent to the "Chart.softLighting" effect.
</param>
<param name="glareDirection">
The direction of the glare, which must be one of the predefined constants "Top", "Right", "Bottom", "Left".
</param>
<param name="raisedEffect">
With glass shading effect, the object will appear to have some 3D depth. The raisedEffect argument controls the amount of 3D depth in pixels.
</param>
</member>
<member name="M:ChartDirector.Chart.softLighting">
<summary>
A special shading effect that looks like gradient coloring.
</summary>
</member>
<member name="M:ChartDirector.Chart.softLighting(System.Int32)">
<summary>
A special shading effect that looks like gradient coloring.
</summary>
<param name="direction">
The direction of the lighting, which must be one of the predefined constants "Top", "Bottom", "Right" or "Left".
</param>
</member>
<member name="M:ChartDirector.Chart.softLighting(System.Int32,System.Int32)">
<summary>
A special shading effect that looks like gradient coloring.
</summary>
<param name="direction">
The direction of the lighting, which must be one of the predefined constants "Top", "Bottom", "Right" or "Left".
</param>
<param name="raisedEffect">
With soft lighting effect, the object will appear to have some 3D depth. The raisedEffect argument controls the amount of 3D depth in pixels.
</param>
</member>
<member name="M:ChartDirector.Chart.barLighting">
<summary>
A special shading effect for rectangular and polygonal bars on a "BarLayer". It shades all surfaces of a 2D or 3D bar with gradient colors.
</summary>
</member>
<member name="M:ChartDirector.Chart.barLighting(System.Double,System.Double)">
<summary>
A special shading effect for rectangular and polygonal bars on a "BarLayer". It shades all surfaces of a 2D or 3D bar with gradient colors.
</summary>
<param name="startBrightness">
The brightness at the starting point.
</param>
<param name="endBrightness">
The brightness at the ending point.
</param>
</member>
<member name="M:ChartDirector.Chart.cylinderEffect">
<summary>
A special shading effect that emulates the lighting of a cylinder surface.
</summary>
</member>
<member name="M:ChartDirector.Chart.cylinderEffect(System.Int32)">
<summary>
A special shading effect that emulates the lighting of a cylinder surface.
</summary>
<param name="orientation">
The orientation of the cylinder.
</param>
</member>
<member name="M:ChartDirector.Chart.cylinderEffect(System.Int32,System.Double,System.Double,System.Double,System.Int32)">
<summary>
A special shading effect that emulates the lighting of a cylinder surface.
</summary>
<param name="orientation">
The orientation of the cylinder.
</param>
<param name="ambientIntensity">
The ambient reflection coefficient of the Phong lighting model.
</param>
<param name="diffuseIntensity">
The diffuse reflection coefficient of the Phong lighting model.
</param>
<param name="specularIntensity">
The specular reflection coefficient of the Phong lighting model.
</param>
<param name="shininess">
The shininess coefficient of the Phong lighting model.
</param>
</member>
<member name="M:ChartDirector.Chart.flatBorder(System.Int32)">
<summary>
Specifies a flat border of a given width.
</summary>
<param name="width">
The border width. A positive value means the border is drawn inside the box or bar. A negative value means the border is outside the box or bar.
</param>
</member>
<member name="M:ChartDirector.Chart.phongLighting">
<summary>
Sets the parameters for the phong lighting effect.
</summary>
</member>
<member name="M:ChartDirector.Chart.phongLighting(System.Double,System.Double,System.Double,System.Int32)">
<summary>
Sets the parameters for the phong lighting effect.
</summary>
<param name="ambientIntensity">
The ambient reflection coefficient of the Phong lighting model.
</param>
<param name="diffuseIntensity">
The diffuse reflection coefficient of the Phong lighting model.
</param>
<param name="specularIntensity">
The specular reflection coefficient of the Phong lighting model.
</param>
<param name="shininess">
The shininess coefficient of the Phong lighting model.
</param>
</member>
<member name="M:ChartDirector.Chart.PolygonShape(System.Int32)">
<summary>
Gets the shape id that represents a polygon.
</summary>
<param name="side">
The number of sides the polygon has.
</param>
</member>
<member name="M:ChartDirector.Chart.Polygon2Shape(System.Int32)">
<summary>
Gets the shape id that represents a polygon in an alternative orientation.
</summary>
<param name="side">
The number of sides the polygon has.
</param>
</member>
<member name="M:ChartDirector.Chart.StarShape(System.Int32)">
<summary>
Gets the shape id that represents a star shape.
</summary>
<param name="side">
The number of points the polygon has.
</param>
</member>
<member name="M:ChartDirector.Chart.CrossShape(System.Double)">
<summary>
Gets the shape id that represents a '+' shape.
</summary>
<param name="width">
The width of the arms of the a '+' as a ratio to the size of the shape. Must be between 0 and 1.
</param>
</member>
<member name="M:ChartDirector.Chart.Cross2Shape(System.Double)">
<summary>
Gets the shape id that represents a 'X' shape.
</summary>
<param name="width">
The width of the arms of the a 'X' as a ratio to the size of the shape. Must be between 0 and 1.
</param>
</member>
<member name="M:ChartDirector.Chart.ArrowShape">
<summary>
Gets the shape id that represents an arrow shape.
</summary>
</member>
<member name="M:ChartDirector.Chart.ArrowShape(System.Double)">
<summary>
Gets the shape id that represents an arrow shape.
</summary>
<param name="angle">
The clockwise angle of the arrow relative to the upward pointing position.
</param>
</member>
<member name="M:ChartDirector.Chart.ArrowShape(System.Double,System.Double)">
<summary>
Gets the shape id that represents an arrow shape.
</summary>
<param name="angle">
The clockwise angle of the arrow relative to the upward pointing position.
</param>
<param name="widthRatio">
The width of the base of the arrow head as a ratio to the height of the entire arrow. Must be between 0 and 1.
</param>
</member>
<member name="M:ChartDirector.Chart.ArrowShape(System.Double,System.Double,System.Double)">
<summary>
Gets the shape id that represents an arrow shape.
</summary>
<param name="angle">
The clockwise angle of the arrow relative to the upward pointing position.
</param>
<param name="widthRatio">
The width of the base of the arrow head as a ratio to the height of the entire arrow. Must be between 0 and 1.
</param>
<param name="stemWidthRatio">
The width of the arrow stem as a ratio to the width of the base of the arrow head. Must be between 0 and 1.
</param>
</member>
<member name="M:ChartDirector.Chart.ArrowShape(System.Double,System.Double,System.Double,System.Double)">
<summary>
Gets the shape id that represents an arrow shape.
</summary>
<param name="angle">
The clockwise angle of the arrow relative to the upward pointing position.
</param>
<param name="widthRatio">
The width of the base of the arrow head as a ratio to the height of the entire arrow. Must be between 0 and 1.
</param>
<param name="stemWidthRatio">
The width of the arrow stem as a ratio to the width of the base of the arrow head. Must be between 0 and 1.
</param>
<param name="stemLengthRatio">
The length of the arrow stem as a ratio to the height of the entire arrow. Must be between 0 and 1.
</param>
</member>
<member name="M:ChartDirector.Chart.PolynomialRegression(System.Int32)">
<summary>
Sets the degree of the polynomial regression to be used in a trend layer.
</summary>
<param name="n">
The degree of the polynomial.
</param>
</member>
<member name="M:ChartDirector.Chart.StartOfSecondFilter">
<summary>
Creates a data filter that matches date/times that represent the start of a new second in a date/time series.
</summary>
</member>
<member name="M:ChartDirector.Chart.StartOfSecondFilter(System.Int32)">
<summary>
Creates a data filter that matches date/times that represent the start of a new second in a date/time series.
</summary>
<param name="labelStep">
For dates/times that matches the start of second criteria, picks only 1 out of every "labelStep" number of elements. For example, if this argument is 3, only 1 of every 3 elements that at at the start of second will be selected.
</param>
</member>
<member name="M:ChartDirector.Chart.StartOfSecondFilter(System.Int32,System.Double)">
<summary>
Creates a data filter that matches date/times that represent the start of a new second in a date/time series.
</summary>
<param name="labelStep">
For dates/times that matches the start of second criteria, picks only 1 out of every "labelStep" number of elements. For example, if this argument is 3, only 1 of every 3 elements that at at the start of second will be selected.
</param>
<param name="initialMargin">
If the first label is "near" the exact starting instance of the current second to within the ratio specified in the initial margin, it will be considered to have matched the start of second criteria.
</param>
</member>
<member name="M:ChartDirector.Chart.StartOfMinuteFilter">
<summary>
Creates a data filter that matches date/times that represent the start of a new minute in a date/time series.
</summary>
</member>
<member name="M:ChartDirector.Chart.StartOfMinuteFilter(System.Int32)">
<summary>
Creates a data filter that matches date/times that represent the start of a new minute in a date/time series.
</summary>
<param name="labelStep">
For dates/times that matches the start of minute criteria, picks only 1 out of every "labelStep" number of elements. For example, if this argument is 3, only 1 of every 3 elements that at at the start of minute will be selected.
</param>
</member>
<member name="M:ChartDirector.Chart.StartOfMinuteFilter(System.Int32,System.Double)">
<summary>
Creates a data filter that matches date/times that represent the start of a new minute in a date/time series.
</summary>
<param name="labelStep">
For dates/times that matches the start of minute criteria, picks only 1 out of every "labelStep" number of elements. For example, if this argument is 3, only 1 of every 3 elements that at at the start of minute will be selected.
</param>
<param name="initialMargin">
If the first label is "near" the exact starting instance of the current minute to within the ratio specified in the initial margin, it will be considered to have matched the start of minute criteria.
</param>
</member>
<member name="M:ChartDirector.Chart.StartOfHourFilter">
<summary>
Creates a data filter that matches date/times that represent the start of a new hour in a date/time series.
</summary>
</member>
<member name="M:ChartDirector.Chart.StartOfHourFilter(System.Int32)">
<summary>
Creates a data filter that matches date/times that represent the start of a new hour in a date/time series.
</summary>
<param name="labelStep">
For dates/times that matches the start of hour criteria, picks only 1 out of every "labelStep" number of elements. For example, if this argument is 3, only 1 of every 3 elements that at at the start of hour will be selected.
</param>
</member>
<member name="M:ChartDirector.Chart.StartOfHourFilter(System.Int32,System.Double)">
<summary>
Creates a data filter that matches date/times that represent the start of a new hour in a date/time series.
</summary>
<param name="labelStep">
For dates/times that matches the start of hour criteria, picks only 1 out of every "labelStep" number of elements. For example, if this argument is 3, only 1 of every 3 elements that at at the start of hour will be selected.
</param>
<param name="initialMargin">
If the first label is "near" the exact starting instance of the current hour to within the ratio specified in the initial margin, it will be considered to have matched the start of hour criteria.
</param>
</member>
<member name="M:ChartDirector.Chart.StartOfDayFilter">
<summary>
Creates a data filter that matches date/times that represent the start of a new day in a date/time series.
</summary>
</member>
<member name="M:ChartDirector.Chart.StartOfDayFilter(System.Int32)">
<summary>
Creates a data filter that matches date/times that represent the start of a new day in a date/time series.
</summary>
<param name="labelStep">
For dates/times that matches the start of day criteria, picks only 1 out of every "labelStep" number of elements. For example, if this argument is 3, only 1 of every 3 elements that at at the start of day will be selected.
</param>
</member>
<member name="M:ChartDirector.Chart.StartOfDayFilter(System.Int32,System.Double)">
<summary>
Creates a data filter that matches date/times that represent the start of a new day in a date/time series.
</summary>
<param name="labelStep">
For dates/times that matches the start of day criteria, picks only 1 out of every "labelStep" number of elements. For example, if this argument is 3, only 1 of every 3 elements that at at the start of day will be selected.
</param>
<param name="initialMargin">
If the first label is "near" the exact starting instance of the current day to within the ratio specified in the initial margin, it will be considered to have matched the start of day criteria.
</param>
</member>
<member name="M:ChartDirector.Chart.StartOfWeekFilter">
<summary>
Creates a data filter that matches date/times that represent the start of a new week in a date/time series.
</summary>
</member>
<member name="M:ChartDirector.Chart.StartOfWeekFilter(System.Int32)">
<summary>
Creates a data filter that matches date/times that represent the start of a new week in a date/time series.
</summary>
<param name="labelStep">
For dates/times that matches the start of week criteria, picks only 1 out of every "labelStep" number of elements. For example, if this argument is 3, only 1 of every 3 elements that at at the start of week will be selected.
</param>
</member>
<member name="M:ChartDirector.Chart.StartOfWeekFilter(System.Int32,System.Double)">
<summary>
Creates a data filter that matches date/times that represent the start of a new week in a date/time series.
</summary>
<param name="labelStep">
For dates/times that matches the start of week criteria, picks only 1 out of every "labelStep" number of elements. For example, if this argument is 3, only 1 of every 3 elements that at at the start of week will be selected.
</param>
<param name="initialMargin">
If the first label is "near" the exact starting instance of the current week to within the ratio specified in the initial margin, it will be considered to have matched the start of week criteria.
</param>
</member>
<member name="M:ChartDirector.Chart.StartOfMonthFilter">
<summary>
Creates a data filter that matches date/times that represent the start of a new month in a date/time series.
</summary>
</member>
<member name="M:ChartDirector.Chart.StartOfMonthFilter(System.Int32)">
<summary>
Creates a data filter that matches date/times that represent the start of a new month in a date/time series.
</summary>
<param name="labelStep">
For dates/times that matches the start of month criteria, picks only 1 out of every "labelStep" number of elements. For example, if this argument is 3, only 1 of every 3 elements that at at the start of month will be selected.
</param>
</member>
<member name="M:ChartDirector.Chart.StartOfMonthFilter(System.Int32,System.Double)">
<summary>
Creates a data filter that matches date/times that represent the start of a new month in a date/time series.
</summary>
<param name="labelStep">
For dates/times that matches the start of month criteria, picks only 1 out of every "labelStep" number of elements. For example, if this argument is 3, only 1 of every 3 elements that at at the start of month will be selected.
</param>
<param name="initialMargin">
If the first label is "near" the exact starting instance of the current month to within the ratio specified in the initial margin, it will be considered to have matched the start of month criteria.
</param>
</member>
<member name="M:ChartDirector.Chart.StartOfYearFilter">
<summary>
Creates a data filter that matches date/times that represent the start of a new year in a date/time series.
</summary>
</member>
<member name="M:ChartDirector.Chart.StartOfYearFilter(System.Int32)">
<summary>
Creates a data filter that matches date/times that represent the start of a new year in a date/time series.
</summary>
<param name="labelStep">
For dates/times that matches the start of year criteria, picks only 1 out of every "labelStep" number of elements. For example, if this argument is 3, only 1 of every 3 elements that at at the start of year will be selected.
</param>
</member>
<member name="M:ChartDirector.Chart.StartOfYearFilter(System.Int32,System.Double)">
<summary>
Creates a data filter that matches date/times that represent the start of a new year in a date/time series.
</summary>
<param name="labelStep">
For dates/times that matches the start of year criteria, picks only 1 out of every "labelStep" number of elements. For example, if this argument is 3, only 1 of every 3 elements that at at the start of year will be selected.
</param>
<param name="initialMargin">
If the first label is "near" the exact starting instance of the current year to within the ratio specified in the initial margin, it will be considered to have matched the start of year criteria.
</param>
</member>
<member name="M:ChartDirector.Chart.RegularSpacingFilter">
<summary>
Creates a data filter that matches 1 out of every N elements.
</summary>
</member>
<member name="M:ChartDirector.Chart.RegularSpacingFilter(System.Int32)">
<summary>
Creates a data filter that matches 1 out of every N elements.
</summary>
<param name="labelStep">
Picks 1 out of every "labelStep" number of elements. For example, if this argument is 3, only 1 of every 3 elements will be selected.
</param>
</member>
<member name="M:ChartDirector.Chart.RegularSpacingFilter(System.Int32,System.Double)">
<summary>
Creates a data filter that matches 1 out of every N elements.
</summary>
<param name="labelStep">
Picks 1 out of every "labelStep" number of elements. For example, if this argument is 3, only 1 of every 3 elements will be selected.
</param>
<param name="initialMargin">
Adds an offset when determining the elements to be selected. For example, if the <b>labelStep</b> is 3, the selected indexes should be 0, 3, 6, 9, .... If <b>initialMargin</b> is set to 1, the indexes becomes 1, 4, 7, 10, ....
</param>
</member>
<member name="M:ChartDirector.Chart.AllPassFilter">
<summary>
Creates a data filter that matches every element.
</summary>
</member>
<member name="M:ChartDirector.Chart.NonePassFilter">
<summary>
Creates a data filter that matches no element.
</summary>
</member>
<member name="M:ChartDirector.Chart.SelectItemFilter(System.Int32)">
<summary>
Creates a data filter that matches the specified item.
</summary>
<param name="item">
The index of the specified item.
</param>
</member>
<member name="M:ChartDirector.Chart.bSearch(System.Array,System.Object)">
<summary>
Uses binary search to search for a value in an array.
</summary>
<param name="a">
The array to be searched.
</param>
<param name="v">
The value to search for.
</param>
</member>
<member name="M:ChartDirector.Chart.arraySlice(System.Array,System.Int32,System.Int32)">
<summary>
Creates a new array with the elements copied from a part of a given array.
</summary>
<param name="a">
The array to be copied.
</param>
<param name="startIndex">
The array index to start copying from.
</param>
<param name="len">
The number of elements to copy.
</param>
</member>
<member name="P:ChartDirector.WinChartViewer.Chart">
<summary>
Gets or sets a "BaseChart" object to be used with the WinChartViewer.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.Image">
<summary>
Gets or sets the chart image to view.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.ChartSizeMode">
<summary>
Determine the sizing method of the chart image.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.ImageMap">
<summary>
Gets or sets the image map that defines the hot spots on the chart image.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.DefaultToolTip">
<summary>
Gets or sets the tool tip to display when the mouse is over the WinChartViewer control but not over a hot spot. If the mouse cursor is over a hot spot, the tool tip specified in the image map will be displayed instead.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.AutomaticDelay">
<summary>
Gets or sets the automatic delay (in milliseconds) of the tool tip.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.AutoPopDelay">
<summary>
Gets or sets the period of time (in milliseconds) that the tool tip remains visible if the mouse cursor is stationary.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.InitialDelay">
<summary>
Gets or sets the period of time (in milliseconds) that passes before the tool tip appears.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.ReshowDelay">
<summary>
Gets or sets the length of time (in milliseconds) that must transpire before subsequent tool tip windows can appear as the mouse cursor moves from one tool tip location to another.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.ChartMouseX">
<summary>
Gets the mouse  x-coordinate in the chart pixel coordinate system.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.ChartMouseY">
<summary>
Gets the mouse  y-coordinate in the chart pixel coordinate system.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.PlotAreaMouseX">
<summary>
Gets the mouse  x-coordinate on the plot area in the chart pixel coordinate system.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.PlotAreaMouseY">
<summary>
Gets the mouse  y-coordinate on the plot area in the chart pixel coordinate system.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.ViewPortLeft">
<summary>
Gets or sets the position of the left side of the viewport.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.ViewPortTop">
<summary>
Gets or sets the position of the top side of the viewport.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.ViewPortWidth">
<summary>
Gets or sets the width of the viewport.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.ViewPortHeight">
<summary>
Gets or sets the height of the viewport.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.MouseUsage">
<summary>
Gets or sets the mouse usage mode.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.ZoomDirection">
<summary>
Gets or sets the zoom direction for mouse zoom in/out actions.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.ScrollDirection">
<summary>
Gets or sets the scroll direction for mouse scroll actions.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.ZoomInRatio">
<summary>
Gets or sets the magnification ratio for each zoom in click of the mouse.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.ZoomOutRatio">
<summary>
Gets or sets the magnification ratio for each zoom out click of the mouse.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.MouseWheelZoomRatio">
<summary>
Gets or sets the magnification ratio for each mouse wheel event.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.MouseWheelAutoFocus">
<summary>
Determines whether to automatically grab the focus to support mouse wheel zooming.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.ZoomInWidthLimit">
<summary>
Gets or sets the viewport width at maximum zoom in.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.ZoomOutWidthLimit">
<summary>
Gets or sets the viewport width at maximum zoom out.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.ZoomInHeightLimit">
<summary>
Gets or sets the viewport height at maximum zoom in.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.ZoomOutHeightLimit">
<summary>
Gets or sets the viewport height at maximum zoom out.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.MinimumDrag">
<summary>
Gets or sets the minimum mouse drag distance before it is considered as an intentional drag.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.SelectionBorderWidth">
<summary>
Gets or sets the border width of the zoom selection box.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.SelectionBorderColor">
<summary>
Gets or sets the border color of the zoom selection box as a System.Drawing.Color.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.Cursor">
<summary>
Gets or sets the cursor that is displayed when the mouse cursor is over the WinChartViewer control but not over a normal hot spot. If the mouse cursor is over a normal hot spot, the "WinChartViewer.HotSpotCursor" will be displayed instead.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.HotSpotCursor">
<summary>
Gets or sets the cursor that is displayed when the mouse cursor is over a normal hot spot.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.ZoomInCursor">
<summary>
Gets or sets the mouse cursor to be used when the mouse is used for zoom in.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.ZoomOutCursor">
<summary>
Gets or sets the mouse cursor to be used when the mouse is used for zoom out.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.NoZoomCursor">
<summary>
Gets or sets the mouse cursor to be used when the mouse is used for zoom in/out, but the zoom in/out limits has been reached.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.ScrollCursor">
<summary>
Gets or sets the mouse cursor to be used when the mouse is used for scrolling.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.UpdateInterval">
<summary>
Gets or sets the minimum gap interval between two ViewPortChanged events in milliseconds.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.IsMouseOnPlotArea">
<summary>
Checks if the mouse cursor is on the extended plot area.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.IsMouseDragging">
<summary>
Checks if the mouse is dragging on the plot area.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.IsInMouseMoveEvent">
<summary>
Checks if the current code is executing in a MouseMoveChart or MouseMovePlotArea event.
</summary>
</member>
<member name="P:ChartDirector.WinChartViewer.IsInViewPortChangedEvent">
<summary>
Checks if the current code is executing in a ViewPortChanged event.
</summary>
</member>
<member name="E:ChartDirector.WinChartViewer.MouseMoveChart">
<summary>
This event occurs when the mouse cursor moves over the chart.
</summary>
</member>
<member name="E:ChartDirector.WinChartViewer.MouseLeaveChart">
<summary>
This event occurs when the mouse cursor leaves the chart.
</summary>
</member>
<member name="E:ChartDirector.WinChartViewer.MouseMovePlotArea">
<summary>
This event occurs when the mouse cursor moves over the extended plot area.
</summary>
</member>
<member name="E:ChartDirector.WinChartViewer.MouseLeavePlotArea">
<summary>
This event occurs when the mouse cursor leaves the extended plot area.
</summary>
</member>
<member name="E:ChartDirector.WinChartViewer.ClickHotSpot">
<summary>
This event occurs when the mouse clicks on a hot spot on the chart image.
</summary>
</member>
<member name="E:ChartDirector.WinChartViewer.DoubleClickHotSpot">
<summary>
This event occurs when the mouse double clicks on a hot spot on the chart image.
</summary>
</member>
<member name="E:ChartDirector.WinChartViewer.MouseEnterHotSpot">
<summary>
This event occurs when the mouse cursor enters a hot spot on the chart image.
</summary>
</member>
<member name="E:ChartDirector.WinChartViewer.MouseMoveHotSpot">
<summary>
This event occurs when the mouse cursor moves over a hot spot on the chart image.
</summary>
</member>
<member name="E:ChartDirector.WinChartViewer.MouseHoverHotSpot">
<summary>
This event occurs when the mouse cursor hovers a hot spot on the chart image.
</summary>
</member>
<member name="E:ChartDirector.WinChartViewer.MouseLeaveHotSpot">
<summary>
This event occurs when the mouse cursor leaves a hot spot on the chart image.
</summary>
</member>
<member name="E:ChartDirector.WinChartViewer.MouseDownHotSpot">
<summary>
This event occurs when the mouse cursor is over a hot spot on the chart image and the mouse button is pressed.
</summary>
</member>
<member name="E:ChartDirector.WinChartViewer.MouseUpHotSpot">
<summary>
This event occurs when the mouse cursor is over a hot spot on the chart image and the mouse button is released.
</summary>
</member>
<member name="E:ChartDirector.WinChartViewer.ViewPortChanged">
<summary>
This event occurs when the viewport is changed through mouse actions, or when "WinChartViewer.updateViewPort" is called.
</summary>
</member>
<member name="E:ChartDirector.WinChartViewer.SelectionChanged">
<summary>
This event occurs when the user is selecting a region on the chart using "drag to select" mouse actions.
</summary>
</member>
<member name="P:ChartDirector.WinHotSpotEventArgs.Item">
<summary>
Gets or sets the value of the specified attribute. In C#, this property is the indexer of the class.
</summary>
</member>
<member name="P:ChartDirector.WinHotSpotEventArgs.AttrValues">
<summary>
Gets a Hashtable containing all attributes and values associated with the hot spot.
</summary>
</member>
<member name="P:ChartDirector.WinViewPortEventArgs.NeedUpdateChart">
<summary>
Determines if the chart needs to be updated.
</summary>
</member>
<member name="P:ChartDirector.WinViewPortEventArgs.NeedUpdateImageMap">
<summary>
Determines if the image map needs to be updated.
</summary>
</member>
<member name="P:ChartDirector.WinSelectionEventArgs.Visible">
<summary>
Determines if the selection rectangle is visible.
</summary>
</member>
<member name="P:ChartDirector.WinSelectionEventArgs.ViewPortLeft">
<summary>
Gets the position of the left edge of the selection rectangle in viewport units.
</summary>
</member>
<member name="P:ChartDirector.WinSelectionEventArgs.ViewPortTop">
<summary>
Gets the position of the top edge of the selection rectangle in viewport units.
</summary>
</member>
<member name="P:ChartDirector.WinSelectionEventArgs.ViewPortWidth">
<summary>
Gets the width of the selection rectangle in viewport units.
</summary>
</member>
<member name="P:ChartDirector.WinSelectionEventArgs.ViewPortHeight">
<summary>
Gets the height of the selection rectangle in viewport units.
</summary>
</member>
<member name="P:ChartDirector.WinViewPortControl.DragInsideToMove">
<summary>
Enables or disables  dragging inside the viewport to move it.
</summary>
</member>
<member name="P:ChartDirector.WinViewPortControl.DragBorderToResize">
<summary>
Enables or disables  dragging the viewport border to resize it.
</summary>
</member>
<member name="P:ChartDirector.WinViewPortControl.DragOutsideToSelect">
<summary>
Enables or disables  dragging outside the viewport to select a new viewport.
</summary>
</member>
<member name="P:ChartDirector.WinViewPortControl.ClickToCenter">
<summary>
Enables or disables  centering the viewport at the clicked point.
</summary>
</member>
<member name="P:ChartDirector.WinViewPortControl.ViewPortExternalColor">
<summary>
Gets or sets the  fill color for the region outside the viewport.
</summary>
</member>
<member name="P:ChartDirector.WinViewPortControl.ViewPortFillColor">
<summary>
Gets or sets the  fill color for the region inside the viewport.
</summary>
</member>
<member name="P:ChartDirector.WinViewPortControl.ViewPortBorderColor">
<summary>
Gets or sets the  viewport border color.
</summary>
</member>
<member name="P:ChartDirector.WinViewPortControl.ViewPortBorderWidth">
<summary>
Gets or sets the  viewport border width.
</summary>
</member>
<member name="P:ChartDirector.WinViewPortControl.SelectionBorderColor">
<summary>
Gets or sets the  border color of the selection box.
</summary>
</member>
<member name="P:ChartDirector.WinViewPortControl.SelectionBorderWidth">
<summary>
Gets or sets the  border width of the selection box.
</summary>
</member>
<member name="P:ChartDirector.WinViewPortControl.ChartSizeMode">
<summary>
Determine the sizing method of the chart image.
</summary>
</member>
<member name="P:ChartDirector.WinViewPortControl.Chart">
<summary>
Gets or sets the "BaseChart" object for displaying in the control. The chart usually is an overall chart that includes the full data range.
</summary>
</member>
<member name="P:ChartDirector.WinViewPortControl.Viewer">
<summary>
Gets or Sets the "WinChartViewer" object to be associated with the WinViewPortControl.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.Image">
<summary>
Represent the chart image to be viewed.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.ImageMap">
<summary>
Gets or sets the image map associated with the chart.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.ChartModel">
<summary>
Gets or sets the "Javascript Chart Model" of the chart for the purpose of support track cursors.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.ChartMetrics">
<summary>
Gets or sets the chart metrics of the chart.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.ChartSizeMode">
<summary>
Determines the sizing method of the WebChartViewer control.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.ContentDisposition">
<summary>
The suggested filename to use when user saves the chart image as a file on the browser side.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.ImageSessionId">
<summary>
The session variable name used to temporarily store the chart image.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.ViewPortLeft">
<summary>
Gets or sets the position of the left side of the viewport.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.ViewPortTop">
<summary>
Gets or sets the position of the top side of the viewport.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.ViewPortWidth">
<summary>
Gets or sets the width of the viewport.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.ViewPortHeight">
<summary>
Gets or sets the height of the viewport.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.MouseUsage">
<summary>
Gets or sets the mouse usage mode.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.ZoomDirection">
<summary>
Gets or sets the zoom direction for mouse zoom in/out actions.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.ScrollDirection">
<summary>
Gets or sets the scroll direction for mouse scroll actions.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.ZoomInRatio">
<summary>
Gets or sets the magnification ratio for each zoom in click of the mouse.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.ZoomOutRatio">
<summary>
Gets or sets the magnification ratio for each zoom out click of the mouse.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.ZoomInWidthLimit">
<summary>
Gets or sets the viewport width at maximum zoom in.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.ZoomOutWidthLimit">
<summary>
Gets or sets the viewport width at maximum zoom out.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.ZoomInHeightLimit">
<summary>
Gets or sets the viewport height at maximum zoom in.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.ZoomOutHeightLimit">
<summary>
Gets or sets the viewport height at maximum zoom out.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.MinimumDrag">
<summary>
Gets or sets the minimum mouse drag distance before it is considered as an intentional drag.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.SelectionBorderWidth">
<summary>
Gets or sets the border width of the zoom selection box.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.SelectionBorderColor">
<summary>
Gets or sets the border color of the zoom selection box as an HTML color.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.ZoomInCursor">
<summary>
Gets or sets the mouse cursor to be used when the mouse is used for zoom in.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.ZoomOutCursor">
<summary>
Gets or sets the mouse cursor to be used when the mouse is used for zoom out.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.NoZoomCursor">
<summary>
Gets or sets the mouse cursor to be used when the mouse is used for zoom in/out, but the zoom in/out limits has been reached.
</summary>
</member>
<member name="P:ChartDirector.WebChartViewer.ScrollCursor">
<summary>
Gets or sets the mouse cursor to be used when the mouse is used for scrolling.
</summary>
</member>
<member name="E:ChartDirector.WebChartViewer.ClickHotSpot">
<summary>
This event occurs when the mouse is clicked on a hot spot of the chart image.
</summary>
</member>
<member name="E:ChartDirector.WebChartViewer.ViewPortChanged">
<summary>
This event occurs when the viewport is changed by mouse actions in the browser side Javascript ChartViewer ("JsChartViewer").
</summary>
</member>
<member name="P:ChartDirector.WebHotSpotEventArgs.Item">
<summary>
Gets or sets the value of the specified attribute. In C#, this property is the indexer of the class.
</summary>
</member>
<member name="P:ChartDirector.WebHotSpotEventArgs.AttrValues">
<summary>
Gets a Hashtable containing all attributes and values associated with the hot spot.
</summary>
</member>
<member name="P:ChartDirector.WebViewPortControl.Image">
<summary>
Represents the "overall chart" image.
</summary>
</member>
<member name="P:ChartDirector.WebViewPortControl.ChartSizeMode">
<summary>
Determines the sizing method of the WebViewPortControl control.
</summary>
</member>
<member name="P:ChartDirector.WebViewPortControl.ContentDisposition">
<summary>
The suggested filename to use when user saves the chart image as a file on the browser side.
</summary>
</member>
<member name="P:ChartDirector.WebViewPortControl.ImageSessionId">
<summary>
The session variable name used to temporarily store the chart image.
</summary>
</member>
<member name="P:ChartDirector.WebViewPortControl.ChartMetrics">
<summary>
Gets or sets the chart metrics of the chart.
</summary>
</member>
<member name="F:ChartDirector.Chart.NoValue">
<summary>
A constant equals to 1.7E+308 to represent missing values in ChartDirector.
</summary>
</member>
<member name="F:ChartDirector.Chart.BottomLeft">
<summary>
A constant equals to 1 to represent the bottom left position.
</summary>
</member>
<member name="F:ChartDirector.Chart.BottomCenter">
<summary>
A constant equals to 2 to represent the bottom center position.
</summary>
</member>
<member name="F:ChartDirector.Chart.BottomRight">
<summary>
A constant equals to 3 to represent the bottom right position.
</summary>
</member>
<member name="F:ChartDirector.Chart.Left">
<summary>
A constant equals to 4 to represent the left position.
</summary>
</member>
<member name="F:ChartDirector.Chart.Center">
<summary>
A constant equals to 5 to represent the center position.
</summary>
</member>
<member name="F:ChartDirector.Chart.Right">
<summary>
A constant equals to 6 to represent the right position.
</summary>
</member>
<member name="F:ChartDirector.Chart.TopLeft">
<summary>
A constant equals to 7 to represent the top left position.
</summary>
</member>
<member name="F:ChartDirector.Chart.TopCenter">
<summary>
A constant equals to 8 to represent the top center position.
</summary>
</member>
<member name="F:ChartDirector.Chart.TopRight">
<summary>
A constant equals to 9 to represent the top right position.
</summary>
</member>
<member name="F:ChartDirector.Chart.Bottom">
<summary>
A constant equals to 2 to represent the bottom position.
</summary>
</member>
<member name="F:ChartDirector.Chart.Top">
<summary>
A constant equals to 8 to represent the top position.
</summary>
</member>
<member name="F:ChartDirector.Chart.TopLeft2">
<summary>
A constant equals to 10 to represent the alternative exterior top left position.
</summary>
</member>
<member name="F:ChartDirector.Chart.TopRight2">
<summary>
A constant equals to 11 to represent the alternative exterior top right position.
</summary>
</member>
<member name="F:ChartDirector.Chart.BottomLeft2">
<summary>
A constant equals to 12 to represent the alternative exterior bottom left position.
</summary>
</member>
<member name="F:ChartDirector.Chart.BottomRight2">
<summary>
A constant equals to 13 to represent the alternative exterior bottom right position.
</summary>
</member>
<member name="F:ChartDirector.Chart.Transparent">
<summary>
A constant equals to FF000000 (in hex) to represent the transparent color.
</summary>
</member>
<member name="F:ChartDirector.Chart.BackgroundColor">
<summary>
A constant equals to FFFF0000 (in hex) to represent the background color.
</summary>
</member>
<member name="F:ChartDirector.Chart.LineColor">
<summary>
A constant equals to FFFF0001 (in hex) to represent the default line color.
</summary>
</member>
<member name="F:ChartDirector.Chart.TextColor">
<summary>
A constant equals to FFFF0002 (in hex) to represent the default text color.
</summary>
</member>
<member name="F:ChartDirector.Chart.SameAsMainColor">
<summary>
A constant equals to FFFF0007 (in hex) to represent the current main color.
</summary>
</member>
<member name="F:ChartDirector.Chart.Palette">
<summary>
A constant equals to FFFF0000 (in hex) to represent the starting index of the color palette.
</summary>
</member>
<member name="F:ChartDirector.Chart.DataColor">
<summary>
A constant equals to FFFF0008 (in hex) to represent the starting index of automatic data color.
</summary>
</member>
<member name="F:ChartDirector.Chart.defaultPalette">
<summary>
A constant array of integers to represent the default palette.
</summary>
</member>
<member name="F:ChartDirector.Chart.whiteOnBlackPalette">
<summary>
A constant array of integers to represent the white on black palette.
</summary>
</member>
<member name="F:ChartDirector.Chart.transparentPalette">
<summary>
A constant array of integers to represent the semi-transparent palette.
</summary>
</member>
<member name="F:ChartDirector.Chart.NormalGlare">
<summary>
A constant equals to   3 to represent   using normal glare strength in "Chart.glassEffect" shading style.
</summary>
</member>
<member name="F:ChartDirector.Chart.ReducedGlare">
<summary>
A constant equals to   2 to represent   using reduced glare strength in "Chart.glassEffect" shading style.
</summary>
</member>
<member name="F:ChartDirector.Chart.NoGlare">
<summary>
A constant equals to   1 to represent   disabling the glare in "Chart.glassEffect" shading style.
</summary>
</member>
<member name="F:ChartDirector.Chart.DashLine">
<summary>
A constant equals to 0505 (in hex) to represent a dash line pattern for use in dash colors.
</summary>
</member>
<member name="F:ChartDirector.Chart.DotLine">
<summary>
A constant equals to 0202 (in hex) to represent a dotted line pattern for use in dash colors.
</summary>
</member>
<member name="F:ChartDirector.Chart.DotDashLine">
<summary>
A constant equals to 05050205 (in hex) to represent a dot-dash line pattern for use in dash colors.
</summary>
</member>
<member name="F:ChartDirector.Chart.AltDashLine">
<summary>
A constant equals to 0A050505 (in hex) to represent a alternating long/short dash line pattern for use in dash colors.
</summary>
</member>
<member name="F:ChartDirector.Chart.goldGradient">
<summary>
A constant array of integers to represent  a gradient that looks like a golden color.
</summary>
</member>
<member name="F:ChartDirector.Chart.silverGradient">
<summary>
A constant array of integers to represent  a gradient that looks like a silver color.
</summary>
</member>
<member name="F:ChartDirector.Chart.redMetalGradient">
<summary>
A constant array of integers to represent  a gradient that looks like a red metallic color.
</summary>
</member>
<member name="F:ChartDirector.Chart.blueMetalGradient">
<summary>
A constant array of integers to represent  a gradient that looks like a blue metallic color.
</summary>
</member>
<member name="F:ChartDirector.Chart.greenMetalGradient">
<summary>
A constant array of integers to represent  a gradient that looks like a green metallic color.
</summary>
</member>
<member name="F:ChartDirector.Chart.SquareShape">
<summary>
A constant equals to 1 to represent a square.
</summary>
</member>
<member name="F:ChartDirector.Chart.DiamondShape">
<summary>
A constant equals to 2 to represent a diamond shape.
</summary>
</member>
<member name="F:ChartDirector.Chart.TriangleShape">
<summary>
A constant equals to 3 to represent a triangle pointing upwards.
</summary>
</member>
<member name="F:ChartDirector.Chart.RightTriangleShape">
<summary>
A constant equals to 4 to represent a triangle pointing rightwards.
</summary>
</member>
<member name="F:ChartDirector.Chart.LeftTriangleShape">
<summary>
A constant equals to 5 to represent a triangle pointing leftwards.
</summary>
</member>
<member name="F:ChartDirector.Chart.InvertedTriangleShape">
<summary>
A constant equals to 6 to represent a triangle pointing downwards.
</summary>
</member>
<member name="F:ChartDirector.Chart.CircleShape">
<summary>
A constant equals to 7 to represent a circle.
</summary>
</member>
<member name="F:ChartDirector.Chart.GlassSphereShape">
<summary>
A constant equals to 15 to represent a glass sphere.
</summary>
</member>
<member name="F:ChartDirector.Chart.GlassSphere2Shape">
<summary>
A constant equals to 16 to represent a bright glass sphere.
</summary>
</member>
<member name="F:ChartDirector.Chart.SolidSphereShape">
<summary>
A constant equals to 17 to represent a solid sphere.
</summary>
</member>
<member name="F:ChartDirector.Chart.DefaultShading">
<summary>
A constant equals to 0 to represent default sector shading style.
</summary>
</member>
<member name="F:ChartDirector.Chart.FlatShading">
<summary>
A constant equals to 1 to represent flat sector shading style.
</summary>
</member>
<member name="F:ChartDirector.Chart.LocalGradientShading">
<summary>
A constant equals to 2 to represent local gradient sector shading style.
</summary>
</member>
<member name="F:ChartDirector.Chart.GlobalGradientShading">
<summary>
A constant equals to 3 to represent global gradient sector shading style.
</summary>
</member>
<member name="F:ChartDirector.Chart.ConcaveShading">
<summary>
A constant equals to 4 to represent concave sector shading style.
</summary>
</member>
<member name="F:ChartDirector.Chart.RoundedEdgeShading">
<summary>
A constant equals to 6 to represent rounded edge sector shading style.
</summary>
</member>
<member name="F:ChartDirector.Chart.RadialShading">
<summary>
A constant equals to 7 to represent radial sector shading style.
</summary>
</member>
<member name="F:ChartDirector.Chart.RingShading">
<summary>
A constant equals to 8 to represent ring sector shading style.
</summary>
</member>
<member name="F:ChartDirector.Chart.SmoothShading">
<summary>
A constant equals to 0 to represent smooth surface shading style.
</summary>
</member>
<member name="F:ChartDirector.Chart.TriangularShading">
<summary>
A constant equals to 1 to represent triangular surface shading style.
</summary>
</member>
<member name="F:ChartDirector.Chart.RectangularShading">
<summary>
A constant equals to 2 to represent rectangular surface shading style.
</summary>
</member>
<member name="F:ChartDirector.Chart.TriangularFrame">
<summary>
A constant equals to 3 to represent triangular frame only surface shading style.
</summary>
</member>
<member name="F:ChartDirector.Chart.RectangularFrame">
<summary>
A constant equals to 4 to represent rectangular frame only surface shading style.
</summary>
</member>
<member name="F:ChartDirector.Chart.DiamondPointer">
<summary>
A constant equals to 0 to represent the diamond style meter pointer.
</summary>
</member>
<member name="F:ChartDirector.Chart.TriangularPointer">
<summary>
A constant equals to 1 to represent the triangular style meter pointer.
</summary>
</member>
<member name="F:ChartDirector.Chart.ArrowPointer">
<summary>
A constant equals to 2 to represent the arrow style meter pointer.
</summary>
</member>
<member name="F:ChartDirector.Chart.ArrowPointer2">
<summary>
A constant equals to 3 to represent the alternative arrow style meter pointer.
</summary>
</member>
<member name="F:ChartDirector.Chart.LinePointer">
<summary>
A constant equals to 4 to represent the line style meter pointer.
</summary>
</member>
<member name="F:ChartDirector.Chart.PencilPointer">
<summary>
A constant equals to 5 to represent the pencil style meter pointer.
</summary>
</member>
<member name="F:ChartDirector.Chart.TriangularPointer2">
<summary>
A constant equals to 6 to represent the new triangular style meter pointer.
</summary>
</member>
<member name="F:ChartDirector.Chart.LinePointer2">
<summary>
A constant equals to 7 to represent the new line style meter pointer.
</summary>
</member>
<member name="F:ChartDirector.Chart.PNG">
<summary>
A constant equals to 0 to represent the PNG image format.
</summary>
</member>
<member name="F:ChartDirector.Chart.GIF">
<summary>
A constant equals to 1 to represent the GIF image format.
</summary>
</member>
<member name="F:ChartDirector.Chart.JPG">
<summary>
A constant equals to 2 to represent the JPG image format.
</summary>
</member>
<member name="F:ChartDirector.Chart.WMP">
<summary>
A constant equals to 3 to represent the WAP bitmap image format.
</summary>
</member>
<member name="F:ChartDirector.Chart.BMP">
<summary>
A constant equals to 4 to represent the BMP image format.
</summary>
</member>
<member name="F:ChartDirector.Chart.SVG">
<summary>
A constant equals to 5 to represent the SVG image format.
</summary>
</member>
<member name="F:ChartDirector.Chart.SVGZ">
<summary>
A constant equals to 6 to represent the compressed SVG image format.
</summary>
</member>
<member name="F:ChartDirector.Chart.PDF">
<summary>
A constant equals to 7 to represent the PDF image format.
</summary>
</member>
<member name="F:ChartDirector.Chart.NoAntiAlias">
<summary>
A constant equals to 0 to represent that text should be drawn without using anti-alias.
</summary>
</member>
<member name="F:ChartDirector.Chart.AntiAlias">
<summary>
A constant equals to 1 to represent that text should be drawn with classical anti-alias.
</summary>
</member>
<member name="F:ChartDirector.Chart.AutoAntiAlias">
<summary>
A constant equals to 2 to represent that text should be drawn with an automatically determined anti-alias method.
</summary>
</member>
<member name="F:ChartDirector.Chart.CompatAntiAlias">
<summary>
A constant equals to 6 to represent that text should be drawn with an automatically determined anti-alias method that behaves the same way as in ChartDirector 5.0.x or earlier versions.
</summary>
</member>
<member name="F:ChartDirector.Chart.TryPalette">
<summary>
A constant equals to 0 to represent that palette based image format should be used if the image contains 256 colors or less.
</summary>
</member>
<member name="F:ChartDirector.Chart.ForcePalette">
<summary>
A constant equals to 1 to represent that palette based image format should always be used (dither the image if necessary).
</summary>
</member>
<member name="F:ChartDirector.Chart.NoPalette">
<summary>
A constant equals to 2 to represent that true color image format should always be used.
</summary>
</member>
<member name="F:ChartDirector.Chart.Quantize">
<summary>
A constant equals to 0 to represent that the quantize dithering method should be used if dithering is required.
</summary>
</member>
<member name="F:ChartDirector.Chart.OrderedDither">
<summary>
A constant equals to 1 to represent that the ordered dithering method should be used if dithering is required.
</summary>
</member>
<member name="F:ChartDirector.Chart.ErrorDiffusion">
<summary>
A constant equals to 2 to represent that the error diffusion dithering method should be used if dithering is required.
</summary>
</member>
<member name="F:ChartDirector.Chart.SideLayout">
<summary>
A constant equals to 0 to represent the side label layout method for pie/donut charts.
</summary>
</member>
<member name="F:ChartDirector.Chart.CircleLayout">
<summary>
A constant equals to 1 to represent the circular label layout method for pie/donut charts.
</summary>
</member>
<member name="F:ChartDirector.Chart.Side">
<summary>
A constant equals to 3 to represent the "Side" data representation method for multiple data sets.
</summary>
</member>
<member name="F:ChartDirector.Chart.Stack">
<summary>
A constant equals to 1 to represent the "Stack" data representation method for multiple data sets.
</summary>
</member>
<member name="F:ChartDirector.Chart.Overlay">
<summary>
A constant equals to 0 to represent the "Overlay" data representation method for multiple data sets.
</summary>
</member>
<member name="F:ChartDirector.Chart.Percentage">
<summary>
A constant equals to 4 to represent the "Percentage" data representation method for multiple data sets.
</summary>
</member>
<member name="F:ChartDirector.Chart.MonotonicNone">
<summary>
A constant equals to 0 to represent that a spline curve is not constraint to flow in any direction.
</summary>
</member>
<member name="F:ChartDirector.Chart.MonotonicX">
<summary>
A constant equals to 1 to represent that a spline curve is constrained to not overshooting or undershooting in the x-axis direction.
</summary>
</member>
<member name="F:ChartDirector.Chart.MonotonicY">
<summary>
A constant equals to 2 to represent that a spline curve is constrained to not overshooting or undershooting in the y-axis direction.
</summary>
</member>
<member name="F:ChartDirector.Chart.MonotonicXY">
<summary>
A constant equals to 3 to represent that a spline curve is constrained to not overshooting or undershooting in both the x-axis direction and the y-axis direction.
</summary>
</member>
<member name="F:ChartDirector.Chart.MonotonicAuto">
<summary>
A constant equals to 3 to represent that the system will automatically determine whether to constrained a spline curve to not overshooting or undershooting in the x-axis direction and/or the y-axis direction.
</summary>
</member>
<member name="F:ChartDirector.Chart.LinearRegression">
<summary>
A constant equals to 1 to represent that linear regression be used to draw a trend line.
</summary>
</member>
<member name="F:ChartDirector.Chart.ConstrainedLinearRegression">
<summary>
A constant equals to 0 to represent that constrained linear regression be used to draw a trend line.
</summary>
</member>
<member name="F:ChartDirector.Chart.ExponentialRegression">
<summary>
A constant equals to -1 to represent that exponential regression be used to draw a trend line.
</summary>
</member>
<member name="F:ChartDirector.Chart.LogarithmicRegression">
<summary>
A constant equals to -2 to represent that logarithmic regression be used to draw a trend line.
</summary>
</member>
<member name="F:ChartDirector.Chart.LogTick">
<summary>
A constant equals to +1.6e308 to represent that the ticks in a log scale axis should be 1 - 2 - 5 - 10 style increments.
</summary>
</member>
<member name="F:ChartDirector.Chart.LinearTick">
<summary>
A constant equals to +1.5E+308 to represent that the ticks in a log scale axis should be 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 - 9 - 10 style increments.
</summary>
</member>
<member name="F:ChartDirector.Chart.TickInc">
<summary>
A constant equals to +1E+200 to represent the distance between major ticks.
</summary>
</member>
<member name="F:ChartDirector.Chart.MinorTickOnly">
<summary>
A constant equals to -1.7e308 to represent that the label position should contain a minor tick only.
</summary>
</member>
<member name="F:ChartDirector.Chart.MicroTickOnly">
<summary>
A constant equals to -1.6e308 to represent that the label position should contain a micro tick only.
</summary>
</member>
<member name="F:ChartDirector.Chart.PixelScale">
<summary>
A constant equals to 0 to represent that the size is measured in pixels.
</summary>
</member>
<member name="F:ChartDirector.Chart.XAxisScale">
<summary>
A constant equals to 1 to represent that the size is measured using the x-axis scale.
</summary>
</member>
<member name="F:ChartDirector.Chart.YAxisScale">
<summary>
A constant equals to 2 to represent that the size is measured using y-axis scale.
</summary>
</member>
<member name="F:ChartDirector.Chart.AngularAxisScale">
<summary>
A constant equals to 1 to represent that the size is measured using the angular-axis scale.
</summary>
</member>
<member name="F:ChartDirector.Chart.RadialAxisScale">
<summary>
A constant equals to 2 to represent that the size is measured using the radial-axis scale.
</summary>
</member>
<member name="F:ChartDirector.Chart.EndPoints">
<summary>
A constant equals to 3 to represent that the vector lengths and directions are measured by specifying the end points.
</summary>
</member>
<member name="F:ChartDirector.Chart.DataBound">
<summary>
A constant equals to -1.7E-100 to represent that the interpolated z values should not exceed the minimum or maximum values of the original data.
</summary>
</member>
<member name="F:ChartDirector.Chart.XAxisAtOrigin">
<summary>
A constant equals to 1 to represent that the x-axis should intersect with the zero point of the y-axis if it exists on the chart.
</summary>
</member>
<member name="F:ChartDirector.Chart.YAxisAtOrigin">
<summary>
A constant equals to 2 to represent that the y-axis should intersect with the zero point of the x-axis if it exists on the chart.
</summary>
</member>
<member name="F:ChartDirector.Chart.XYAxisAtOrigin">
<summary>
A constant equals to 3 to represent that the x-axis and y-axis should intersect at the origin if it exists on the chart.
</summary>
</member>
<member name="F:ChartDirector.Chart.XAxisSymmetric">
<summary>
A constant equals to 1 to represent that the x-axis should be symmetrical about the origin.
</summary>
</member>
<member name="F:ChartDirector.Chart.XAxisSymmetricIfNeeded">
<summary>
A constant equals to 2 to represent that the x-axis should be symmetrical about the origin if the data contain both positive and negative values.
</summary>
</member>
<member name="F:ChartDirector.Chart.YAxisSymmetric">
<summary>
A constant equals to 4 to represent that the y-axis should be symmetrical about the origin.
</summary>
</member>
<member name="F:ChartDirector.Chart.YAxisSymmetricIfNeeded">
<summary>
A constant equals to 8 to represent that the y-axis should be symmetrical about the origin if the data contain both positive and negative values.
</summary>
</member>
<member name="F:ChartDirector.Chart.XYAxisSymmetric">
<summary>
A constant equals to 16 to represent that the the x-axis and y-axis should be symmetrical about the origin.
</summary>
</member>
<member name="F:ChartDirector.Chart.XYAxisSymmetricIfNeeded">
<summary>
A constant equals to 32 to represent that the x-axis and y-axis should be symmetrical about the origin if the data contain both positive and negative values.
</summary>
</member>
<member name="F:ChartDirector.Chart.NormalLegend">
<summary>
A constant equals to 0 to represent that the legend keys order should follow the creation order of the data sets.
</summary>
</member>
<member name="F:ChartDirector.Chart.ReverseLegend">
<summary>
A constant equals to 1 to represent that the legend keys order is the reverse of the creation order of the data sets.
</summary>
</member>
<member name="F:ChartDirector.Chart.NoLegend">
<summary>
A constant equals to 2 to represent that no legend keys should be added to the legend box.
</summary>
</member>
<member name="F:ChartDirector.Chart.AutoGrid">
<summary>
A constant equals to -2 to represent that the number of columns in the legend box with grid layout is automatically determine.
</summary>
</member>
<member name="F:ChartDirector.Chart.ChartBackZ">
<summary>
A constant equals to 100 (in hex) to represent the z-order of the back surface of the chart.
</summary>
</member>
<member name="F:ChartDirector.Chart.ChartFrontZ">
<summary>
A constant equals to ffff (in hex) to represent the z-order of the front surface of the chart.
</summary>
</member>
<member name="F:ChartDirector.Chart.PlotAreaZ">
<summary>
A constant equals to 1000 (in hex) to represent the z-order of the plot area back surface of the chart.
</summary>
</member>
<member name="F:ChartDirector.Chart.GridLinesZ">
<summary>
A constant equals to 2000 (in hex) to represent the z-order of the grid lines of the chart.
</summary>
</member>
<member name="F:ChartDirector.Chart.TouchBar">
<summary>
A constant equals to -1.7e-100 to represent that the bars in a bar layer should touch each others with no gap in between.
</summary>
</member>
<member name="F:ChartDirector.Chart.HLOCDefault">
<summary>
A constant equals to 0 to represent that the HLOC symbols should be drawn using the same color.
</summary>
</member>
<member name="F:ChartDirector.Chart.HLOCOpenClose">
<summary>
A constant equals to 1 to represent that the HLOC symbols should be drawn using two alternative colors based on whether the closing price is higher than the opening price.
</summary>
</member>
<member name="F:ChartDirector.Chart.HLOCUpDown">
<summary>
A constant equals to 2 to represent that the HLOC symbols should be drawn using two alternative colors based on whether the closing price is higher than the previous closing price.
</summary>
</member>
<member name="F:ChartDirector.Chart.AggregateSum">
<summary>
A constant equals to   0 to represent  using the  sum as the aggregated value in "ArrayMath.aggregate".
</summary>
</member>
<member name="F:ChartDirector.Chart.AggregateAvg">
<summary>
A constant equals to   1 to represent  using the  average as the aggregated value in "ArrayMath.aggregate".
</summary>
</member>
<member name="F:ChartDirector.Chart.AggregateStdDev">
<summary>
A constant equals to   2 to represent  using the  standard deviation as the aggregated value in "ArrayMath.aggregate".
</summary>
</member>
<member name="F:ChartDirector.Chart.AggregateMin">
<summary>
A constant equals to   3 to represent  using the  minimum value as the aggregated value in "ArrayMath.aggregate".
</summary>
</member>
<member name="F:ChartDirector.Chart.AggregateMed">
<summary>
A constant equals to   4 to represent  using the  median value as the aggregated value in "ArrayMath.aggregate".
</summary>
</member>
<member name="F:ChartDirector.Chart.AggregateMax">
<summary>
A constant equals to   5 to represent  using the  maximum value as the aggregated value in "ArrayMath.aggregate".
</summary>
</member>
<member name="F:ChartDirector.Chart.AggregatePercentile">
<summary>
A constant equals to   6 to represent  using the  percentile value as the aggregated value in "ArrayMath.aggregate".
</summary>
</member>
<member name="F:ChartDirector.Chart.AggregateFirst">
<summary>
A constant equals to   7 to represent  using the  first value as the aggregated value in "ArrayMath.aggregate".
</summary>
</member>
<member name="F:ChartDirector.Chart.AggregateLast">
<summary>
A constant equals to   8 to represent  using the  last value as the aggregated value in "ArrayMath.aggregate".
</summary>
</member>
<member name="F:ChartDirector.Chart.AggregateCount">
<summary>
A constant equals to   9 to represent  using the  item count as the aggregated value in "ArrayMath.aggregate".
</summary>
</member>
<member name="F:ChartDirector.Chart.BoxFilter">
<summary>
A constant equals to 0 to represent  a Box graphical re-sampling filter.
</summary>
</member>
<member name="F:ChartDirector.Chart.LinearFilter">
<summary>
A constant equals to 1 to represent  a Linear graphical re-sampling filter.
</summary>
</member>
<member name="F:ChartDirector.Chart.QuadraticFilter">
<summary>
A constant equals to 2 to represent  a Quadratic graphical re-sampling filter.
</summary>
</member>
<member name="F:ChartDirector.Chart.BSplineFilter">
<summary>
A constant equals to 3 to represent  a B-spline graphical re-sampling filter.
</summary>
</member>
<member name="F:ChartDirector.Chart.HermiteFilter">
<summary>
A constant equals to 4 to represent  a Hermite graphical re-sampling filter.
</summary>
</member>
<member name="F:ChartDirector.Chart.CatromFilter">
<summary>
A constant equals to 5 to represent  a Catrom graphical re-sampling filter.
</summary>
</member>
<member name="F:ChartDirector.Chart.MitchellFilter">
<summary>
A constant equals to 6 to represent  a Mitchell graphical re-sampling filter.
</summary>
</member>
<member name="F:ChartDirector.Chart.SincFilter">
<summary>
A constant equals to 7 to represent  a Sinc graphical re-sampling filter.
</summary>
</member>
<member name="F:ChartDirector.Chart.LanczosFilter">
<summary>
A constant equals to 8 to represent  a Lanczos graphical re-sampling filter.
</summary>
</member>
<member name="F:ChartDirector.Chart.GaussianFilter">
<summary>
A constant equals to 9 to represent  a Gaussian graphical re-sampling filter.
</summary>
</member>
<member name="F:ChartDirector.Chart.HanningFilter">
<summary>
A constant equals to 10 to represent  a Hanning graphical re-sampling filter.
</summary>
</member>
<member name="F:ChartDirector.Chart.HammingFilter">
<summary>
A constant equals to 11 to represent  a Hamming graphical re-sampling filter.
</summary>
</member>
<member name="F:ChartDirector.Chart.BlackmanFilter">
<summary>
A constant equals to 12 to represent  a Blackman graphical re-sampling filter.
</summary>
</member>
<member name="F:ChartDirector.Chart.BesselFilter">
<summary>
A constant equals to 13 to represent  a Bessel graphical re-sampling filter.
</summary>
</member>
<member name="F:ChartDirector.Chart.ViewPortNoUpdate">
<summary>
A constant equals to   0 to represent  that the viewport  position and size should remain unchanged.
</summary>
</member>
<member name="F:ChartDirector.Chart.KeepVisibleRange">
<summary>
A constant equals to   1 to represent  that the viewport  should be adjusted to keep the axis end points unchanged.
</summary>
</member>
<member name="F:ChartDirector.Chart.ScrollWithMax">
<summary>
A constant equals to   2 to represent  that the viewport  should be adjusted to keep the distance from the axis end points to the upper full range unchanged.
</summary>
</member>
<member name="F:ChartDirector.Chart.ScrollWithMin">
<summary>
A constant equals to   3 to represent  that the viewport  should be adjusted so keep the distance from the axis end points to the lower full range unchanged.
</summary>
</member>
</members>
</doc>
